APCIterator ( string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
APCUIterator ([ mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
AppendIterator ( void )
ArgumentCountError ( )
ArithmeticError ( )
ArrayAccess ( )
ArrayIterator ([ mixed $array = array() [, int $flags = 0 ]] )
ArrayObject ([ mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]] )
AssertionError ( )
BadFunctionCallException ( )
BadMethodCallException ( )
CachingIterator ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
Cairo ( )
CairoAntialias ( )
CairoContent ( )
CairoContext ( CairoSurface $surface )
CairoException ( )
CairoExtend ( )
CairoFillRule ( )
CairoFilter ( )
CairoFontFace ( void )
CairoFontOptions ( void )
CairoFontSlant ( )
CairoFontType ( )
CairoFontWeight ( )
CairoFormat ( )
CairoGradientPattern ( void )
CairoHintMetrics ( )
CairoHintStyle ( )
CairoImageSurface ( int $format , int $width , int $height )
CairoLinearGradient ( float $x0 , float $y0 , float $x1 , float $y1 )
CairoLineCap ( )
CairoLineJoin ( )
CairoMatrix ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
CairoOperator ( )
CairoPath ( )
CairoPattern ( void )
CairoPatternType ( )
CairoPdfSurface ( string $file , float $width , float $height )
CairoPsLevel ( )
CairoPsSurface ( string $file , float $width , float $height )
CairoRadialGradient ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 )
CairoScaledFont ( CairoFontFace $font_face , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $options )
CairoSolidPattern ( float $red , float $green , float $blue [, float $alpha = 0 ] )
CairoStatus ( )
CairoSubpixelOrder ( )
CairoSurface ( void )
CairoSurfacePattern ( CairoSurface $surface )
CairoSurfaceType ( )
CairoSvgSurface ( string $file , float $width , float $height )
CairoSvgVersion ( )
CairoToyFontFace ( )
CallbackFilterIterator ( Iterator $iterator , callable $callback )
chdb ( string $pathname )
Closure ( void )
Collator ( string $locale )
Collectable ( )
COM ( )
CommonMark\CQL ( string $query )
CommonMark\Interfaces\IVisitable ( )
CommonMark\Interfaces\IVisitor ( )
CommonMark\Node ( )
CommonMark\Node\BlockQuote ( )
CommonMark\Node\BulletList ( void )
CommonMark\Node\Code ( void )
CommonMark\Node\CodeBlock ( void )
CommonMark\Node\CustomBlock ( )
CommonMark\Node\CustomInline ( )
CommonMark\Node\Document ( )
CommonMark\Node\Heading ( void )
CommonMark\Node\HTMLBlock ( void )
CommonMark\Node\HTMLInline ( void )
CommonMark\Node\Image ( void )
CommonMark\Node\Item ( )
CommonMark\Node\LineBreak ( )
CommonMark\Node\Link ( void )
CommonMark\Node\OrderedList ( void )
CommonMark\Node\Paragraph ( )
CommonMark\Node\SoftBreak ( )
CommonMark\Node\Text ( void )
CommonMark\Node\Text\Emphasis ( )
CommonMark\Node\Text\Strong ( )
CommonMark\Node\ThematicBreak ( )
CommonMark\Parser ([ int $options ] )
CompileError ( )
Componere\Abstract\Definition ( )
Componere\Definition ( string $name )
Componere\Method ( \Closure $closure )
Componere\Patch ( object $instance )
Componere\Value ([ $default ] )
Cond ( )
Countable ( )
CURLFile ( string $filename [, string $mimetype [, string $postname ]] )
DateInterval ( string $interval_spec )
DatePeriod ( DateTimeInterface $start , DateInterval $interval , int $recurrences [, int $options ] )
DateTime ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
DateTimeImmutable ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
DateTimeInterface ( )
DateTimeZone ( string $timezone )
Directory ( )
DirectoryIterator ( string $path )
DivisionByZeroError ( )
DomainException ( )
DOMAttr ( string $name [, string $value ] )
DOMCdataSection ( string $value )
DOMCharacterData ( )
DOMComment ([ string $value ] )
DOMDocument ([ string $version [, string $encoding ]] )
DOMDocumentFragment ( )
DOMDocumentType ( )
DOMElement ( string $name [, string $value [, string $namespaceURI ]] )
DOMEntity ( )
DOMEntityReference ( string $name )
DOMException ( )
DOMImplementation ( void )
DOMNamedNodeMap ( )
DOMNode ( )
DOMNodeList ( )
DOMNotation ( )
DOMProcessingInstruction ( string $name [, string $value ] )
DOMText ([ string $value ] )
DOMXPath ( DOMDocument $doc )
DOTNET ( )
Ds\Collection ( )
Ds\Deque ( )
Ds\Hashable ( )
Ds\Map ( )
Ds\Pair ([ mixed $key [, mixed $value ]] )
Ds\PriorityQueue ( )
Ds\Queue ( )
Ds\Sequence ( )
Ds\Set ( )
Ds\Stack ( )
Ds\Vector ( )
EmptyIterator ( )
Error ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
ErrorException ([ string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )
Ev ( )
EvCheck ( callable $callback [, mixed $data [, int $priority ]] )
EvChild ( int $pid , bool $trace , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvEmbed ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )
Event ( EventBase $base , mixed $fd , int $what , callable $cb [, mixed $arg = NULL ] )
EventBase ([ EventConfig $cfg ] )
EventBuffer ( void )
EventBufferEvent ( EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL ]]]]] )
EventConfig ( void )
EventDnsBase ( EventBase $base , bool $initialize )
EventHttp ( EventBase $base [, EventSslContext $ctx = NULL ] )
EventHttpConnection ( EventBase $base , EventDnsBase $dns_base , string $address , int $port [, EventSslContext $ctx = NULL ] )
EventHttpRequest ( callable $callback [, mixed $data = NULL ] )
EventListener ( EventBase $base , callable $cb , mixed $data , int $flags , int $backlog , mixed $target )
EventSslContext ( string $method , string $options )
EventUtil ( void )
EvFork ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvIdle ( callable $callback [, mixed $data [, int $priority ]] )
EvIo ( mixed $fd , int $events , callable $callback [, mixed $data [, int $priority ]] )
EvLoop ([ int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0 ]]]] )
EvPeriodic ( float $offset , string $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvPrepare ( string $callback [, string $data [, string $priority ]] )
EvSignal ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvStat ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvTimer ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvWatcher ( void )
Exception ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
FANNConnection ( int $from_neuron , int $to_neuron , float $weight )
FilesystemIterator ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )
FilterIterator ( Iterator $iterator )
finfo ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )
GearmanClient ( void )
GearmanException ( )
GearmanJob ( void )
GearmanTask ( void )
GearmanWorker ( void )
Gender\Gender ([ string $dsn ] )
Generator ( )
GlobIterator ( string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
Gmagick ([ string $filename ] )
GmagickDraw ( )
GmagickPixel ([ string $color ] )
GMP ( )
HaruAnnotation ( )
HaruDestination ( )
HaruDoc ( void )
HaruEncoder ( )
HaruException ( )
HaruFont ( )
HaruImage ( )
HaruOutline ( )
HaruPage ( )
HashContext ( void )
HRTime\PerformanceCounter ( )
HRTime\StopWatch ( )
HRTime\Unit ( )
Imagick ([ mixed $files ] )
ImagickDraw ( void )
ImagickKernel ( )
ImagickPixel ([ string $color ] )
ImagickPixelIterator ( Imagick $wand )
InfiniteIterator ( Iterator $iterator )
IntlBreakIterator ( void )
IntlCalendar ( void )
IntlChar ( )
IntlCodePointBreakIterator ( void )
IntlDateFormatter ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
IntlException ( )
IntlGregorianCalendar ([ IntlTimeZone $tz [, string $locale ]] )
IntlIterator ( )
IntlPartsIterator ( )
IntlRuleBasedBreakIterator ( string $rules [, string $areCompiled ] )
IntlTimeZone ( )
InvalidArgumentException ( )
Iterator ( )
IteratorAggregate ( )
IteratorIterator ( Traversable $iterator )
JsonException ( )
JsonSerializable ( )
Judy ( int $judy_type )
KTaglib_ID3v2_AttachedPictureFrame ( )
KTaglib_ID3v2_Frame ( )
KTaglib_ID3v2_Tag ( )
KTaglib_MPEG_AudioProperties ( )
KTaglib_MPEG_File ( )
KTaglib_Tag ( )
Lapack ( )
lapackexception ( )
LengthException ( )
libXMLError ( )
LimitIterator ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )
Locale ( )
LogicException ( )
Lua ( string $lua_script_file = NULL )
LuaClosure ( )
Memcache ( )
Memcached ([ string $persistent_id ] )
MemcachedException ( )
MessageFormatter ( string $locale , string $pattern )
Mongo ( )
MongoBinData ( string $data [, int $type = 0 ] )
MongoClient ([ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE ) [, array $driver_options ]]] )
MongoCode ( string $code [, array $scope = array() ] )
MongoCollection ( MongoDB $db , string $name )
MongoCommandCursor ( MongoClient $connection , string $ns , array $command = array() )
MongoConnectionException ( )
MongoCursor ( MongoClient $connection , string $ns [, array $query = array() [, array $fields = array() ]] )
MongoCursorException ( )
MongoCursorInterface ( )
MongoCursorTimeoutException ( )
MongoDate ([ int $sec = time() [, int $usec = 0 ]] )
MongoDB ( MongoClient $conn , string $name )
MongoDBRef ( )
MongoDB\BSON\Binary ( string $data , int $type )
MongoDB\BSON\BinaryInterface ( )
MongoDB\BSON\DBPointer ( void )
MongoDB\BSON\Decimal128 ([ string $value ] )
MongoDB\BSON\Decimal128Interface ( )
MongoDB\BSON\Int64 ( void )
MongoDB\BSON\Javascript ( string $code [, array|object $scope ] )
MongoDB\BSON\JavascriptInterface ( )
MongoDB\BSON\MaxKey ( void )
MongoDB\BSON\MaxKeyInterface ( )
MongoDB\BSON\MinKey ( void )
MongoDB\BSON\MinKeyInterface ( )
MongoDB\BSON\ObjectId ([ string $id ] )
MongoDB\BSON\ObjectIdInterface ( )
MongoDB\BSON\Persistable ( )
MongoDB\BSON\Regex ( string $pattern [, string $flags = "" ] )
MongoDB\BSON\RegexInterface ( )
MongoDB\BSON\Serializable ( )
MongoDB\BSON\Symbol ( void )
MongoDB\BSON\Timestamp ( int $increment , int $timestamp )
MongoDB\BSON\TimestampInterface ( )
MongoDB\BSON\Type ( )
MongoDB\BSON\Undefined ( void )
MongoDB\BSON\Unserializable ( )
MongoDB\BSON\UTCDateTime ([ integer|float|string|DateTimeInterface $milliseconds = NULL ] )
MongoDB\BSON\UTCDateTimeInterface ( )
MongoDB\Driver\BulkWrite ([ array $options ] )
MongoDB\Driver\Command ( array|object $document [, array $commandOptions ] )
MongoDB\Driver\Cursor ( void )
MongoDB\Driver\CursorId ( void )
MongoDB\Driver\Exception\AuthenticationException ( )
MongoDB\Driver\Exception\BulkWriteException ( )
MongoDB\Driver\Exception\CommandException ( )
MongoDB\Driver\Exception\ConnectionException ( )
MongoDB\Driver\Exception\ConnectionTimeoutException ( )
MongoDB\Driver\Exception\Exception ( )
MongoDB\Driver\Exception\ExecutionTimeoutException ( )
MongoDB\Driver\Exception\InvalidArgumentException ( )
MongoDB\Driver\Exception\LogicException ( )
MongoDB\Driver\Exception\RuntimeException ( )
MongoDB\Driver\Exception\ServerException ( )
MongoDB\Driver\Exception\SSLConnectionException ( )
MongoDB\Driver\Exception\UnexpectedValueException ( )
MongoDB\Driver\Exception\WriteException ( )
MongoDB\Driver\Manager ([ string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array() ]]] )
MongoDB\Driver\Monitoring\CommandFailedEvent ( )
MongoDB\Driver\Monitoring\CommandStartedEvent ( )
MongoDB\Driver\Monitoring\CommandSubscriber ( )
MongoDB\Driver\Monitoring\CommandSucceededEvent ( )
MongoDB\Driver\Monitoring\Subscriber ( )
MongoDB\Driver\Query ( array|object $filter [, array $queryOptions ] )
MongoDB\Driver\ReadConcern ([ string $level ] )
MongoDB\Driver\ReadPreference ( string|integer $mode [, array $tagSets = NULL [, array $options = array() ]] )
MongoDB\Driver\Server ( void )
MongoDB\Driver\Session ( void )
MongoDB\Driver\WriteConcern ( string|integer $w [, int $wtimeout [, bool $journal ]] )
MongoDB\Driver\WriteConcernError ( )
MongoDB\Driver\WriteError ( )
MongoDB\Driver\WriteResult ( )
MongoDeleteBatch ( MongoCollection $collection [, array $write_options ] )
MongoDuplicateKeyException ( )
MongoException ( )
MongoExecutionTimeoutException ( )
MongoGridFS ( MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs" ]] )
MongoGridFSCursor ( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields )
MongoGridFSException ( )
MongoGridFSFile ( MongoGridFS $gridfs , array $file )
MongoId ([ string|MongoId $id = NULL ] )
MongoInsertBatch ( MongoCollection $collection [, array $write_options ] )
MongoInt32 ( string $value )
MongoInt64 ( string $value )
MongoLog ( )
MongoMaxKey ( )
MongoMinKey ( )
MongoPool ( )
MongoProtocolException ( )
MongoRegex ( string $regex )
MongoResultException ( )
MongoTimestamp ([ int $sec = time() [, int $inc ]] )
MongoUpdateBatch ( MongoCollection $collection [, array $write_options ] )
MongoWriteBatch ( MongoCollection $collection [, string $batch_type [, array $write_options ]] )
MongoWriteConcernException ( )
MultipleIterator ([ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC ] )
Mutex ( )
mysqli ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
mysqli_driver ( )
mysqli_result ( )
mysqli_sql_exception ( )
mysqli_stmt ( mysqli $link [, string $query ] )
mysqli_warning ( void )
MysqlndUhConnection ( void )
MysqlndUhPreparedStatement ( void )
mysql_xdevapi\BaseResult ( )
mysql_xdevapi\Collection ( )
mysql_xdevapi\CollectionAdd ( )
mysql_xdevapi\CollectionFind ( )
mysql_xdevapi\CollectionModify ( )
mysql_xdevapi\CollectionRemove ( )
mysql_xdevapi\ColumnResult ( )
mysql_xdevapi\CrudOperationBindable ( )
mysql_xdevapi\CrudOperationLimitable ( )
mysql_xdevapi\CrudOperationSkippable ( )
mysql_xdevapi\CrudOperationSortable ( )
mysql_xdevapi\DatabaseObject ( )
mysql_xdevapi\DocResult ( )
mysql_xdevapi\Driver ( void )
mysql_xdevapi\Exception ( )
mysql_xdevapi\Executable ( )
mysql_xdevapi\ExecutionStatus ( void )
mysql_xdevapi\Expression ( string $expression )
mysql_xdevapi\FieldMetadata ( void )
mysql_xdevapi\Result ( )
mysql_xdevapi\RowResult ( )
mysql_xdevapi\Schema ( )
mysql_xdevapi\SchemaObject ( )
mysql_xdevapi\Session ( )
mysql_xdevapi\SqlStatement ( )
mysql_xdevapi\SqlStatementResult ( )
mysql_xdevapi\Statement ( )
mysql_xdevapi\Table ( )
mysql_xdevapi\TableDelete ( )
mysql_xdevapi\TableInsert ( )
mysql_xdevapi\TableSelect ( )
mysql_xdevapi\TableUpdate ( )
mysql_xdevapi\Warning ( void )
mysql_xdevapi\XSession ( void )
NoRewindIterator ( Iterator $iterator )
Normalizer ( )
NumberFormatter ( string $locale , int $style [, string $pattern ] )
OAuth ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )
OAuthException ( )
OAuthProvider ([ array $params_array ] )
OCI-Collection ( )
OCI-Lob ( )
OuterIterator ( )
OutOfBoundsException ( )
OutOfRangeException ( )
OverflowException ( )
parallel\Future ( )
parallel\Runtime ( void )
ParentIterator ( RecursiveIterator $iterator )
Parle\ErrorInfo ( )
Parle\Lexer ( )
Parle\LexerException ( )
Parle\Parser ( )
Parle\ParserException ( )
Parle\RLexer ( )
Parle\RParser ( )
Parle\Stack ( )
Parle\Token ( )
ParseError ( )
PDO ( string $dsn [, string $username [, string $passwd [, array $options ]]] )
PDOException ( )
PDOStatement ( )
Phar ( string $fname [, int $flags [, string $alias ]] )
PharData ( string $fname [, int $flags [, string $alias [, int $format = Phar::TAR ]]] )
PharException ( )
PharFileInfo ( string $entry )
phdfs ( string $ip , string $port )
php_user_filter ( )
pht\AtomicInteger ([ int $value = 0 ] )
pht\HashTable ( )
pht\Queue ( )
pht\Runnable ( )
pht\Thread ( )
pht\Threaded ( )
pht\Vector ([ int $size = 0 [, mixed $value = 0 ]] )
Pool ( int $size [, string $class [, array $ctor ]] )
QuickHashIntHash ( int $size [, int $options ] )
QuickHashIntSet ( int $size [, int $options ] )
QuickHashIntStringHash ( int $size [, int $options = 0 ] )
QuickHashStringIntHash ( int $size [, int $options = 0 ] )
RangeException ( )
RarArchive ( )
RarEntry ( )
RarException ( )
RecursiveArrayIterator ([ mixed $array = array() [, int $flags = 0 ]] )
RecursiveCachingIterator ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
RecursiveCallbackFilterIterator ( RecursiveIterator $iterator , string $callback )
RecursiveDirectoryIterator ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
RecursiveFilterIterator ( RecursiveIterator $iterator )
RecursiveIterator ( )
RecursiveIteratorIterator ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )
RecursiveRegexIterator ( RecursiveIterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
RecursiveTreeIterator ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )
Reflection ( )
ReflectionClass ( mixed $argument )
ReflectionClassConstant ( mixed $class , string $name )
ReflectionException ( )
ReflectionExtension ( string $name )
ReflectionFunction ( mixed $name )
ReflectionFunctionAbstract ( )
ReflectionGenerator ( Generator $generator )
ReflectionMethod ( mixed $class , string $name )
ReflectionNamedType ( )
ReflectionObject ( object $argument )
ReflectionParameter ( string $function , string $parameter )
ReflectionProperty ( mixed $class , string $name )
ReflectionType ( )
ReflectionZendExtension ( string $name )
Reflector ( )
RegexIterator ( Iterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
ResourceBundle ( string $locale , string $bundlename [, bool $fallback ] )
RRDCreator ( string $path [, string $startTime [, int $step = 0 ]] )
RRDGraph ( string $path )
RRDUpdater ( string $path )
RuntimeException ( )
SeasLog ( )
SeekableIterator ( )
Serializable ( )
SessionHandler ( )
SessionHandlerInterface ( )
SessionIdInterface ( )
SessionUpdateTimestampHandlerInterface ( )
SimpleXMLElement ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
SimpleXMLIterator ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
SNMP ( int $version , string $hostname , string $community [, int $timeout = 1000000 [, int $retries = 5 ]] )
SNMPException ( )
SoapClient ( mixed $wsdl [, array $options ] )
SoapFault ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )
SoapHeader ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )
SoapParam ( mixed $data , string $name )
SoapServer ( mixed $wsdl [, array $options ] )
SoapVar ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )
SolrClient ( array $clientOptions )
SolrClientException ( )
SolrCollapseFunction ([ string $field ] )
SolrDisMaxQuery ([ string $q ] )
SolrDocument ( void )
SolrDocumentField ( void )
SolrException ( )
SolrGenericResponse ( void )
SolrIllegalArgumentException ( )
SolrIllegalOperationException ( )
SolrInputDocument ( void )
SolrMissingMandatoryParameterException ( )
SolrModifiableParams ( void )
SolrObject ( void )
SolrParams ( )
SolrPingResponse ( void )
SolrQuery ([ string $q ] )
SolrQueryResponse ( void )
SolrResponse ( )
SolrServerException ( )
SolrUpdateResponse ( void )
SolrUtils ( )
SphinxClient ( void )
SplBool ( )
SplDoublyLinkedList ( void )
SplEnum ([ mixed $initial_value [, bool $strict ]] )
SplFileInfo ( string $file_name )
SplFileObject ( string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context ]]] )
SplFixedArray ([ int $size = 0 ] )
SplFloat ([ mixed $initial_value [, bool $strict ]] )
SplHeap ( void )
SplInt ([ mixed $initial_value [, bool $strict ]] )
SplMaxHeap ( )
SplMinHeap ( )
SplObjectStorage ( )
SplObserver ( )
SplPriorityQueue ( void )
SplQueue ( void )
SplStack ( void )
SplString ([ mixed $initial_value [, bool $strict ]] )
SplSubject ( )
SplTempFileObject ([ int $max_memory ] )
SplType ([ mixed $initial_value [, bool $strict ]] )
Spoofchecker ( void )
SQLite3 ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL ]] )
SQLite3Result ( )
SQLite3Stmt ( )
Stomp ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
StompException ( )
StompFrame ([ string $command [, array $headers [, string $body ]]] )
streamWrapper ( void )
SVM ( void )
SVMModel ([ string $filename ] )
SWFAction ( string $script )
SWFBitmap ( mixed $file [, mixed $alphafile ] )
SWFButton ( void )
SWFDisplayItem ( )
SWFFill ( )
SWFFont ( string $filename )
SWFFontChar ( )
SWFGradient ( void )
SWFMorph ( void )
SWFMovie ([ int $version ] )
SWFPrebuiltClip ( mixed $file )
SWFShape ( void )
SWFSound ( string $filename [, int $flags = 0 ] )
SWFSoundInstance ( )
SWFSprite ( void )
SWFText ( void )
SWFTextField ([ int $flags ] )
SWFVideoStream ([ string $file ] )
Swoole\Async ( )
Swoole\Atomic ( )
Swoole\Buffer ( )
Swoole\Channel ( )
Swoole\Client ( )
Swoole\Connection\Iterator ( )
Swoole\Coroutine ( )
Swoole\Event ( )
Swoole\Exception ( )
Swoole\Http\Client ( )
Swoole\Http\Request ( )
Swoole\Http\Response ( )
Swoole\Http\Server ( )
Swoole\Lock ( )
Swoole\Mmap ( )
Swoole\MySQL ( )
Swoole\MySQL\Exception ( )
Swoole\Process ( )
Swoole\Redis\Server ( )
Swoole\Serialize ( )
Swoole\Server ( )
Swoole\Table ( )
Swoole\Timer ( )
Swoole\WebSocket\Frame ( )
Swoole\WebSocket\Server ( )
SyncEvent ([ string $name [, bool $manual = FALSE [, bool $prefire = FALSE ]]] )
SyncMutex ([ string $name ] )
SyncReaderWriter ([ string $name [, bool $autounlock = TRUE ]] )
SyncSemaphore ([ string $name [, int $initialval = 1 [, bool $autounlock = TRUE ]]] )
SyncSharedMemory ( string $name , int $size )
Thread ( )
Threaded ( )
Throwable ( )
tidy ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )
tidyNode ( void )
TokyoTyrant ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )
tokyotyrantexception ( )
TokyoTyrantIterator ( mixed $object )
TokyoTyrantQuery ( TokyoTyrantTable $table )
TokyoTyrantTable ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )
Transliterator ( void )
Traversable ( )
TypeError ( )
UConverter ([ string $destination_encoding [, string $source_encoding ]] )
UI\Area ( )
UI\Control ( )
UI\Controls\Box ([ int $orientation = UI\Controls\Box::Horizontal ] )
UI\Controls\Button ( string $text )
UI\Controls\Check ( string $text )
UI\Controls\ColorButton ( )
UI\Controls\Combo ( )
UI\Controls\EditableCombo ( )
UI\Controls\Entry ([ int $type = UI\Controls\Entry::Normal ] )
UI\Controls\Form ( )
UI\Controls\Grid ( )
UI\Controls\Group ( string $title )
UI\Controls\Label ( string $text )
UI\Controls\MultilineEntry ([ int $type ] )
UI\Controls\Picker ([ int $type = UI\Controls\Picker::Date ] )
UI\Controls\Progress ( )
UI\Controls\Radio ( )
UI\Controls\Separator ([ int $type = UI\Controls\Separator::Horizontal ] )
UI\Controls\Slider ( int $min , int $max )
UI\Controls\Spin ( int $min , int $max )
UI\Controls\Tab ( )
UI\Draw\Brush ( UI\Draw\Color $color )
UI\Draw\Brush\Gradient ( )
UI\Draw\Brush\LinearGradient ( UI\Point $start , UI\Point $end )
UI\Draw\Brush\RadialGradient ( UI\Point $start , UI\Point $outer , float $radius )
UI\Draw\Color ([ UI\Draw\Color $color ] )
UI\Draw\Line\Cap ( )
UI\Draw\Line\Join ( )
UI\Draw\Matrix ( )
UI\Draw\Path ([ int $mode = UI\Draw\Path::Winding ] )
UI\Draw\Pen ( )
UI\Draw\Stroke ([ int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10 ]]]] )
UI\Draw\Text\Font ( UI\Draw\Text\Font\Descriptor $descriptor )
UI\Draw\Text\Font\Descriptor ( string $family , float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal ]]] )
UI\Draw\Text\Font\Italic ( )
UI\Draw\Text\Font\Stretch ( )
UI\Draw\Text\Font\Weight ( )
UI\Draw\Text\Layout ( string $text , UI\Draw\Text\Font $font , float $width )
UI\Exception\InvalidArgumentException ( )
UI\Exception\RuntimeException ( )
UI\Executor ( void )
UI\Key ( )
UI\Menu ( string $name )
UI\MenuItem ( )
UI\Point ( float $x , float $y )
UI\Size ( float $width , float $height )
UI\Window ( string $title , Size $size [, bool $menu = FALSE ] )
UnderflowException ( )
UnexpectedValueException ( )
V8Js ([ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE ]]]] )
V8JsException ( )
VARIANT ( )
VarnishAdmin ([ array $args ] )
VarnishLog ([ array $args ] )
VarnishStat ([ array $args ] )
Volatile ( )
Vtiful\Kernel\Excel ( array $config )
Vtiful\Kernel\Format ( )
WeakMap ( void )
WeakRef ( object $object )
wkhtmltox\Image\Converter ([ string $buffer [, array $settings ]] )
wkhtmltox\PDF\Converter ([ array $settings ] )
wkhtmltox\PDF\Object ( string $buffer [, array $settings ] )
Worker ( )
XMLDiff\Base ( string $nsname )
XMLDiff\DOM ( string $nsname )
XMLDiff\File ( string $nsname )
XMLDiff\Memory ( string $nsname )
XMLReader ( )
XSLTProcessor ( )
Yaconf ( )
Yaf_Action_Abstract ( void )
Yaf_Application ( mixed $config [, string $envrion ] )
Yaf_Bootstrap_Abstract ( )
Yaf_Config_Abstract ( )
Yaf_Config_Ini ( string $config_file [, string $section ] )
Yaf_Config_Simple ( string $config_file [, string $section ] )
Yaf_Controller_Abstract ( void )
Yaf_Dispatcher ( void )
Yaf_Exception ( void )
Yaf_Exception_DispatchFailed ( void )
Yaf_Exception_LoadFailed ( void )
Yaf_Exception_LoadFailed_Action ( void )
Yaf_Exception_LoadFailed_Controller ( void )
Yaf_Exception_LoadFailed_Module ( void )
Yaf_Exception_LoadFailed_View ( void )
Yaf_Exception_RouterFailed ( void )
Yaf_Exception_StartupError ( void )
Yaf_Exception_TypeError ( void )
Yaf_Loader ( void )
Yaf_Plugin_Abstract ( )
Yaf_Registry ( void )
Yaf_Request_Abstract ( )
Yaf_Request_Http ([ string $request_uri [, string $base_uri ]] )
Yaf_Request_Simple ([ string $method [, string $module [, string $controller [, string $action [, array $params ]]]]] )
Yaf_Response_Abstract ( void )
Yaf_Router ( void )
Yaf_Route_Interface ( )
Yaf_Route_Map ([ string $controller_prefer = FALSE [, string $delimiter = "" ]] )
Yaf_Route_Regex ( string $match , array $route [, array $map [, array $verify [, string $reverse ]]] )
Yaf_Route_Rewrite ( string $match , array $route [, array $verify ] )
Yaf_Route_Simple ( string $module_name , string $controller_name , string $action_name )
Yaf_Route_Static ( )
Yaf_Route_Supervar ( string $supervar_name )
Yaf_Session ( void )
Yaf_View_Interface ( )
Yaf_View_Simple ( string $template_dir [, array $options ] )
Yar_Client ( string $url [, array $options ] )
Yar_Client_Exception ( )
Yar_Concurrent_Client ( )
Yar_Server ( Object $obj )
Yar_Server_Exception ( )
ZipArchive ( )
ZMQ ( void )
ZMQContext ([ int $io_threads = 1 [, bool $is_persistent = TRUE ]] )
ZMQDevice ( ZMQSocket $frontend , ZMQSocket $backend [, ZMQSocket $listener ] )
ZMQPoll ( )
ZMQSocket ( ZMQContext $context , int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL ]] )
Zookeeper ([ string $host = '' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000 ]]] )
ZookeeperAuthenticationException ( )
ZookeeperConfig ( )
ZookeeperConnectionException ( )
ZookeeperException ( )
ZookeeperMarshallingException ( )
ZookeeperNoNodeException ( )
ZookeeperOperationTimeoutException ( )
ZookeeperSessionException ( )
