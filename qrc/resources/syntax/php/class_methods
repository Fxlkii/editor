APCIterator::current ( void ) : mixed
APCIterator::getTotalCount ( void ) : int
APCIterator::getTotalHits ( void ) : int
APCIterator::getTotalSize ( void ) : int
APCIterator::key ( void ) : string
APCIterator::next ( void ) : bool
APCIterator::rewind ( void ) : void
APCIterator::valid ( void ) : bool
APCIterator::__construct ( string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
APCUIterator::current ( void ) : mixed
APCUIterator::getTotalCount ( void ) : int
APCUIterator::getTotalHits ( void ) : int
APCUIterator::getTotalSize ( void ) : int
APCUIterator::key ( void ) : string
APCUIterator::next ( void ) : bool
APCUIterator::rewind ( void ) : void
APCUIterator::valid ( void ) : bool
APCUIterator::__construct ([ mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
AppendIterator::append ( Iterator $iterator ) : void
AppendIterator::current ( void ) : mixed
AppendIterator::getArrayIterator ( void ) : ArrayIterator
AppendIterator::getInnerIterator ( void ) : Iterator
AppendIterator::getIteratorIndex ( void ) : int
AppendIterator::key ( void ) : scalar
AppendIterator::next ( void ) : void
AppendIterator::rewind ( void ) : void
AppendIterator::valid ( void ) : bool
AppendIterator::__construct ( void )
ArgumentCountError::getCode ( void ) : mixed
ArgumentCountError::getFile ( void ) : string
ArgumentCountError::getLine ( void ) : int
ArgumentCountError::getMessage ( void ) : string
ArgumentCountError::getPrevious ( void ) : Throwable
ArgumentCountError::getTrace ( void ) : array
ArgumentCountError::getTraceAsString ( void ) : string
ArgumentCountError::__clone ( void ) : void
ArgumentCountError::__toString ( void ) : string
ArithmeticError::getCode ( void ) : mixed
ArithmeticError::getFile ( void ) : string
ArithmeticError::getLine ( void ) : int
ArithmeticError::getMessage ( void ) : string
ArithmeticError::getPrevious ( void ) : Throwable
ArithmeticError::getTrace ( void ) : array
ArithmeticError::getTraceAsString ( void ) : string
ArithmeticError::__clone ( void ) : void
ArithmeticError::__toString ( void ) : string
ArrayAccess::offsetExists ( mixed $offset ) : bool
ArrayAccess::offsetGet ( mixed $offset ) : mixed
ArrayAccess::offsetSet ( mixed $offset , mixed $value ) : void
ArrayAccess::offsetUnset ( mixed $offset ) : void
ArrayIterator::append ( mixed $value ) : void
ArrayIterator::asort ( void ) : void
ArrayIterator::count ( void ) : int
ArrayIterator::current ( void ) : mixed
ArrayIterator::getArrayCopy ( void ) : array
ArrayIterator::getFlags ( void ) : void
ArrayIterator::key ( void ) : mixed
ArrayIterator::ksort ( void ) : void
ArrayIterator::natcasesort ( void ) : void
ArrayIterator::natsort ( void ) : void
ArrayIterator::next ( void ) : void
ArrayIterator::offsetExists ( mixed $index ) : bool
ArrayIterator::offsetGet ( mixed $index ) : mixed
ArrayIterator::offsetSet ( mixed $index , mixed $newval ) : void
ArrayIterator::offsetUnset ( mixed $index ) : void
ArrayIterator::rewind ( void ) : void
ArrayIterator::seek ( int $position ) : void
ArrayIterator::serialize ( void ) : string
ArrayIterator::setFlags ( string $flags ) : void
ArrayIterator::uasort ( callable $cmp_function ) : void
ArrayIterator::uksort ( callable $cmp_function ) : void
ArrayIterator::unserialize ( string $serialized ) : string
ArrayIterator::valid ( void ) : bool
ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )
ArrayObject::append ( mixed $value ) : void
ArrayObject::asort ( void ) : void
ArrayObject::count ( void ) : int
ArrayObject::exchangeArray ( mixed $input ) : array
ArrayObject::getArrayCopy ( void ) : array
ArrayObject::getFlags ( void ) : int
ArrayObject::getIterator ( void ) : ArrayIterator
ArrayObject::getIteratorClass ( void ) : string
ArrayObject::ksort ( void ) : void
ArrayObject::natcasesort ( void ) : void
ArrayObject::natsort ( void ) : void
ArrayObject::offsetExists ( mixed $index ) : bool
ArrayObject::offsetGet ( mixed $index ) : mixed
ArrayObject::offsetSet ( mixed $index , mixed $newval ) : void
ArrayObject::offsetUnset ( mixed $index ) : void
ArrayObject::serialize ( void ) : string
ArrayObject::setFlags ( int $flags ) : void
ArrayObject::setIteratorClass ( string $iterator_class ) : void
ArrayObject::uasort ( callable $cmp_function ) : void
ArrayObject::uksort ( callable $cmp_function ) : void
ArrayObject::unserialize ( string $serialized ) : void
ArrayObject::__construct ([ mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]] )
AssertionError::getCode ( void ) : mixed
AssertionError::getFile ( void ) : string
AssertionError::getLine ( void ) : int
AssertionError::getMessage ( void ) : string
AssertionError::getPrevious ( void ) : Throwable
AssertionError::getTrace ( void ) : array
AssertionError::getTraceAsString ( void ) : string
AssertionError::__clone ( void ) : void
AssertionError::__toString ( void ) : string
BadFunctionCallException::getCode ( void ) : mixed
BadFunctionCallException::getFile ( void ) : string
BadFunctionCallException::getLine ( void ) : int
BadFunctionCallException::getMessage ( void ) : string
BadFunctionCallException::getPrevious ( void ) : Throwable
BadFunctionCallException::getTrace ( void ) : array
BadFunctionCallException::getTraceAsString ( void ) : string
BadFunctionCallException::__clone ( void ) : void
BadFunctionCallException::__toString ( void ) : string
BadMethodCallException::getCode ( void ) : mixed
BadMethodCallException::getFile ( void ) : string
BadMethodCallException::getLine ( void ) : int
BadMethodCallException::getMessage ( void ) : string
BadMethodCallException::getPrevious ( void ) : Throwable
BadMethodCallException::getTrace ( void ) : array
BadMethodCallException::getTraceAsString ( void ) : string
BadMethodCallException::__clone ( void ) : void
BadMethodCallException::__toString ( void ) : string
CachingIterator::count ( void ) : int
CachingIterator::current ( void ) : void
CachingIterator::getCache ( void ) : array
CachingIterator::getFlags ( void ) : int
CachingIterator::getInnerIterator ( void ) : Iterator
CachingIterator::hasNext ( void ) : void
CachingIterator::key ( void ) : scalar
CachingIterator::next ( void ) : void
CachingIterator::offsetExists ( mixed $index ) : void
CachingIterator::offsetGet ( string $index ) : void
CachingIterator::offsetSet ( mixed $index , mixed $newval ) : void
CachingIterator::offsetUnset ( string $index ) : void
CachingIterator::rewind ( void ) : void
CachingIterator::setFlags ( int $flags ) : void
CachingIterator::valid ( void ) : void
CachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
CachingIterator::__toString ( void ) : void
Cairo::availableFonts ( void ) : array
Cairo::availableSurfaces ( void ) : array
Cairo::statusToString ( int $status ) : string
Cairo::version ( void ) : int
Cairo::versionString ( void ) : string
CairoContext::appendPath ( CairoPath $path ) : void
CairoContext::arc ( float $x , float $y , float $radius , float $angle1 , float $angle2 ) : void
CairoContext::arcNegative ( float $x , float $y , float $radius , float $angle1 , float $angle2 ) : void
CairoContext::clip ( void ) : void
CairoContext::clipExtents ( void ) : array
CairoContext::clipPreserve ( void ) : void
CairoContext::clipRectangleList ( void ) : array
CairoContext::closePath ( void ) : void
CairoContext::copyPage ( void ) : void
CairoContext::copyPath ( void ) : CairoPath
CairoContext::copyPathFlat ( void ) : CairoPath
CairoContext::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) : void
CairoContext::deviceToUser ( float $x , float $y ) : array
CairoContext::deviceToUserDistance ( float $x , float $y ) : array
CairoContext::fill ( void ) : void
CairoContext::fillExtents ( void ) : array
CairoContext::fillPreserve ( void ) : void
CairoContext::fontExtents ( void ) : array
CairoContext::getAntialias ( void ) : int
CairoContext::getCurrentPoint ( void ) : array
CairoContext::getDash ( void ) : array
CairoContext::getDashCount ( void ) : int
CairoContext::getFillRule ( void ) : int
CairoContext::getFontFace ( void ) : void
CairoContext::getFontMatrix ( void ) : void
CairoContext::getFontOptions ( void ) : void
CairoContext::getGroupTarget ( void ) : void
CairoContext::getLineCap ( void ) : int
CairoContext::getLineJoin ( void ) : int
CairoContext::getLineWidth ( void ) : float
CairoContext::getMatrix ( void ) : void
CairoContext::getMiterLimit ( void ) : float
CairoContext::getOperator ( void ) : int
CairoContext::getScaledFont ( void ) : void
CairoContext::getSource ( void ) : void
CairoContext::getTarget ( void ) : void
CairoContext::getTolerance ( void ) : float
CairoContext::glyphPath ( array $glyphs ) : void
CairoContext::hasCurrentPoint ( void ) : bool
CairoContext::identityMatrix ( void ) : void
CairoContext::inFill ( float $x , float $y ) : bool
CairoContext::inStroke ( float $x , float $y ) : bool
CairoContext::lineTo ( float $x , float $y ) : void
CairoContext::mask ( CairoPattern $pattern ) : void
CairoContext::maskSurface ( CairoSurface $surface [, float $x [, float $y ]] ) : void
CairoContext::moveTo ( float $x , float $y ) : void
CairoContext::newPath ( void ) : void
CairoContext::newSubPath ( void ) : void
CairoContext::paint ( void ) : void
CairoContext::paintWithAlpha ( float $alpha ) : void
CairoContext::pathExtents ( void ) : array
CairoContext::popGroup ( void ) : void
CairoContext::popGroupToSource ( void ) : void
CairoContext::pushGroup ( void ) : void
CairoContext::pushGroupWithContent ( int $content ) : void
CairoContext::rectangle ( float $x , float $y , float $width , float $height ) : void
CairoContext::relCurveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) : void
CairoContext::relLineTo ( float $x , float $y ) : void
CairoContext::relMoveTo ( float $x , float $y ) : void
CairoContext::resetClip ( void ) : void
CairoContext::restore ( void ) : void
CairoContext::rotate ( float $angle ) : void
CairoContext::save ( void ) : void
CairoContext::scale ( float $x , float $y ) : void
CairoContext::selectFontFace ( string $family [, int $slant [, int $weight ]] ) : void
CairoContext::setAntialias ([ int $antialias ] ) : void
CairoContext::setDash ( array $dashes [, float $offset ] ) : void
CairoContext::setFillRule ( int $setting ) : void
CairoContext::setFontFace ( CairoFontFace $fontface ) : void
CairoContext::setFontMatrix ( CairoMatrix $matrix ) : void
CairoContext::setFontOptions ( CairoFontOptions $fontoptions ) : void
CairoContext::setFontSize ( float $size ) : void
CairoContext::setLineCap ( int $setting ) : void
CairoContext::setLineJoin ( int $setting ) : void
CairoContext::setLineWidth ( float $width ) : void
CairoContext::setMatrix ( CairoMatrix $matrix ) : void
CairoContext::setMiterLimit ( float $limit ) : void
CairoContext::setOperator ( int $setting ) : void
CairoContext::setScaledFont ( CairoScaledFont $scaledfont ) : void
CairoContext::setSource ( CairoPattern $pattern ) : void
CairoContext::setSourceRGB ( float $red , float $green , float $blue ) : void
CairoContext::setSourceRGBA ( float $red , float $green , float $blue , float $alpha ) : void
CairoContext::setSourceSurface ( CairoSurface $surface [, float $x [, float $y ]] ) : void
CairoContext::setTolerance ( float $tolerance ) : void
CairoContext::showPage ( void ) : void
CairoContext::showText ( string $text ) : void
CairoContext::status ( void ) : int
CairoContext::stroke ( void ) : void
CairoContext::strokeExtents ( void ) : array
CairoContext::strokePreserve ( void ) : void
CairoContext::textExtents ( string $text ) : array
CairoContext::textPath ( string $string ) : void
CairoContext::transform ( CairoMatrix $matrix ) : void
CairoContext::translate ( float $x , float $y ) : void
CairoContext::userToDevice ( float $x , float $y ) : array
CairoContext::userToDeviceDistance ( float $x , float $y ) : array
CairoContext::__construct ( CairoSurface $surface )
CairoException::getCode ( void ) : mixed
CairoException::getFile ( void ) : string
CairoException::getLine ( void ) : int
CairoException::getMessage ( void ) : string
CairoException::getPrevious ( void ) : Throwable
CairoException::getTrace ( void ) : array
CairoException::getTraceAsString ( void ) : string
CairoException::__clone ( void ) : void
CairoException::__toString ( void ) : string
CairoFontFace::getType ( void ) : int
CairoFontFace::status ( void ) : int
CairoFontFace::__construct ( void )
CairoFontOptions::equal ( CairoFontOptions $other ) : bool
CairoFontOptions::getAntialias ( void ) : int
CairoFontOptions::getHintMetrics ( void ) : int
CairoFontOptions::getHintStyle ( void ) : int
CairoFontOptions::getSubpixelOrder ( void ) : int
CairoFontOptions::hash ( void ) : int
CairoFontOptions::merge ( CairoFontOptions $other ) : void
CairoFontOptions::setAntialias ( int $antialias ) : void
CairoFontOptions::setHintMetrics ( int $hint_metrics ) : void
CairoFontOptions::setHintStyle ( int $hint_style ) : void
CairoFontOptions::setSubpixelOrder ( int $subpixel_order ) : void
CairoFontOptions::status ( void ) : int
CairoFontOptions::__construct ( void )
CairoFormat::strideForWidth ( int $format , int $width ) : int
CairoGradientPattern::addColorStopRgb ( float $offset , float $red , float $green , float $blue ) : void
CairoGradientPattern::addColorStopRgba ( float $offset , float $red , float $green , float $blue , float $alpha ) : void
CairoGradientPattern::getColorStopCount ( void ) : int
CairoGradientPattern::getColorStopRgba ( int $index ) : array
CairoGradientPattern::getExtend ( void ) : int
CairoGradientPattern::getMatrix ( void ) : void
CairoGradientPattern::getType ( void ) : int
CairoGradientPattern::setExtend ( int $extend ) : void
CairoGradientPattern::setMatrix ( CairoMatrix $matrix ) : void
CairoGradientPattern::status ( void ) : int
CairoGradientPattern::__construct ( void )
CairoImageSurface::copyPage ( void ) : void
CairoImageSurface::createForData ( string $data , int $format , int $width , int $height ) : void
CairoImageSurface::createFromPng ( string $file ) : CairoImageSurface
CairoImageSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height ) : void
CairoImageSurface::finish ( void ) : void
CairoImageSurface::flush ( void ) : void
CairoImageSurface::getContent ( void ) : int
CairoImageSurface::getData ( void ) : string
CairoImageSurface::getDeviceOffset ( void ) : array
CairoImageSurface::getFontOptions ( void ) : void
CairoImageSurface::getFormat ( void ) : int
CairoImageSurface::getHeight ( void ) : int
CairoImageSurface::getStride ( void ) : int
CairoImageSurface::getType ( void ) : int
CairoImageSurface::getWidth ( void ) : int
CairoImageSurface::markDirty ( void ) : void
CairoImageSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height ) : void
CairoImageSurface::setDeviceOffset ( float $x , float $y ) : void
CairoImageSurface::setFallbackResolution ( float $x , float $y ) : void
CairoImageSurface::showPage ( void ) : void
CairoImageSurface::status ( void ) : int
CairoImageSurface::writeToPng ( string $file ) : void
CairoImageSurface::__construct ( int $format , int $width , int $height )
CairoLinearGradient::addColorStopRgb ( float $offset , float $red , float $green , float $blue ) : void
CairoLinearGradient::addColorStopRgba ( float $offset , float $red , float $green , float $blue , float $alpha ) : void
CairoLinearGradient::getColorStopCount ( void ) : int
CairoLinearGradient::getColorStopRgba ( int $index ) : array
CairoLinearGradient::getExtend ( void ) : int
CairoLinearGradient::getPoints ( void ) : array
CairoLinearGradient::setExtend ( int $extend ) : void
CairoLinearGradient::__construct ( float $x0 , float $y0 , float $x1 , float $y1 )
CairoMatrix::initIdentity ( void ) : void
CairoMatrix::initRotate ( float $radians ) : void
CairoMatrix::initScale ( float $sx , float $sy ) : void
CairoMatrix::initTranslate ( float $tx , float $ty ) : void
CairoMatrix::invert ( void ) : void
CairoMatrix::multiply ( CairoMatrix $matrix1 , CairoMatrix $matrix2 ) : CairoMatrix
CairoMatrix::rotate ( float $radians ) : void
CairoMatrix::scale ( float $sx , float $sy ) : void
CairoMatrix::transformDistance ( float $dx , float $dy ) : array
CairoMatrix::transformPoint ( float $dx , float $dy ) : array
CairoMatrix::translate ( float $tx , float $ty ) : void
CairoMatrix::__construct ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
CairoPattern::getMatrix ( void ) : void
CairoPattern::getType ( void ) : int
CairoPattern::setMatrix ( CairoMatrix $matrix ) : void
CairoPattern::status ( void ) : int
CairoPattern::__construct ( void )
CairoPdfSurface::copyPage ( void ) : void
CairoPdfSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height ) : void
CairoPdfSurface::finish ( void ) : void
CairoPdfSurface::flush ( void ) : void
CairoPdfSurface::getContent ( void ) : int
CairoPdfSurface::getDeviceOffset ( void ) : array
CairoPdfSurface::getFontOptions ( void ) : void
CairoPdfSurface::getType ( void ) : int
CairoPdfSurface::markDirty ( void ) : void
CairoPdfSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height ) : void
CairoPdfSurface::setDeviceOffset ( float $x , float $y ) : void
CairoPdfSurface::setFallbackResolution ( float $x , float $y ) : void
CairoPdfSurface::setSize ( float $width , float $height ) : void
CairoPdfSurface::showPage ( void ) : void
CairoPdfSurface::status ( void ) : int
CairoPdfSurface::writeToPng ( string $file ) : void
CairoPdfSurface::__construct ( string $file , float $width , float $height )
CairoPsSurface::copyPage ( void ) : void
CairoPsSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height ) : void
CairoPsSurface::dscBeginPageSetup ( void ) : void
CairoPsSurface::dscBeginSetup ( void ) : void
CairoPsSurface::dscComment ( string $comment ) : void
CairoPsSurface::finish ( void ) : void
CairoPsSurface::flush ( void ) : void
CairoPsSurface::getContent ( void ) : int
CairoPsSurface::getDeviceOffset ( void ) : array
CairoPsSurface::getEps ( void ) : bool
CairoPsSurface::getFontOptions ( void ) : void
CairoPsSurface::getLevels ( void ) : array
CairoPsSurface::getType ( void ) : int
CairoPsSurface::levelToString ( int $level ) : string
CairoPsSurface::markDirty ( void ) : void
CairoPsSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height ) : void
CairoPsSurface::restrictToLevel ( int $level ) : void
CairoPsSurface::setDeviceOffset ( float $x , float $y ) : void
CairoPsSurface::setEps ( bool $level ) : void
CairoPsSurface::setFallbackResolution ( float $x , float $y ) : void
CairoPsSurface::setSize ( float $width , float $height ) : void
CairoPsSurface::showPage ( void ) : void
CairoPsSurface::status ( void ) : int
CairoPsSurface::writeToPng ( string $file ) : void
CairoPsSurface::__construct ( string $file , float $width , float $height )
CairoRadialGradient::addColorStopRgb ( float $offset , float $red , float $green , float $blue ) : void
CairoRadialGradient::addColorStopRgba ( float $offset , float $red , float $green , float $blue , float $alpha ) : void
CairoRadialGradient::getCircles ( void ) : array
CairoRadialGradient::getColorStopCount ( void ) : int
CairoRadialGradient::getColorStopRgba ( int $index ) : array
CairoRadialGradient::getExtend ( void ) : int
CairoRadialGradient::setExtend ( int $extend ) : void
CairoRadialGradient::__construct ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 )
CairoScaledFont::extents ( void ) : array
CairoScaledFont::getCtm ( void ) : CairoMatrix
CairoScaledFont::getFontFace ( void ) : void
CairoScaledFont::getFontMatrix ( void ) : void
CairoScaledFont::getFontOptions ( void ) : void
CairoScaledFont::getScaleMatrix ( void ) : void
CairoScaledFont::getType ( void ) : int
CairoScaledFont::glyphExtents ( array $glyphs ) : array
CairoScaledFont::status ( void ) : int
CairoScaledFont::textExtents ( string $text ) : array
CairoScaledFont::__construct ( CairoFontFace $font_face , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $options )
CairoSolidPattern::getMatrix ( void ) : void
CairoSolidPattern::getRgba ( void ) : array
CairoSolidPattern::getType ( void ) : int
CairoSolidPattern::setMatrix ( CairoMatrix $matrix ) : void
CairoSolidPattern::status ( void ) : int
CairoSolidPattern::__construct ( float $red , float $green , float $blue [, float $alpha = 0 ] )
CairoSurface::copyPage ( void ) : void
CairoSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height ) : void
CairoSurface::finish ( void ) : void
CairoSurface::flush ( void ) : void
CairoSurface::getContent ( void ) : int
CairoSurface::getDeviceOffset ( void ) : array
CairoSurface::getFontOptions ( void ) : void
CairoSurface::getType ( void ) : int
CairoSurface::markDirty ( void ) : void
CairoSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height ) : void
CairoSurface::setDeviceOffset ( float $x , float $y ) : void
CairoSurface::setFallbackResolution ( float $x , float $y ) : void
CairoSurface::showPage ( void ) : void
CairoSurface::status ( void ) : int
CairoSurface::writeToPng ( string $file ) : void
CairoSurface::__construct ( void )
CairoSurfacePattern::getExtend ( void ) : int
CairoSurfacePattern::getFilter ( void ) : int
CairoSurfacePattern::getMatrix ( void ) : void
CairoSurfacePattern::getSurface ( void ) : void
CairoSurfacePattern::getType ( void ) : int
CairoSurfacePattern::setExtend ( int $extend ) : void
CairoSurfacePattern::setFilter ( int $filter ) : void
CairoSurfacePattern::setMatrix ( CairoMatrix $matrix ) : void
CairoSurfacePattern::status ( void ) : int
CairoSurfacePattern::__construct ( CairoSurface $surface )
CairoSvgSurface::copyPage ( void ) : void
CairoSvgSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height ) : void
CairoSvgSurface::finish ( void ) : void
CairoSvgSurface::flush ( void ) : void
CairoSvgSurface::getContent ( void ) : int
CairoSvgSurface::getDeviceOffset ( void ) : array
CairoSvgSurface::getFontOptions ( void ) : void
CairoSvgSurface::getType ( void ) : int
CairoSvgSurface::getVersions ( void ) : array
CairoSvgSurface::markDirty ( void ) : void
CairoSvgSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height ) : void
CairoSvgSurface::restrictToVersion ( int $version ) : void
CairoSvgSurface::setDeviceOffset ( float $x , float $y ) : void
CairoSvgSurface::setFallbackResolution ( float $x , float $y ) : void
CairoSvgSurface::showPage ( void ) : void
CairoSvgSurface::status ( void ) : int
CairoSvgSurface::versionToString ( int $version ) : string
CairoSvgSurface::writeToPng ( string $file ) : void
CairoSvgSurface::__construct ( string $file , float $width , float $height )
CallbackFilterIterator::accept ( void ) : bool
CallbackFilterIterator::current ( void ) : mixed
CallbackFilterIterator::getInnerIterator ( void ) : Iterator
CallbackFilterIterator::key ( void ) : mixed
CallbackFilterIterator::next ( void ) : void
CallbackFilterIterator::rewind ( void ) : void
CallbackFilterIterator::valid ( void ) : bool
CallbackFilterIterator::__construct ( Iterator $iterator , callable $callback )
chdb::get ( string $key ) : string
chdb::__construct ( string $pathname )
Closure::bind ( Closure $closure , object $newthis [, mixed $newscope = "static" ] ) : Closure
Closure::bindTo ( object $newthis [, mixed $newscope = "static" ] ) : Closure
Closure::call ( object $newthis [, mixed $... ] ) : mixed
Closure::fromCallable ( callable $callable ) : Closure
Closure::__construct ( void )
Collator::asort ( array &$arr [, int $sort_flag ] ) : bool
Collator::compare ( string $str1 , string $str2 ) : int
Collator::create ( string $locale ) : Collator
Collator::getAttribute ( int $attr ) : int
Collator::getErrorCode ( void ) : int
Collator::getErrorMessage ( void ) : string
Collator::getLocale ( int $type ) : string
Collator::getSortKey ( string $str ) : string
Collator::getStrength ( void ) : int
Collator::setAttribute ( int $attr , int $val ) : bool
Collator::setStrength ( int $strength ) : bool
Collator::sort ( array &$arr [, int $sort_flag ] ) : bool
Collator::sortWithSortKeys ( array &$arr ) : bool
Collator::__construct ( string $locale )
Collectable::isGarbage ( void ) : bool
Collectable::setGarbage ( void ) : void
CommonMark\CQL::__construct ( string $query )
CommonMark\CQL::__invoke ( \CommonMark\Node $root , callable $handler )
CommonMark\Interfaces\IVisitable::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Interfaces\IVisitor::enter ( IVisitable $visitable ) : int
CommonMark\Interfaces\IVisitor::leave ( IVisitable $visitable ) : int
CommonMark\Node::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node::unlink ( void ) : void
CommonMark\Node\BlockQuote::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\BlockQuote::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\BlockQuote::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\BlockQuote::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\BlockQuote::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\BlockQuote::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\BlockQuote::unlink ( void ) : void
CommonMark\Node\BulletList::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\BulletList::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\BulletList::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\BulletList::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\BulletList::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\BulletList::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\BulletList::unlink ( void ) : void
CommonMark\Node\BulletList::__construct ( void )
CommonMark\Node\Code::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Code::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Code::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Code::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Code::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Code::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Code::unlink ( void ) : void
CommonMark\Node\Code::__construct ( void )
CommonMark\Node\CodeBlock::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\CodeBlock::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CodeBlock::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CodeBlock::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CodeBlock::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CodeBlock::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\CodeBlock::unlink ( void ) : void
CommonMark\Node\CodeBlock::__construct ( void )
CommonMark\Node\CustomBlock::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\CustomBlock::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CustomBlock::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CustomBlock::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CustomBlock::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CustomBlock::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\CustomBlock::unlink ( void ) : void
CommonMark\Node\CustomInline::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\CustomInline::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CustomInline::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CustomInline::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\CustomInline::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\CustomInline::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\CustomInline::unlink ( void ) : void
CommonMark\Node\Document::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Document::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Document::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Document::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Document::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Document::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Document::unlink ( void ) : void
CommonMark\Node\Heading::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Heading::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Heading::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Heading::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Heading::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Heading::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Heading::unlink ( void ) : void
CommonMark\Node\Heading::__construct ( void )
CommonMark\Node\HTMLBlock::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\HTMLBlock::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\HTMLBlock::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\HTMLBlock::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\HTMLBlock::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\HTMLBlock::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\HTMLBlock::unlink ( void ) : void
CommonMark\Node\HTMLBlock::__construct ( void )
CommonMark\Node\HTMLInline::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\HTMLInline::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\HTMLInline::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\HTMLInline::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\HTMLInline::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\HTMLInline::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\HTMLInline::unlink ( void ) : void
CommonMark\Node\HTMLInline::__construct ( void )
CommonMark\Node\Image::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Image::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Image::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Image::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Image::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Image::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Image::unlink ( void ) : void
CommonMark\Node\Image::__construct ( void )
CommonMark\Node\Item::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Item::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Item::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Item::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Item::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Item::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Item::unlink ( void ) : void
CommonMark\Node\LineBreak::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\LineBreak::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\LineBreak::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\LineBreak::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\LineBreak::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\LineBreak::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\LineBreak::unlink ( void ) : void
CommonMark\Node\Link::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Link::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Link::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Link::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Link::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Link::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Link::unlink ( void ) : void
CommonMark\Node\Link::__construct ( void )
CommonMark\Node\OrderedList::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\OrderedList::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\OrderedList::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\OrderedList::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\OrderedList::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\OrderedList::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\OrderedList::unlink ( void ) : void
CommonMark\Node\OrderedList::__construct ( void )
CommonMark\Node\Paragraph::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Paragraph::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Paragraph::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Paragraph::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Paragraph::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Paragraph::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Paragraph::unlink ( void ) : void
CommonMark\Node\SoftBreak::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\SoftBreak::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\SoftBreak::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\SoftBreak::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\SoftBreak::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\SoftBreak::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\SoftBreak::unlink ( void ) : void
CommonMark\Node\Text::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Text::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Text::unlink ( void ) : void
CommonMark\Node\Text::__construct ( void )
CommonMark\Node\Text\Emphasis::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Text\Emphasis::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text\Emphasis::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text\Emphasis::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text\Emphasis::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text\Emphasis::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Text\Emphasis::unlink ( void ) : void
CommonMark\Node\Text\Strong::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\Text\Strong::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text\Strong::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text\Strong::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\Text\Strong::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\Text\Strong::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\Text\Strong::unlink ( void ) : void
CommonMark\Node\ThematicBreak::accept ( CommonMark\Interfaces\IVisitor $visitor ) : void
CommonMark\Node\ThematicBreak::appendChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\ThematicBreak::insertAfter ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\ThematicBreak::insertBefore ( CommonMark\Node $sibling ) : CommonMark\Node
CommonMark\Node\ThematicBreak::prependChild ( CommonMark\Node $child ) : CommonMark\Node
CommonMark\Node\ThematicBreak::replace ( CommonMark\Node $target ) : CommonMark\Node
CommonMark\Node\ThematicBreak::unlink ( void ) : void
CommonMark\Parser::finish ( void ) : CommonMark\Node
CommonMark\Parser::parse ( string $buffer ) : void
CommonMark\Parser::__construct ([ int $options ] )
CompileError::getCode ( void ) : mixed
CompileError::getFile ( void ) : string
CompileError::getLine ( void ) : int
CompileError::getMessage ( void ) : string
CompileError::getPrevious ( void ) : Throwable
CompileError::getTrace ( void ) : array
CompileError::getTraceAsString ( void ) : string
CompileError::__clone ( void ) : void
CompileError::__toString ( void ) : string
Componere\Abstract\Definition::addInterface ( string $interface ) : Definition
Componere\Abstract\Definition::addMethod ( string $name , \Componere\Method $method ) : Definition
Componere\Abstract\Definition::addTrait ( string $trait ) : Definition
Componere\Abstract\Definition::getReflector ( void ) : \ReflectionClass
Componere\Definition::addConstant ( string $name , \Componere\Value $value ) : Definition
Componere\Definition::addInterface ( string $interface ) : Definition
Componere\Definition::addMethod ( string $name , \Componere\Method $method ) : Definition
Componere\Definition::addProperty ( string $name , \Componere\Value $value ) : Definition
Componere\Definition::addTrait ( string $trait ) : Definition
Componere\Definition::getClosure ( string $name ) : \Closure
Componere\Definition::getClosures ( void ) : array
Componere\Definition::getReflector ( void ) : \ReflectionClass
Componere\Definition::isRegistered ( void ) : bool
Componere\Definition::register ( void ) : void
Componere\Definition::__construct ( string $name )
Componere\Method::getReflector ( void ) : \ReflectionMethod
Componere\Method::setPrivate ( void ) : Method
Componere\Method::setProtected ( void ) : Method
Componere\Method::setStatic ( void ) : Method
Componere\Method::__construct ( \Closure $closure )
Componere\Patch::addInterface ( string $interface ) : Definition
Componere\Patch::addMethod ( string $name , \Componere\Method $method ) : Definition
Componere\Patch::addTrait ( string $trait ) : Definition
Componere\Patch::apply ( void ) : void
Componere\Patch::derive ( object $instance ) : Patch
Componere\Patch::getClosure ( string $name ) : \Closure
Componere\Patch::getClosures ( void ) : array
Componere\Patch::getReflector ( void ) : \ReflectionClass
Componere\Patch::isApplied ( void ) : bool
Componere\Patch::revert ( void ) : void
Componere\Patch::__construct ( object $instance )
Componere\Value::hasDefault ( void ) : bool
Componere\Value::isPrivate ( void ) : bool
Componere\Value::isProtected ( void ) : bool
Componere\Value::isStatic ( void ) : bool
Componere\Value::setPrivate ( void ) : Value
Componere\Value::setProtected ( void ) : Value
Componere\Value::setStatic ( void ) : Value
Componere\Value::__construct ([ $default ] )
Cond::broadcast ( int $condition ) : bool
Cond::create ( void ) : int
Cond::destroy ( int $condition ) : bool
Cond::signal ( int $condition ) : bool
Cond::wait ( int $condition , int $mutex [, int $timeout ] ) : bool
Countable::count ( void ) : int
CURLFile::getFilename ( void ) : string
CURLFile::getMimeType ( void ) : string
CURLFile::getPostFilename ( void ) : string
CURLFile::setMimeType ( string $mime ) : void
CURLFile::setPostFilename ( string $postname ) : void
CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )
CURLFile::__wakeup ( void ) : void
DateInterval::createFromDateString ( string $time ) : DateInterval
DateInterval::format ( string $format ) : string
DateInterval::__construct ( string $interval_spec )
DatePeriod::getDateInterval ( void ) : DateInterval
DatePeriod::getEndDate ( void ) : DateTimeInterface
DatePeriod::getStartDate ( void ) : DateTimeInterface
DatePeriod::__construct ( DateTimeInterface $start , DateInterval $interval , int $recurrences [, int $options ] )
DateTime::add ( DateInterval $interval ) : DateTime
DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] ) : DateTime
DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] ) : DateInterval
DateTime::format ( string $format ) : string
DateTime::getLastErrors ( void ) : array
DateTime::getOffset ( void ) : int
DateTime::getTimestamp ( void ) : int
DateTime::getTimezone ( void ) : DateTimeZone
DateTime::modify ( string $modify ) : DateTime
DateTime::setDate ( int $year , int $month , int $day ) : DateTime
DateTime::setISODate ( int $year , int $week [, int $day = 1 ] ) : DateTime
DateTime::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] ) : DateTime
DateTime::setTimestamp ( int $unixtimestamp ) : DateTime
DateTime::setTimezone ( DateTimeZone $timezone ) : DateTime
DateTime::sub ( DateInterval $interval ) : DateTime
DateTime::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
DateTime::__set_state ( array $array ) : DateTime
DateTime::__wakeup ( void )
DateTimeImmutable::add ( DateInterval $interval ) : DateTimeImmutable
DateTimeImmutable::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] ) : DateTimeImmutable
DateTimeImmutable::createFromMutable ( DateTime $datetime ) : DateTimeImmutable
DateTimeImmutable::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] ) : DateInterval
DateTimeImmutable::format ( string $format ) : string
DateTimeImmutable::getLastErrors ( void ) : array
DateTimeImmutable::getOffset ( void ) : int
DateTimeImmutable::getTimestamp ( void ) : int
DateTimeImmutable::getTimezone ( void ) : DateTimeZone
DateTimeImmutable::modify ( string $modify ) : DateTimeImmutable
DateTimeImmutable::setDate ( int $year , int $month , int $day ) : DateTimeImmutable
DateTimeImmutable::setISODate ( int $year , int $week [, int $day = 1 ] ) : DateTimeImmutable
DateTimeImmutable::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] ) : DateTimeImmutable
DateTimeImmutable::setTimestamp ( int $unixtimestamp ) : DateTimeImmutable
DateTimeImmutable::setTimezone ( DateTimeZone $timezone ) : DateTimeImmutable
DateTimeImmutable::sub ( DateInterval $interval ) : DateTimeImmutable
DateTimeImmutable::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
DateTimeImmutable::__set_state ( array $array ) : DateTimeImmutable
DateTimeImmutable::__wakeup ( void )
DateTimeInterface::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] ) : DateInterval
DateTimeInterface::format ( string $format ) : string
DateTimeInterface::getOffset ( void ) : int
DateTimeInterface::getTimestamp ( void ) : int
DateTimeInterface::getTimezone ( void ) : DateTimeZone
DateTimeInterface::__wakeup ( void )
DateTimeZone::getLocation ( void ) : array
DateTimeZone::getName ( void ) : string
DateTimeZone::getOffset ( DateTimeInterface $datetime ) : int
DateTimeZone::getTransitions ([ int $timestamp_begin = PHP_INT_MIN [, int $timestamp_end = PHP_INT_MAX ]] ) : array
DateTimeZone::listAbbreviations ( void ) : array
DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] ) : array
DateTimeZone::__construct ( string $timezone )
Directory::close ([ resource $dir_handle ] ) : void
Directory::read ([ resource $dir_handle ] ) : string
Directory::rewind ([ resource $dir_handle ] ) : void
DirectoryIterator::current ( void ) : DirectoryIterator
DirectoryIterator::getATime ( void ) : int
DirectoryIterator::getBasename ([ string $suffix ] ) : string
DirectoryIterator::getCTime ( void ) : int
DirectoryIterator::getExtension ( void ) : string
DirectoryIterator::getFilename ( void ) : string
DirectoryIterator::getGroup ( void ) : int
DirectoryIterator::getInode ( void ) : int
DirectoryIterator::getMTime ( void ) : int
DirectoryIterator::getOwner ( void ) : int
DirectoryIterator::getPath ( void ) : string
DirectoryIterator::getPathname ( void ) : string
DirectoryIterator::getPerms ( void ) : int
DirectoryIterator::getSize ( void ) : int
DirectoryIterator::getType ( void ) : string
DirectoryIterator::isDir ( void ) : bool
DirectoryIterator::isDot ( void ) : bool
DirectoryIterator::isExecutable ( void ) : bool
DirectoryIterator::isFile ( void ) : bool
DirectoryIterator::isLink ( void ) : bool
DirectoryIterator::isReadable ( void ) : bool
DirectoryIterator::isWritable ( void ) : bool
DirectoryIterator::key ( void ) : string
DirectoryIterator::next ( void ) : void
DirectoryIterator::rewind ( void ) : void
DirectoryIterator::seek ( int $position ) : void
DirectoryIterator::valid ( void ) : bool
DirectoryIterator::__construct ( string $path )
DirectoryIterator::__toString ( void ) : string
DivisionByZeroError::getCode ( void ) : mixed
DivisionByZeroError::getFile ( void ) : string
DivisionByZeroError::getLine ( void ) : int
DivisionByZeroError::getMessage ( void ) : string
DivisionByZeroError::getPrevious ( void ) : Throwable
DivisionByZeroError::getTrace ( void ) : array
DivisionByZeroError::getTraceAsString ( void ) : string
DivisionByZeroError::__clone ( void ) : void
DivisionByZeroError::__toString ( void ) : string
DomainException::getCode ( void ) : mixed
DomainException::getFile ( void ) : string
DomainException::getLine ( void ) : int
DomainException::getMessage ( void ) : string
DomainException::getPrevious ( void ) : Throwable
DomainException::getTrace ( void ) : array
DomainException::getTraceAsString ( void ) : string
DomainException::__clone ( void ) : void
DomainException::__toString ( void ) : string
DOMAttr::appendChild ( DOMNode $newnode ) : DOMNode
DOMAttr::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMAttr::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMAttr::cloneNode ([ bool $deep ] ) : DOMNode
DOMAttr::getLineNo ( void ) : int
DOMAttr::getNodePath ( void ) : string
DOMAttr::hasAttributes ( void ) : bool
DOMAttr::hasChildNodes ( void ) : bool
DOMAttr::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMAttr::isDefaultNamespace ( string $namespaceURI ) : bool
DOMAttr::isId ( void ) : bool
DOMAttr::isSameNode ( DOMNode $node ) : bool
DOMAttr::isSupported ( string $feature , string $version ) : bool
DOMAttr::lookupNamespaceUri ( string $prefix ) : string
DOMAttr::lookupPrefix ( string $namespaceURI ) : string
DOMAttr::normalize ( void ) : void
DOMAttr::removeChild ( DOMNode $oldnode ) : DOMNode
DOMAttr::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMAttr::__construct ( string $name [, string $value ] )
DOMCdataSection::appendChild ( DOMNode $newnode ) : DOMNode
DOMCdataSection::appendData ( string $data ) : void
DOMCdataSection::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMCdataSection::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMCdataSection::cloneNode ([ bool $deep ] ) : DOMNode
DOMCdataSection::deleteData ( int $offset , int $count ) : void
DOMCdataSection::getLineNo ( void ) : int
DOMCdataSection::getNodePath ( void ) : string
DOMCdataSection::hasAttributes ( void ) : bool
DOMCdataSection::hasChildNodes ( void ) : bool
DOMCdataSection::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMCdataSection::insertData ( int $offset , string $data ) : void
DOMCdataSection::isDefaultNamespace ( string $namespaceURI ) : bool
DOMCdataSection::isElementContentWhitespace ( void ) : bool
DOMCdataSection::isSameNode ( DOMNode $node ) : bool
DOMCdataSection::isSupported ( string $feature , string $version ) : bool
DOMCdataSection::isWhitespaceInElementContent ( void ) : bool
DOMCdataSection::lookupNamespaceUri ( string $prefix ) : string
DOMCdataSection::lookupPrefix ( string $namespaceURI ) : string
DOMCdataSection::normalize ( void ) : void
DOMCdataSection::removeChild ( DOMNode $oldnode ) : DOMNode
DOMCdataSection::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMCdataSection::replaceData ( int $offset , int $count , string $data ) : void
DOMCdataSection::splitText ( int $offset ) : DOMText
DOMCdataSection::substringData ( int $offset , int $count ) : string
DOMCdataSection::__construct ( string $value )
DOMCharacterData::appendChild ( DOMNode $newnode ) : DOMNode
DOMCharacterData::appendData ( string $data ) : void
DOMCharacterData::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMCharacterData::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMCharacterData::cloneNode ([ bool $deep ] ) : DOMNode
DOMCharacterData::deleteData ( int $offset , int $count ) : void
DOMCharacterData::getLineNo ( void ) : int
DOMCharacterData::getNodePath ( void ) : string
DOMCharacterData::hasAttributes ( void ) : bool
DOMCharacterData::hasChildNodes ( void ) : bool
DOMCharacterData::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMCharacterData::insertData ( int $offset , string $data ) : void
DOMCharacterData::isDefaultNamespace ( string $namespaceURI ) : bool
DOMCharacterData::isSameNode ( DOMNode $node ) : bool
DOMCharacterData::isSupported ( string $feature , string $version ) : bool
DOMCharacterData::lookupNamespaceUri ( string $prefix ) : string
DOMCharacterData::lookupPrefix ( string $namespaceURI ) : string
DOMCharacterData::normalize ( void ) : void
DOMCharacterData::removeChild ( DOMNode $oldnode ) : DOMNode
DOMCharacterData::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMCharacterData::replaceData ( int $offset , int $count , string $data ) : void
DOMCharacterData::substringData ( int $offset , int $count ) : string
DOMComment::appendChild ( DOMNode $newnode ) : DOMNode
DOMComment::appendData ( string $data ) : void
DOMComment::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMComment::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMComment::cloneNode ([ bool $deep ] ) : DOMNode
DOMComment::deleteData ( int $offset , int $count ) : void
DOMComment::getLineNo ( void ) : int
DOMComment::getNodePath ( void ) : string
DOMComment::hasAttributes ( void ) : bool
DOMComment::hasChildNodes ( void ) : bool
DOMComment::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMComment::insertData ( int $offset , string $data ) : void
DOMComment::isDefaultNamespace ( string $namespaceURI ) : bool
DOMComment::isSameNode ( DOMNode $node ) : bool
DOMComment::isSupported ( string $feature , string $version ) : bool
DOMComment::lookupNamespaceUri ( string $prefix ) : string
DOMComment::lookupPrefix ( string $namespaceURI ) : string
DOMComment::normalize ( void ) : void
DOMComment::removeChild ( DOMNode $oldnode ) : DOMNode
DOMComment::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMComment::replaceData ( int $offset , int $count , string $data ) : void
DOMComment::substringData ( int $offset , int $count ) : string
DOMComment::__construct ([ string $value ] )
DOMDocument::appendChild ( DOMNode $newnode ) : DOMNode
DOMDocument::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMDocument::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMDocument::cloneNode ([ bool $deep ] ) : DOMNode
DOMDocument::createAttribute ( string $name ) : DOMAttr
DOMDocument::createAttributeNS ( string $namespaceURI , string $qualifiedName ) : DOMAttr
DOMDocument::createCDATASection ( string $data ) : DOMCDATASection
DOMDocument::createComment ( string $data ) : DOMComment
DOMDocument::createDocumentFragment ( void ) : DOMDocumentFragment
DOMDocument::createElement ( string $name [, string $value ] ) : DOMElement
DOMDocument::createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] ) : DOMElement
DOMDocument::createEntityReference ( string $name ) : DOMEntityReference
DOMDocument::createProcessingInstruction ( string $target [, string $data ] ) : DOMProcessingInstruction
DOMDocument::createTextNode ( string $content ) : DOMText
DOMDocument::getElementById ( string $elementId ) : DOMElement
DOMDocument::getElementsByTagName ( string $name ) : DOMNodeList
DOMDocument::getElementsByTagNameNS ( string $namespaceURI , string $localName ) : DOMNodeList
DOMDocument::getLineNo ( void ) : int
DOMDocument::getNodePath ( void ) : string
DOMDocument::hasAttributes ( void ) : bool
DOMDocument::hasChildNodes ( void ) : bool
DOMDocument::importNode ( DOMNode $importedNode [, bool $deep = FALSE ] ) : DOMNode
DOMDocument::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMDocument::isDefaultNamespace ( string $namespaceURI ) : bool
DOMDocument::isSameNode ( DOMNode $node ) : bool
DOMDocument::isSupported ( string $feature , string $version ) : bool
DOMDocument::load ( string $filename [, int $options = 0 ] ) : mixed
DOMDocument::loadHTML ( string $source [, int $options = 0 ] ) : bool
DOMDocument::loadHTMLFile ( string $filename [, int $options = 0 ] ) : bool
DOMDocument::loadXML ( string $source [, int $options = 0 ] ) : mixed
DOMDocument::lookupNamespaceUri ( string $prefix ) : string
DOMDocument::lookupPrefix ( string $namespaceURI ) : string
DOMDocument::normalize ( void ) : void
DOMDocument::normalizeDocument ( void ) : void
DOMDocument::registerNodeClass ( string $baseclass , string $extendedclass ) : bool
DOMDocument::relaxNGValidate ( string $filename ) : bool
DOMDocument::relaxNGValidateSource ( string $source ) : bool
DOMDocument::removeChild ( DOMNode $oldnode ) : DOMNode
DOMDocument::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMDocument::save ( string $filename [, int $options = 0 ] ) : int
DOMDocument::saveHTML ([ DOMNode $node = NULL ] ) : string
DOMDocument::saveHTMLFile ( string $filename ) : int
DOMDocument::saveXML ([ DOMNode $node [, int $options = 0 ]] ) : string
DOMDocument::schemaValidate ( string $filename [, int $flags = 0 ] ) : bool
DOMDocument::schemaValidateSource ( string $source [, int $flags ] ) : bool
DOMDocument::validate ( void ) : bool
DOMDocument::xinclude ([ int $options = 0 ] ) : int
DOMDocument::__construct ([ string $version [, string $encoding ]] )
DOMDocumentFragment::appendChild ( DOMNode $newnode ) : DOMNode
DOMDocumentFragment::appendXML ( string $data ) : bool
DOMDocumentFragment::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMDocumentFragment::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMDocumentFragment::cloneNode ([ bool $deep ] ) : DOMNode
DOMDocumentFragment::getLineNo ( void ) : int
DOMDocumentFragment::getNodePath ( void ) : string
DOMDocumentFragment::hasAttributes ( void ) : bool
DOMDocumentFragment::hasChildNodes ( void ) : bool
DOMDocumentFragment::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMDocumentFragment::isDefaultNamespace ( string $namespaceURI ) : bool
DOMDocumentFragment::isSameNode ( DOMNode $node ) : bool
DOMDocumentFragment::isSupported ( string $feature , string $version ) : bool
DOMDocumentFragment::lookupNamespaceUri ( string $prefix ) : string
DOMDocumentFragment::lookupPrefix ( string $namespaceURI ) : string
DOMDocumentFragment::normalize ( void ) : void
DOMDocumentFragment::removeChild ( DOMNode $oldnode ) : DOMNode
DOMDocumentFragment::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMDocumentType::appendChild ( DOMNode $newnode ) : DOMNode
DOMDocumentType::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMDocumentType::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMDocumentType::cloneNode ([ bool $deep ] ) : DOMNode
DOMDocumentType::getLineNo ( void ) : int
DOMDocumentType::getNodePath ( void ) : string
DOMDocumentType::hasAttributes ( void ) : bool
DOMDocumentType::hasChildNodes ( void ) : bool
DOMDocumentType::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMDocumentType::isDefaultNamespace ( string $namespaceURI ) : bool
DOMDocumentType::isSameNode ( DOMNode $node ) : bool
DOMDocumentType::isSupported ( string $feature , string $version ) : bool
DOMDocumentType::lookupNamespaceUri ( string $prefix ) : string
DOMDocumentType::lookupPrefix ( string $namespaceURI ) : string
DOMDocumentType::normalize ( void ) : void
DOMDocumentType::removeChild ( DOMNode $oldnode ) : DOMNode
DOMDocumentType::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMElement::appendChild ( DOMNode $newnode ) : DOMNode
DOMElement::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMElement::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMElement::cloneNode ([ bool $deep ] ) : DOMNode
DOMElement::getAttribute ( string $name ) : string
DOMElement::getAttributeNode ( string $name ) : DOMAttr
DOMElement::getAttributeNodeNS ( string $namespaceURI , string $localName ) : DOMAttr
DOMElement::getAttributeNS ( string $namespaceURI , string $localName ) : string
DOMElement::getElementsByTagName ( string $name ) : DOMNodeList
DOMElement::getElementsByTagNameNS ( string $namespaceURI , string $localName ) : DOMNodeList
DOMElement::getLineNo ( void ) : int
DOMElement::getNodePath ( void ) : string
DOMElement::hasAttribute ( string $name ) : bool
DOMElement::hasAttributeNS ( string $namespaceURI , string $localName ) : bool
DOMElement::hasAttributes ( void ) : bool
DOMElement::hasChildNodes ( void ) : bool
DOMElement::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMElement::isDefaultNamespace ( string $namespaceURI ) : bool
DOMElement::isSameNode ( DOMNode $node ) : bool
DOMElement::isSupported ( string $feature , string $version ) : bool
DOMElement::lookupNamespaceUri ( string $prefix ) : string
DOMElement::lookupPrefix ( string $namespaceURI ) : string
DOMElement::normalize ( void ) : void
DOMElement::removeAttribute ( string $name ) : bool
DOMElement::removeAttributeNode ( DOMAttr $oldnode ) : bool
DOMElement::removeAttributeNS ( string $namespaceURI , string $localName ) : bool
DOMElement::removeChild ( DOMNode $oldnode ) : DOMNode
DOMElement::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMElement::setAttribute ( string $name , string $value ) : DOMAttr
DOMElement::setAttributeNode ( DOMAttr $attr ) : DOMAttr
DOMElement::setAttributeNodeNS ( DOMAttr $attr ) : DOMAttr
DOMElement::setAttributeNS ( string $namespaceURI , string $qualifiedName , string $value ) : void
DOMElement::setIdAttribute ( string $name , bool $isId ) : void
DOMElement::setIdAttributeNode ( DOMAttr $attr , bool $isId ) : void
DOMElement::setIdAttributeNS ( string $namespaceURI , string $localName , bool $isId ) : void
DOMElement::__construct ( string $name [, string $value [, string $namespaceURI ]] )
DOMEntity::appendChild ( DOMNode $newnode ) : DOMNode
DOMEntity::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMEntity::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMEntity::cloneNode ([ bool $deep ] ) : DOMNode
DOMEntity::getLineNo ( void ) : int
DOMEntity::getNodePath ( void ) : string
DOMEntity::hasAttributes ( void ) : bool
DOMEntity::hasChildNodes ( void ) : bool
DOMEntity::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMEntity::isDefaultNamespace ( string $namespaceURI ) : bool
DOMEntity::isSameNode ( DOMNode $node ) : bool
DOMEntity::isSupported ( string $feature , string $version ) : bool
DOMEntity::lookupNamespaceUri ( string $prefix ) : string
DOMEntity::lookupPrefix ( string $namespaceURI ) : string
DOMEntity::normalize ( void ) : void
DOMEntity::removeChild ( DOMNode $oldnode ) : DOMNode
DOMEntity::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMEntityReference::appendChild ( DOMNode $newnode ) : DOMNode
DOMEntityReference::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMEntityReference::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMEntityReference::cloneNode ([ bool $deep ] ) : DOMNode
DOMEntityReference::getLineNo ( void ) : int
DOMEntityReference::getNodePath ( void ) : string
DOMEntityReference::hasAttributes ( void ) : bool
DOMEntityReference::hasChildNodes ( void ) : bool
DOMEntityReference::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMEntityReference::isDefaultNamespace ( string $namespaceURI ) : bool
DOMEntityReference::isSameNode ( DOMNode $node ) : bool
DOMEntityReference::isSupported ( string $feature , string $version ) : bool
DOMEntityReference::lookupNamespaceUri ( string $prefix ) : string
DOMEntityReference::lookupPrefix ( string $namespaceURI ) : string
DOMEntityReference::normalize ( void ) : void
DOMEntityReference::removeChild ( DOMNode $oldnode ) : DOMNode
DOMEntityReference::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMEntityReference::__construct ( string $name )
DOMException::getCode ( void ) : mixed
DOMException::getFile ( void ) : string
DOMException::getLine ( void ) : int
DOMException::getMessage ( void ) : string
DOMException::getPrevious ( void ) : Throwable
DOMException::getTrace ( void ) : array
DOMException::getTraceAsString ( void ) : string
DOMException::__clone ( void ) : void
DOMException::__toString ( void ) : string
DOMImplementation::createDocument ([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]] ) : DOMDocument
DOMImplementation::createDocumentType ([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]] ) : DOMDocumentType
DOMImplementation::hasFeature ( string $feature , string $version ) : bool
DOMImplementation::__construct ( void )
DOMNamedNodeMap::count ( void ) : int
DOMNamedNodeMap::getNamedItem ( string $name ) : DOMNode
DOMNamedNodeMap::getNamedItemNS ( string $namespaceURI , string $localName ) : DOMNode
DOMNamedNodeMap::item ( int $index ) : DOMNode
DOMNode::appendChild ( DOMNode $newnode ) : DOMNode
DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMNode::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMNode::cloneNode ([ bool $deep ] ) : DOMNode
DOMNode::getLineNo ( void ) : int
DOMNode::getNodePath ( void ) : string
DOMNode::hasAttributes ( void ) : bool
DOMNode::hasChildNodes ( void ) : bool
DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMNode::isDefaultNamespace ( string $namespaceURI ) : bool
DOMNode::isSameNode ( DOMNode $node ) : bool
DOMNode::isSupported ( string $feature , string $version ) : bool
DOMNode::lookupNamespaceUri ( string $prefix ) : string
DOMNode::lookupPrefix ( string $namespaceURI ) : string
DOMNode::normalize ( void ) : void
DOMNode::removeChild ( DOMNode $oldnode ) : DOMNode
DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMNodeList::count ( void ) : int
DOMNodeList::item ( int $index ) : DOMNode
DOMNotation::appendChild ( DOMNode $newnode ) : DOMNode
DOMNotation::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMNotation::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMNotation::cloneNode ([ bool $deep ] ) : DOMNode
DOMNotation::getLineNo ( void ) : int
DOMNotation::getNodePath ( void ) : string
DOMNotation::hasAttributes ( void ) : bool
DOMNotation::hasChildNodes ( void ) : bool
DOMNotation::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMNotation::isDefaultNamespace ( string $namespaceURI ) : bool
DOMNotation::isSameNode ( DOMNode $node ) : bool
DOMNotation::isSupported ( string $feature , string $version ) : bool
DOMNotation::lookupNamespaceUri ( string $prefix ) : string
DOMNotation::lookupPrefix ( string $namespaceURI ) : string
DOMNotation::normalize ( void ) : void
DOMNotation::removeChild ( DOMNode $oldnode ) : DOMNode
DOMNotation::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMProcessingInstruction::appendChild ( DOMNode $newnode ) : DOMNode
DOMProcessingInstruction::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMProcessingInstruction::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMProcessingInstruction::cloneNode ([ bool $deep ] ) : DOMNode
DOMProcessingInstruction::getLineNo ( void ) : int
DOMProcessingInstruction::getNodePath ( void ) : string
DOMProcessingInstruction::hasAttributes ( void ) : bool
DOMProcessingInstruction::hasChildNodes ( void ) : bool
DOMProcessingInstruction::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMProcessingInstruction::isDefaultNamespace ( string $namespaceURI ) : bool
DOMProcessingInstruction::isSameNode ( DOMNode $node ) : bool
DOMProcessingInstruction::isSupported ( string $feature , string $version ) : bool
DOMProcessingInstruction::lookupNamespaceUri ( string $prefix ) : string
DOMProcessingInstruction::lookupPrefix ( string $namespaceURI ) : string
DOMProcessingInstruction::normalize ( void ) : void
DOMProcessingInstruction::removeChild ( DOMNode $oldnode ) : DOMNode
DOMProcessingInstruction::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMProcessingInstruction::__construct ( string $name [, string $value ] )
DOMText::appendChild ( DOMNode $newnode ) : DOMNode
DOMText::appendData ( string $data ) : void
DOMText::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) : string
DOMText::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] ) : int
DOMText::cloneNode ([ bool $deep ] ) : DOMNode
DOMText::deleteData ( int $offset , int $count ) : void
DOMText::getLineNo ( void ) : int
DOMText::getNodePath ( void ) : string
DOMText::hasAttributes ( void ) : bool
DOMText::hasChildNodes ( void ) : bool
DOMText::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) : DOMNode
DOMText::insertData ( int $offset , string $data ) : void
DOMText::isDefaultNamespace ( string $namespaceURI ) : bool
DOMText::isElementContentWhitespace ( void ) : bool
DOMText::isSameNode ( DOMNode $node ) : bool
DOMText::isSupported ( string $feature , string $version ) : bool
DOMText::isWhitespaceInElementContent ( void ) : bool
DOMText::lookupNamespaceUri ( string $prefix ) : string
DOMText::lookupPrefix ( string $namespaceURI ) : string
DOMText::normalize ( void ) : void
DOMText::removeChild ( DOMNode $oldnode ) : DOMNode
DOMText::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) : DOMNode
DOMText::replaceData ( int $offset , int $count , string $data ) : void
DOMText::splitText ( int $offset ) : DOMText
DOMText::substringData ( int $offset , int $count ) : string
DOMText::__construct ([ string $value ] )
DOMXPath::evaluate ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE ]] ) : mixed
DOMXPath::query ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE ]] ) : DOMNodeList
DOMXPath::registerNamespace ( string $prefix , string $namespaceURI ) : bool
DOMXPath::registerPhpFunctions ([ mixed $restrict ] ) : void
DOMXPath::__construct ( DOMDocument $doc )
Ds\Collection::clear ( void ) : void
Ds\Collection::copy ( void ) : Ds\Collection
Ds\Collection::isEmpty ( void ) : bool
Ds\Collection::toArray ( void ) : array
Ds\Deque::allocate ( int $capacity ) : void
Ds\Deque::apply ( callable $callback ) : void
Ds\Deque::capacity ( void ) : int
Ds\Deque::clear ( void ) : void
Ds\Deque::contains ([ mixed $...values ] ) : bool
Ds\Deque::copy ( void ) : Ds\Deque
Ds\Deque::filter ([ callable $callback ] ) : Ds\Deque
Ds\Deque::find ( mixed $value ) : mixed
Ds\Deque::first ( void ) : mixed
Ds\Deque::get ( int $index ) : mixed
Ds\Deque::insert ( int $index [, mixed $...values ] ) : void
Ds\Deque::isEmpty ( void ) : bool
Ds\Deque::join ([ string $glue ] ) : string
Ds\Deque::last ( void ) : mixed
Ds\Deque::map ( callable $callback ) : Ds\Deque
Ds\Deque::merge ( mixed $values ) : Ds\Deque
Ds\Deque::pop ( void ) : mixed
Ds\Deque::push ([ mixed $...values ] ) : void
Ds\Deque::reduce ( callable $callback [, mixed $initial ] ) : mixed
Ds\Deque::remove ( int $index ) : mixed
Ds\Deque::reverse ( void ) : void
Ds\Deque::reversed ( void ) : Ds\Deque
Ds\Deque::rotate ( int $rotations ) : void
Ds\Deque::set ( int $index , mixed $value ) : void
Ds\Deque::shift ( void ) : mixed
Ds\Deque::slice ( int $index [, int $length ] ) : Ds\Deque
Ds\Deque::sort ([ callable $comparator ] ) : void
Ds\Deque::sorted ([ callable $comparator ] ) : Ds\Deque
Ds\Deque::sum ( void ) : number
Ds\Deque::toArray ( void ) : array
Ds\Deque::unshift ([ mixed $values ] ) : void
Ds\Hashable::equals ( object $obj ) : bool
Ds\Hashable::hash ( void ) : mixed
Ds\Map::allocate ( int $capacity ) : void
Ds\Map::apply ( callable $callback ) : void
Ds\Map::capacity ( void ) : int
Ds\Map::clear ( void ) : void
Ds\Map::copy ( void ) : Ds\Map
Ds\Map::diff ( Ds\Map $map ) : Ds\Map
Ds\Map::filter ([ callable $callback ] ) : Ds\Map
Ds\Map::first ( void ) : Ds\Pair
Ds\Map::get ( mixed $key [, mixed $default ] ) : mixed
Ds\Map::hasKey ( mixed $key ) : bool
Ds\Map::hasValue ( mixed $value ) : bool
Ds\Map::intersect ( Ds\Map $map ) : Ds\Map
Ds\Map::isEmpty ( void ) : bool
Ds\Map::keys ( void ) : Ds\Set
Ds\Map::ksort ([ callable $comparator ] ) : void
Ds\Map::ksorted ([ callable $comparator ] ) : Ds\Map
Ds\Map::last ( void ) : Ds\Pair
Ds\Map::map ( callable $callback ) : Ds\Map
Ds\Map::merge ( mixed $values ) : Ds\Map
Ds\Map::pairs ( void ) : Ds\Sequence
Ds\Map::put ( mixed $key , mixed $value ) : void
Ds\Map::putAll ( mixed $pairs ) : void
Ds\Map::reduce ( callable $callback [, mixed $initial ] ) : mixed
Ds\Map::remove ( mixed $key [, mixed $default ] ) : mixed
Ds\Map::reverse ( void ) : void
Ds\Map::reversed ( void ) : Ds\Map
Ds\Map::skip ( int $position ) : Ds\Pair
Ds\Map::slice ( int $index [, int $length ] ) : Ds\Map
Ds\Map::sort ([ callable $comparator ] ) : void
Ds\Map::sorted ([ callable $comparator ] ) : Ds\Map
Ds\Map::sum ( void ) : number
Ds\Map::toArray ( void ) : array
Ds\Map::union ( Ds\Map $map ) : Ds\Map
Ds\Map::values ( void ) : Ds\Sequence
Ds\Map::xor ( Ds\Map $map ) : Ds\Map
Ds\Pair::clear ( void ) : void
Ds\Pair::copy ( void ) : Ds\Pair
Ds\Pair::isEmpty ( void ) : bool
Ds\Pair::toArray ( void ) : array
Ds\Pair::__construct ([ mixed $key [, mixed $value ]] )
Ds\PriorityQueue::allocate ( int $capacity ) : void
Ds\PriorityQueue::capacity ( void ) : int
Ds\PriorityQueue::clear ( void ) : void
Ds\PriorityQueue::copy ( void ) : Ds\PriorityQueue
Ds\PriorityQueue::isEmpty ( void ) : bool
Ds\PriorityQueue::peek ( void ) : mixed
Ds\PriorityQueue::pop ( void ) : mixed
Ds\PriorityQueue::push ( mixed $value , int $priority ) : void
Ds\PriorityQueue::toArray ( void ) : array
Ds\Queue::allocate ( int $capacity ) : void
Ds\Queue::capacity ( void ) : int
Ds\Queue::clear ( void ) : void
Ds\Queue::copy ( void ) : Ds\Queue
Ds\Queue::isEmpty ( void ) : bool
Ds\Queue::peek ( void ) : mixed
Ds\Queue::pop ( void ) : mixed
Ds\Queue::push ([ mixed $...values ] ) : void
Ds\Queue::toArray ( void ) : array
Ds\Sequence::allocate ( int $capacity ) : void
Ds\Sequence::apply ( callable $callback ) : void
Ds\Sequence::capacity ( void ) : int
Ds\Sequence::contains ([ mixed $...values ] ) : bool
Ds\Sequence::filter ([ callable $callback ] ) : Ds\Sequence
Ds\Sequence::find ( mixed $value ) : mixed
Ds\Sequence::first ( void ) : mixed
Ds\Sequence::get ( int $index ) : mixed
Ds\Sequence::insert ( int $index [, mixed $...values ] ) : void
Ds\Sequence::join ([ string $glue ] ) : string
Ds\Sequence::last ( void ) : mixed
Ds\Sequence::map ( callable $callback ) : Ds\Sequence
Ds\Sequence::merge ( mixed $values ) : Ds\Sequence
Ds\Sequence::pop ( void ) : mixed
Ds\Sequence::push ([ mixed $...values ] ) : void
Ds\Sequence::reduce ( callable $callback [, mixed $initial ] ) : mixed
Ds\Sequence::remove ( int $index ) : mixed
Ds\Sequence::reverse ( void ) : void
Ds\Sequence::reversed ( void ) : Ds\Sequence
Ds\Sequence::rotate ( int $rotations ) : void
Ds\Sequence::set ( int $index , mixed $value ) : void
Ds\Sequence::shift ( void ) : mixed
Ds\Sequence::slice ( int $index [, int $length ] ) : Ds\Sequence
Ds\Sequence::sort ([ callable $comparator ] ) : void
Ds\Sequence::sorted ([ callable $comparator ] ) : Ds\Sequence
Ds\Sequence::sum ( void ) : number
Ds\Sequence::unshift ([ mixed $values ] ) : void
Ds\Set::add ([ mixed $...values ] ) : void
Ds\Set::allocate ( int $capacity ) : void
Ds\Set::capacity ( void ) : int
Ds\Set::clear ( void ) : void
Ds\Set::contains ([ mixed $...values ] ) : bool
Ds\Set::copy ( void ) : Ds\Set
Ds\Set::diff ( Ds\Set $set ) : Ds\Set
Ds\Set::filter ([ callable $callback ] ) : Ds\Set
Ds\Set::first ( void ) : mixed
Ds\Set::get ( int $index ) : mixed
Ds\Set::intersect ( Ds\Set $set ) : Ds\Set
Ds\Set::isEmpty ( void ) : bool
Ds\Set::join ([ string $glue ] ) : string
Ds\Set::last ( void ) : void
Ds\Set::merge ( mixed $values ) : Ds\Set
Ds\Set::reduce ( callable $callback [, mixed $initial ] ) : mixed
Ds\Set::remove ([ mixed $...values ] ) : void
Ds\Set::reverse ( void ) : void
Ds\Set::reversed ( void ) : Ds\Set
Ds\Set::slice ( int $index [, int $length ] ) : Ds\Set
Ds\Set::sort ([ callable $comparator ] ) : void
Ds\Set::sorted ([ callable $comparator ] ) : Ds\Set
Ds\Set::sum ( void ) : number
Ds\Set::toArray ( void ) : array
Ds\Set::union ( Ds\Set $set ) : Ds\Set
Ds\Set::xor ( Ds\Set $set ) : Ds\Set
Ds\Stack::allocate ( int $capacity ) : void
Ds\Stack::capacity ( void ) : int
Ds\Stack::clear ( void ) : void
Ds\Stack::copy ( void ) : Ds\Stack
Ds\Stack::isEmpty ( void ) : bool
Ds\Stack::peek ( void ) : mixed
Ds\Stack::pop ( void ) : mixed
Ds\Stack::push ([ mixed $...values ] ) : void
Ds\Stack::toArray ( void ) : array
Ds\Vector::allocate ( int $capacity ) : void
Ds\Vector::apply ( callable $callback ) : void
Ds\Vector::capacity ( void ) : int
Ds\Vector::clear ( void ) : void
Ds\Vector::contains ([ mixed $...values ] ) : bool
Ds\Vector::copy ( void ) : Ds\Vector
Ds\Vector::filter ([ callable $callback ] ) : Ds\Vector
Ds\Vector::find ( mixed $value ) : mixed
Ds\Vector::first ( void ) : mixed
Ds\Vector::get ( int $index ) : mixed
Ds\Vector::insert ( int $index [, mixed $...values ] ) : void
Ds\Vector::isEmpty ( void ) : bool
Ds\Vector::join ([ string $glue ] ) : string
Ds\Vector::last ( void ) : mixed
Ds\Vector::map ( callable $callback ) : Ds\Vector
Ds\Vector::merge ( mixed $values ) : Ds\Vector
Ds\Vector::pop ( void ) : mixed
Ds\Vector::push ([ mixed $...values ] ) : void
Ds\Vector::reduce ( callable $callback [, mixed $initial ] ) : mixed
Ds\Vector::remove ( int $index ) : mixed
Ds\Vector::reverse ( void ) : void
Ds\Vector::reversed ( void ) : Ds\Vector
Ds\Vector::rotate ( int $rotations ) : void
Ds\Vector::set ( int $index , mixed $value ) : void
Ds\Vector::shift ( void ) : mixed
Ds\Vector::slice ( int $index [, int $length ] ) : Ds\Vector
Ds\Vector::sort ([ callable $comparator ] ) : void
Ds\Vector::sorted ([ callable $comparator ] ) : Ds\Vector
Ds\Vector::sum ( void ) : number
Ds\Vector::toArray ( void ) : array
Ds\Vector::unshift ([ mixed $values ] ) : void
EmptyIterator::current ( void ) : mixed
EmptyIterator::key ( void ) : scalar
EmptyIterator::next ( void ) : void
EmptyIterator::rewind ( void ) : void
EmptyIterator::valid ( void ) : bool
Error::getCode ( void ) : mixed
Error::getFile ( void ) : string
Error::getLine ( void ) : int
Error::getMessage ( void ) : string
Error::getPrevious ( void ) : Throwable
Error::getTrace ( void ) : array
Error::getTraceAsString ( void ) : string
Error::__clone ( void ) : void
Error::__construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
Error::__toString ( void ) : string
ErrorException::getCode ( void ) : mixed
ErrorException::getFile ( void ) : string
ErrorException::getLine ( void ) : int
ErrorException::getMessage ( void ) : string
ErrorException::getPrevious ( void ) : Throwable
ErrorException::getSeverity ( void ) : int
ErrorException::getTrace ( void ) : array
ErrorException::getTraceAsString ( void ) : string
ErrorException::__clone ( void ) : void
ErrorException::__construct ([ string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )
ErrorException::__toString ( void ) : string
Ev::backend ( void ) : int
Ev::depth ( void ) : int
Ev::embeddableBackends ( void ) : void
Ev::feedSignal ( int $signum ) : void
Ev::feedSignalEvent ( int $signum ) : void
Ev::iteration ( void ) : int
Ev::now ( void ) : float
Ev::nowUpdate ( void ) : void
Ev::recommendedBackends ( void ) : void
Ev::resume ( void ) : void
Ev::run ([ int $flags ] ) : void
Ev::sleep ( float $seconds ) : void
Ev::stop ([ int $how ] ) : void
Ev::supportedBackends ( void ) : void
Ev::suspend ( void ) : void
Ev::time ( void ) : float
Ev::verify ( void ) : void
EvCheck::clear ( void ) : int
EvCheck::createStopped ( string $callback [, string $data [, string $priority ]] ) : object
EvCheck::feed ( int $revents ) : void
EvCheck::getLoop ( void ) : EvLoop
EvCheck::invoke ( int $revents ) : void
EvCheck::keepalive ([ bool $value ] ) : bool
EvCheck::setCallback ( callable $callback ) : void
EvCheck::start ( void ) : void
EvCheck::stop ( void ) : void
EvCheck::__construct ( callable $callback [, mixed $data [, int $priority ]] )
EvChild::clear ( void ) : int
EvChild::createStopped ( int $pid , bool $trace , callable $callback [, mixed $data [, int $priority ]] ) : object
EvChild::feed ( int $revents ) : void
EvChild::getLoop ( void ) : EvLoop
EvChild::invoke ( int $revents ) : void
EvChild::keepalive ([ bool $value ] ) : bool
EvChild::set ( int $pid , bool $trace ) : void
EvChild::setCallback ( callable $callback ) : void
EvChild::start ( void ) : void
EvChild::stop ( void ) : void
EvChild::__construct ( int $pid , bool $trace , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvEmbed::clear ( void ) : int
EvEmbed::createStopped ( object $other [, callable $callback [, mixed $data [, int $priority ]]] ) : void
EvEmbed::feed ( int $revents ) : void
EvEmbed::getLoop ( void ) : EvLoop
EvEmbed::invoke ( int $revents ) : void
EvEmbed::keepalive ([ bool $value ] ) : bool
EvEmbed::set ( object $other ) : void
EvEmbed::setCallback ( callable $callback ) : void
EvEmbed::start ( void ) : void
EvEmbed::stop ( void ) : void
EvEmbed::sweep ( void ) : void
EvEmbed::__construct ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )
Event::add ([ float $timeout ] ) : bool
Event::addSignal ([ float $timeout ] ) : bool
Event::addTimer ([ float $timeout ] ) : bool
Event::del ( void ) : bool
Event::delSignal ( void ) : bool
Event::delTimer ( void ) : bool
Event::free ( void ) : void
Event::getSupportedMethods ( void ) : array
Event::pending ( int $flags ) : bool
Event::set ( EventBase $base , mixed $fd [, int $what [, callable $cb [, mixed $arg ]]] ) : bool
Event::setPriority ( int $priority ) : bool
Event::setTimer ( EventBase $base , callable $cb [, mixed $arg ] ) : bool
Event::signal ( EventBase $base , int $signum , callable $cb [, mixed $arg ] ) : Event
Event::timer ( EventBase $base , callable $cb [, mixed $arg ] ) : Event
Event::__construct ( EventBase $base , mixed $fd , int $what , callable $cb [, mixed $arg = NULL ] )
EventBase::dispatch ( void ) : void
EventBase::exit ([ float $timeout ] ) : bool
EventBase::free ( void ) : void
EventBase::getFeatures ( void ) : int
EventBase::getMethod ( void ) : string
EventBase::getTimeOfDayCached ( void ) : float
EventBase::gotExit ( void ) : bool
EventBase::gotStop ( void ) : bool
EventBase::loop ([ int $flags ] ) : bool
EventBase::priorityInit ( int $n_priorities ) : bool
EventBase::reInit ( void ) : bool
EventBase::stop ( void ) : bool
EventBase::__construct ([ EventConfig $cfg ] )
EventBuffer::add ( string $data ) : bool
EventBuffer::addBuffer ( EventBuffer $buf ) : bool
EventBuffer::appendFrom ( EventBuffer $buf , int $len ) : int
EventBuffer::copyout ( string &$data , int $max_bytes ) : int
EventBuffer::drain ( int $len ) : bool
EventBuffer::enableLocking ( void ) : void
EventBuffer::expand ( int $len ) : bool
EventBuffer::freeze ( bool $at_front ) : bool
EventBuffer::lock ( void ) : void
EventBuffer::prepend ( string $data ) : bool
EventBuffer::prependBuffer ( EventBuffer $buf ) : bool
EventBuffer::pullup ( int $size ) : string
EventBuffer::read ( int $max_bytes ) : string
EventBuffer::readLine ( int $eol_style ) : string
EventBuffer::search ( string $what [, int $start = -1 [, int $end = -1 ]] ) : mixed
EventBuffer::searchEol ([ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY ]] ) : mixed
EventBuffer::substr ( int $start [, int $length ] ) : string
EventBuffer::unfreeze ( bool $at_front ) : bool
EventBuffer::unlock ( void ) : bool
EventBuffer::write ( mixed $fd [, int $howmuch ] ) : int
EventBuffer::__construct ( void )
EventBufferEvent::close ( void ) : void
EventBufferEvent::connect ( string $addr ) : bool
EventBufferEvent::connectHost ( EventDnsBase $dns_base , string $hostname , int $port [, int $family = EventUtil::AF_UNSPEC ] ) : bool
EventBufferEvent::createPair ( EventBase $base [, int $options = 0 ] ) : array
EventBufferEvent::disable ( int $events ) : bool
EventBufferEvent::enable ( int $events ) : bool
EventBufferEvent::free ( void ) : void
EventBufferEvent::getDnsErrorString ( void ) : string
EventBufferEvent::getEnabled ( void ) : int
EventBufferEvent::getInput ( void ) : EventBuffer
EventBufferEvent::getOutput ( void ) : EventBuffer
EventBufferEvent::read ( int $size ) : string
EventBufferEvent::readBuffer ( EventBuffer $buf ) : bool
EventBufferEvent::setCallbacks ( callable $readcb , callable $writecb , callable $eventcb [, string $arg ] ) : void
EventBufferEvent::setPriority ( int $priority ) : bool
EventBufferEvent::setTimeouts ( float $timeout_read , float $timeout_write ) : bool
EventBufferEvent::setWatermark ( int $events , int $lowmark , int $highmark ) : void
EventBufferEvent::sslError ( void ) : string
EventBufferEvent::sslFilter ( EventBase $base , EventBufferEvent $underlying , EventSslContext $ctx , int $state [, int $options = 0 ] ) : EventBufferEvent
EventBufferEvent::sslGetCipherInfo ( void ) : string
EventBufferEvent::sslGetCipherName ( void ) : string
EventBufferEvent::sslGetCipherVersion ( void ) : string
EventBufferEvent::sslGetProtocol ( void ) : string
EventBufferEvent::sslRenegotiate ( void ) : void
EventBufferEvent::sslSocket ( EventBase $base , mixed $socket , EventSslContext $ctx , int $state [, int $options ] ) : EventBufferEvent
EventBufferEvent::write ( string $data ) : bool
EventBufferEvent::writeBuffer ( EventBuffer $buf ) : bool
EventBufferEvent::__construct ( EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL ]]]]] )
EventConfig::avoidMethod ( string $method ) : bool
EventConfig::requireFeatures ( int $feature ) : bool
EventConfig::setMaxDispatchInterval ( int $max_interval , int $max_callbacks , int $min_priority ) : void
EventConfig::__construct ( void )
EventDnsBase::addNameserverIp ( string $ip ) : bool
EventDnsBase::addSearch ( string $domain ) : void
EventDnsBase::clearSearch ( void ) : void
EventDnsBase::countNameservers ( void ) : int
EventDnsBase::loadHosts ( string $hosts ) : bool
EventDnsBase::parseResolvConf ( int $flags , string $filename ) : bool
EventDnsBase::setOption ( string $option , string $value ) : bool
EventDnsBase::setSearchNdots ( int $ndots ) : bool
EventDnsBase::__construct ( EventBase $base , bool $initialize )
EventHttp::accept ( mixed $socket ) : bool
EventHttp::addServerAlias ( string $alias ) : bool
EventHttp::bind ( string $address , int $port ) : void
EventHttp::removeServerAlias ( string $alias ) : bool
EventHttp::setAllowedMethods ( int $methods ) : void
EventHttp::setCallback ( string $path , string $cb [, string $arg ] ) : void
EventHttp::setDefaultCallback ( string $cb [, string $arg ] ) : void
EventHttp::setMaxBodySize ( int $value ) : void
EventHttp::setMaxHeadersSize ( int $value ) : void
EventHttp::setTimeout ( int $value ) : void
EventHttp::__construct ( EventBase $base [, EventSslContext $ctx = NULL ] )
EventHttpConnection::getBase ( void ) : EventBase
EventHttpConnection::getPeer ( string &$address , int &$port ) : void
EventHttpConnection::makeRequest ( EventHttpRequest $req , int $type , string $uri ) : bool
EventHttpConnection::setCloseCallback ( callable $callback [, mixed $data ] ) : void
EventHttpConnection::setLocalAddress ( string $address ) : void
EventHttpConnection::setLocalPort ( int $port ) : void
EventHttpConnection::setMaxBodySize ( string $max_size ) : void
EventHttpConnection::setMaxHeadersSize ( string $max_size ) : void
EventHttpConnection::setRetries ( int $retries ) : void
EventHttpConnection::setTimeout ( int $timeout ) : void
EventHttpConnection::__construct ( EventBase $base , EventDnsBase $dns_base , string $address , int $port [, EventSslContext $ctx = NULL ] )
EventHttpRequest::addHeader ( string $key , string $value , int $type ) : bool
EventHttpRequest::cancel ( void ) : void
EventHttpRequest::clearHeaders ( void ) : void
EventHttpRequest::closeConnection ( void ) : void
EventHttpRequest::findHeader ( string $key , string $type ) : void
EventHttpRequest::free ( void ) : void
EventHttpRequest::getCommand ( void ) : void
EventHttpRequest::getHost ( void ) : string
EventHttpRequest::getInputBuffer ( void ) : EventBuffer
EventHttpRequest::getInputHeaders ( void ) : array
EventHttpRequest::getOutputBuffer ( void ) : EventBuffer
EventHttpRequest::getOutputHeaders ( void ) : void
EventHttpRequest::getResponseCode ( void ) : int
EventHttpRequest::getUri ( void ) : string
EventHttpRequest::removeHeader ( string $key , string $type ) : void
EventHttpRequest::sendError ( int $error [, string $reason = NULL ] ) : void
EventHttpRequest::sendReply ( int $code , string $reason [, EventBuffer $buf ] ) : void
EventHttpRequest::sendReplyChunk ( EventBuffer $buf ) : void
EventHttpRequest::sendReplyEnd ( void ) : void
EventHttpRequest::sendReplyStart ( int $code , string $reason ) : void
EventHttpRequest::__construct ( callable $callback [, mixed $data = NULL ] )
EventListener::disable ( void ) : bool
EventListener::enable ( void ) : bool
EventListener::getBase ( void ) : void
EventListener::getSocketName ( string &$address [, mixed &$port ] ) : bool
EventListener::setCallback ( callable $cb [, mixed $arg = NULL ] ) : void
EventListener::setErrorCallback ( string $cb ) : void
EventListener::__construct ( EventBase $base , callable $cb , mixed $data , int $flags , int $backlog , mixed $target )
EventSslContext::__construct ( string $method , string $options )
EventUtil::getLastSocketErrno ([ mixed $socket = NULL ] ) : int
EventUtil::getLastSocketError ([ mixed $socket ] ) : string
EventUtil::getSocketFd ( mixed $socket ) : int
EventUtil::getSocketName ( mixed $socket , string &$address [, mixed &$port ] ) : bool
EventUtil::setSocketOption ( mixed $socket , int $level , int $optname , mixed $optval ) : bool
EventUtil::sslRandPoll ( void ) : void
EventUtil::__construct ( void )
EvFork::clear ( void ) : int
EvFork::createStopped ( string $callback [, string $data [, string $priority ]] ) : object
EvFork::feed ( int $revents ) : void
EvFork::getLoop ( void ) : EvLoop
EvFork::invoke ( int $revents ) : void
EvFork::keepalive ([ bool $value ] ) : bool
EvFork::setCallback ( callable $callback ) : void
EvFork::start ( void ) : void
EvFork::stop ( void ) : void
EvFork::__construct ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvIdle::clear ( void ) : int
EvIdle::createStopped ( string $callback [, mixed $data [, int $priority ]] ) : object
EvIdle::feed ( int $revents ) : void
EvIdle::getLoop ( void ) : EvLoop
EvIdle::invoke ( int $revents ) : void
EvIdle::keepalive ([ bool $value ] ) : bool
EvIdle::setCallback ( callable $callback ) : void
EvIdle::start ( void ) : void
EvIdle::stop ( void ) : void
EvIdle::__construct ( callable $callback [, mixed $data [, int $priority ]] )
EvIo::clear ( void ) : int
EvIo::createStopped ( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvIo
EvIo::feed ( int $revents ) : void
EvIo::getLoop ( void ) : EvLoop
EvIo::invoke ( int $revents ) : void
EvIo::keepalive ([ bool $value ] ) : bool
EvIo::set ( mixed $fd , int $events ) : void
EvIo::setCallback ( callable $callback ) : void
EvIo::start ( void ) : void
EvIo::stop ( void ) : void
EvIo::__construct ( mixed $fd , int $events , callable $callback [, mixed $data [, int $priority ]] )
EvLoop::backend ( void ) : int
EvLoop::check ( string $callback [, string $data [, string $priority ]] ) : EvCheck
EvLoop::child ( string $pid , string $trace , string $callback [, string $data [, string $priority ]] ) : EvChild
EvLoop::defaultLoop ([ int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, float $io_interval = 0. [, float $timeout_interval = 0. ]]]] ) : EvLoop
EvLoop::embed ( string $other [, string $callback [, string $data [, string $priority ]]] ) : EvEmbed
EvLoop::fork ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvFork
EvLoop::idle ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvIdle
EvLoop::invokePending ( void ) : void
EvLoop::io ( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvIo
EvLoop::loopFork ( void ) : void
EvLoop::now ( void ) : float
EvLoop::nowUpdate ( void ) : void
EvLoop::periodic ( float $offset , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvPeriodic
EvLoop::prepare ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvPrepare
EvLoop::resume ( void ) : void
EvLoop::run ([ int $flags = 0 ] ) : void
EvLoop::signal ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvSignal
EvLoop::stat ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvStat
EvLoop::stop ([ int $how ] ) : void
EvLoop::suspend ( void ) : void
EvLoop::timer ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvTimer
EvLoop::verify ( void ) : void
EvLoop::__construct ([ int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0 ]]]] )
EvPeriodic::again ( void ) : void
EvPeriodic::at ( void ) : float
EvPeriodic::clear ( void ) : int
EvPeriodic::createStopped ( float $offset , float $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvPeriodic
EvPeriodic::feed ( int $revents ) : void
EvPeriodic::getLoop ( void ) : EvLoop
EvPeriodic::invoke ( int $revents ) : void
EvPeriodic::keepalive ([ bool $value ] ) : bool
EvPeriodic::set ( float $offset , float $interval ) : void
EvPeriodic::setCallback ( callable $callback ) : void
EvPeriodic::start ( void ) : void
EvPeriodic::stop ( void ) : void
EvPeriodic::__construct ( float $offset , string $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvPrepare::clear ( void ) : int
EvPrepare::createStopped ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvPrepare
EvPrepare::feed ( int $revents ) : void
EvPrepare::getLoop ( void ) : EvLoop
EvPrepare::invoke ( int $revents ) : void
EvPrepare::keepalive ([ bool $value ] ) : bool
EvPrepare::setCallback ( callable $callback ) : void
EvPrepare::start ( void ) : void
EvPrepare::stop ( void ) : void
EvPrepare::__construct ( string $callback [, string $data [, string $priority ]] )
EvSignal::clear ( void ) : int
EvSignal::createStopped ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvSignal
EvSignal::feed ( int $revents ) : void
EvSignal::getLoop ( void ) : EvLoop
EvSignal::invoke ( int $revents ) : void
EvSignal::keepalive ([ bool $value ] ) : bool
EvSignal::set ( int $signum ) : void
EvSignal::setCallback ( callable $callback ) : void
EvSignal::start ( void ) : void
EvSignal::stop ( void ) : void
EvSignal::__construct ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvStat::attr ( void ) : array
EvStat::clear ( void ) : int
EvStat::createStopped ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : void
EvStat::feed ( int $revents ) : void
EvStat::getLoop ( void ) : EvLoop
EvStat::invoke ( int $revents ) : void
EvStat::keepalive ([ bool $value ] ) : bool
EvStat::prev ( void ) : void
EvStat::set ( string $path , float $interval ) : void
EvStat::setCallback ( callable $callback ) : void
EvStat::start ( void ) : void
EvStat::stat ( void ) : bool
EvStat::stop ( void ) : void
EvStat::__construct ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvTimer::again ( void ) : void
EvTimer::clear ( void ) : int
EvTimer::createStopped ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] ) : EvTimer
EvTimer::feed ( int $revents ) : void
EvTimer::getLoop ( void ) : EvLoop
EvTimer::invoke ( int $revents ) : void
EvTimer::keepalive ([ bool $value ] ) : bool
EvTimer::set ( float $after , float $repeat ) : void
EvTimer::setCallback ( callable $callback ) : void
EvTimer::start ( void ) : void
EvTimer::stop ( void ) : void
EvTimer::__construct ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
EvWatcher::clear ( void ) : int
EvWatcher::feed ( int $revents ) : void
EvWatcher::getLoop ( void ) : EvLoop
EvWatcher::invoke ( int $revents ) : void
EvWatcher::keepalive ([ bool $value ] ) : bool
EvWatcher::setCallback ( callable $callback ) : void
EvWatcher::start ( void ) : void
EvWatcher::stop ( void ) : void
EvWatcher::__construct ( void )
Exception::getCode ( void ) : mixed
Exception::getFile ( void ) : string
Exception::getLine ( void ) : int
Exception::getMessage ( void ) : string
Exception::getPrevious ( void ) : Throwable
Exception::getTrace ( void ) : array
Exception::getTraceAsString ( void ) : string
Exception::__clone ( void ) : void
Exception::__construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
Exception::__toString ( void ) : string
FANNConnection::getFromNeuron ( void ) : int
FANNConnection::getToNeuron ( void ) : int
FANNConnection::getWeight ( void ) : void
FANNConnection::setWeight ( float $weight ) : void
FANNConnection::__construct ( int $from_neuron , int $to_neuron , float $weight )
FilesystemIterator::current ( void ) : mixed
FilesystemIterator::getATime ( void ) : int
FilesystemIterator::getBasename ([ string $suffix ] ) : string
FilesystemIterator::getCTime ( void ) : int
FilesystemIterator::getExtension ( void ) : string
FilesystemIterator::getFilename ( void ) : string
FilesystemIterator::getFlags ( void ) : int
FilesystemIterator::getGroup ( void ) : int
FilesystemIterator::getInode ( void ) : int
FilesystemIterator::getMTime ( void ) : int
FilesystemIterator::getOwner ( void ) : int
FilesystemIterator::getPath ( void ) : string
FilesystemIterator::getPathname ( void ) : string
FilesystemIterator::getPerms ( void ) : int
FilesystemIterator::getSize ( void ) : int
FilesystemIterator::getType ( void ) : string
FilesystemIterator::isDir ( void ) : bool
FilesystemIterator::isDot ( void ) : bool
FilesystemIterator::isExecutable ( void ) : bool
FilesystemIterator::isFile ( void ) : bool
FilesystemIterator::isLink ( void ) : bool
FilesystemIterator::isReadable ( void ) : bool
FilesystemIterator::isWritable ( void ) : bool
FilesystemIterator::key ( void ) : string
FilesystemIterator::next ( void ) : void
FilesystemIterator::rewind ( void ) : void
FilesystemIterator::seek ( int $position ) : void
FilesystemIterator::setFlags ([ int $flags ] ) : void
FilesystemIterator::valid ( void ) : bool
FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )
FilesystemIterator::__toString ( void ) : string
FilterIterator::accept ( void ) : bool
FilterIterator::current ( void ) : mixed
FilterIterator::getInnerIterator ( void ) : Iterator
FilterIterator::key ( void ) : mixed
FilterIterator::next ( void ) : void
FilterIterator::rewind ( void ) : void
FilterIterator::valid ( void ) : bool
FilterIterator::__construct ( Iterator $iterator )
finfo::buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] ) : string
finfo::file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] ) : string
finfo::set_flags ( int $options ) : bool
finfo::__construct ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )
GearmanClient::addOptions ( int $options ) : bool
GearmanClient::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] ) : bool
GearmanClient::addServers ([ string $servers = 127.0.0.1:4730 ] ) : bool
GearmanClient::addTask ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskHigh ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskHighBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskLow ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskLowBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] ) : GearmanTask
GearmanClient::addTaskStatus ( string $job_handle [, string &$context ] ) : GearmanTask
GearmanClient::clearCallbacks ( void ) : bool
GearmanClient::clone ( void ) : GearmanClient
GearmanClient::context ( void ) : string
GearmanClient::data ( void ) : string
GearmanClient::do ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doBackground ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doHigh ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doHighBackground ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doJobHandle ( void ) : string
GearmanClient::doLow ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doLowBackground ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doNormal ( string $function_name , string $workload [, string $unique ] ) : string
GearmanClient::doStatus ( void ) : array
GearmanClient::echo ( string $workload ) : bool
GearmanClient::error ( void ) : string
GearmanClient::getErrno ( void ) : int
GearmanClient::jobStatus ( string $job_handle ) : array
GearmanClient::ping ( string $workload ) : bool
GearmanClient::removeOptions ( int $options ) : bool
GearmanClient::returnCode ( void ) : int
GearmanClient::runTasks ( void ) : bool
GearmanClient::setClientCallback ( callable $callback ) : void
GearmanClient::setCompleteCallback ( callable $callback ) : bool
GearmanClient::setContext ( string $context ) : bool
GearmanClient::setCreatedCallback ( string $callback ) : bool
GearmanClient::setData ( string $data ) : bool
GearmanClient::setDataCallback ( callable $callback ) : bool
GearmanClient::setExceptionCallback ( callable $callback ) : bool
GearmanClient::setFailCallback ( callable $callback ) : bool
GearmanClient::setOptions ( int $options ) : bool
GearmanClient::setStatusCallback ( callable $callback ) : bool
GearmanClient::setTimeout ( int $timeout ) : bool
GearmanClient::setWarningCallback ( callable $callback ) : bool
GearmanClient::setWorkloadCallback ( callable $callback ) : bool
GearmanClient::timeout ( void ) : int
GearmanClient::__construct ( void )
GearmanException::getCode ( void ) : mixed
GearmanException::getFile ( void ) : string
GearmanException::getLine ( void ) : int
GearmanException::getMessage ( void ) : string
GearmanException::getPrevious ( void ) : Throwable
GearmanException::getTrace ( void ) : array
GearmanException::getTraceAsString ( void ) : string
GearmanException::__clone ( void ) : void
GearmanException::__toString ( void ) : string
GearmanJob::complete ( string $result ) : bool
GearmanJob::data ( string $data ) : bool
GearmanJob::exception ( string $exception ) : bool
GearmanJob::fail ( void ) : bool
GearmanJob::functionName ( void ) : string
GearmanJob::handle ( void ) : string
GearmanJob::returnCode ( void ) : int
GearmanJob::sendComplete ( string $result ) : bool
GearmanJob::sendData ( string $data ) : bool
GearmanJob::sendException ( string $exception ) : bool
GearmanJob::sendFail ( void ) : bool
GearmanJob::sendStatus ( int $numerator , int $denominator ) : bool
GearmanJob::sendWarning ( string $warning ) : bool
GearmanJob::setReturn ( int $gearman_return_t ) : bool
GearmanJob::status ( int $numerator , int $denominator ) : bool
GearmanJob::unique ( void ) : string
GearmanJob::warning ( string $warning ) : bool
GearmanJob::workload ( void ) : string
GearmanJob::workloadSize ( void ) : int
GearmanJob::__construct ( void )
GearmanTask::create ( void ) : GearmanTask
GearmanTask::data ( void ) : string
GearmanTask::dataSize ( void ) : int
GearmanTask::function ( void ) : string
GearmanTask::functionName ( void ) : string
GearmanTask::isKnown ( void ) : bool
GearmanTask::isRunning ( void ) : bool
GearmanTask::jobHandle ( void ) : string
GearmanTask::recvData ( int $data_len ) : array
GearmanTask::returnCode ( void ) : int
GearmanTask::sendData ( string $data ) : int
GearmanTask::sendWorkload ( string $data ) : int
GearmanTask::taskDenominator ( void ) : int
GearmanTask::taskNumerator ( void ) : int
GearmanTask::unique ( void ) : string
GearmanTask::uuid ( void ) : string
GearmanTask::__construct ( void )
GearmanWorker::addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] ) : bool
GearmanWorker::addOptions ( int $option ) : bool
GearmanWorker::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] ) : bool
GearmanWorker::addServers ( string $servers = 127.0.0.1:4730 ) : bool
GearmanWorker::clone ( void ) : void
GearmanWorker::echo ( string $workload ) : bool
GearmanWorker::error ( void ) : string
GearmanWorker::getErrno ( void ) : int
GearmanWorker::options ( void ) : int
GearmanWorker::register ( string $function_name [, int $timeout ] ) : bool
GearmanWorker::removeOptions ( int $option ) : bool
GearmanWorker::returnCode ( void ) : int
GearmanWorker::setId ( string $id ) : bool
GearmanWorker::setOptions ( int $option ) : bool
GearmanWorker::setTimeout ( int $timeout ) : bool
GearmanWorker::timeout ( void ) : int
GearmanWorker::unregister ( string $function_name ) : bool
GearmanWorker::unregisterAll ( void ) : bool
GearmanWorker::wait ( void ) : bool
GearmanWorker::work ( void ) : bool
GearmanWorker::__construct ( void )
Gender\Gender::connect ( string $dsn ) : bool
Gender\Gender::country ( int $country ) : array
Gender\Gender::get ( string $name [, int $country ] ) : int
Gender\Gender::isNick ( string $name0 , string $name1 [, int $country ] ) : array
Gender\Gender::similarNames ( string $name [, int $country ] ) : array
Gender\Gender::__construct ([ string $dsn ] )
Generator::current ( void ) : mixed
Generator::getReturn ( void ) : mixed
Generator::key ( void ) : mixed
Generator::next ( void ) : void
Generator::rewind ( void ) : void
Generator::send ( mixed $value ) : mixed
Generator::throw ( Throwable $exception ) : mixed
Generator::valid ( void ) : bool
Generator::__wakeup ( void ) : void
GlobIterator::count ( void ) : int
GlobIterator::current ( void ) : mixed
GlobIterator::getFlags ( void ) : int
GlobIterator::key ( void ) : string
GlobIterator::next ( void ) : void
GlobIterator::rewind ( void ) : void
GlobIterator::setFlags ([ int $flags ] ) : void
GlobIterator::__construct ( string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
Gmagick::addimage ( Gmagick $source ) : Gmagick
Gmagick::addnoiseimage ( int $noise_type ) : Gmagick
Gmagick::annotateimage ( GmagickDraw $GmagickDraw , float $x , float $y , float $angle , string $text ) : Gmagick
Gmagick::blurimage ( float $radius , float $sigma [, int $channel ] ) : Gmagick
Gmagick::borderimage ( GmagickPixel $color , int $width , int $height ) : Gmagick
Gmagick::charcoalimage ( float $radius , float $sigma ) : Gmagick
Gmagick::chopimage ( int $width , int $height , int $x , int $y ) : Gmagick
Gmagick::clear ( void ) : Gmagick
Gmagick::commentimage ( string $comment ) : Gmagick
Gmagick::compositeimage ( Gmagick $source , int $COMPOSE , int $x , int $y ) : Gmagick
Gmagick::cropimage ( int $width , int $height , int $x , int $y ) : Gmagick
Gmagick::cropthumbnailimage ( int $width , int $height ) : Gmagick
Gmagick::current ( void ) : Gmagick
Gmagick::cyclecolormapimage ( int $displace ) : Gmagick
Gmagick::deconstructimages ( void ) : Gmagick
Gmagick::despeckleimage ( void ) : Gmagick
Gmagick::destroy ( void ) : bool
Gmagick::drawimage ( GmagickDraw $GmagickDraw ) : Gmagick
Gmagick::edgeimage ( float $radius ) : Gmagick
Gmagick::embossimage ( float $radius , float $sigma ) : Gmagick
Gmagick::enhanceimage ( void ) : Gmagick
Gmagick::equalizeimage ( void ) : Gmagick
Gmagick::flipimage ( void ) : Gmagick
Gmagick::flopimage ( void ) : Gmagick
Gmagick::frameimage ( GmagickPixel $color , int $width , int $height , int $inner_bevel , int $outer_bevel ) : Gmagick
Gmagick::gammaimage ( float $gamma ) : Gmagick
Gmagick::getcopyright ( void ) : string
Gmagick::getfilename ( void ) : string
Gmagick::getimagebackgroundcolor ( void ) : GmagickPixel
Gmagick::getimageblueprimary ( void ) : array
Gmagick::getimagebordercolor ( void ) : GmagickPixel
Gmagick::getimagechanneldepth ( int $channel_type ) : int
Gmagick::getimagecolors ( void ) : int
Gmagick::getimagecolorspace ( void ) : int
Gmagick::getimagecompose ( void ) : int
Gmagick::getimagedelay ( void ) : int
Gmagick::getimagedepth ( void ) : int
Gmagick::getimagedispose ( void ) : int
Gmagick::getimageextrema ( void ) : array
Gmagick::getimagefilename ( void ) : string
Gmagick::getimageformat ( void ) : string
Gmagick::getimagegamma ( void ) : float
Gmagick::getimagegreenprimary ( void ) : array
Gmagick::getimageheight ( void ) : int
Gmagick::getimagehistogram ( void ) : array
Gmagick::getimageindex ( void ) : int
Gmagick::getimageinterlacescheme ( void ) : int
Gmagick::getimageiterations ( void ) : int
Gmagick::getimagematte ( void ) : int
Gmagick::getimagemattecolor ( void ) : GmagickPixel
Gmagick::getimageprofile ( string $name ) : string
Gmagick::getimageredprimary ( void ) : array
Gmagick::getimagerenderingintent ( void ) : int
Gmagick::getimageresolution ( void ) : array
Gmagick::getimagescene ( void ) : int
Gmagick::getimagesignature ( void ) : string
Gmagick::getimagetype ( void ) : int
Gmagick::getimageunits ( void ) : int
Gmagick::getimagewhitepoint ( void ) : array
Gmagick::getimagewidth ( void ) : int
Gmagick::getpackagename ( void ) : string
Gmagick::getquantumdepth ( void ) : array
Gmagick::getreleasedate ( void ) : string
Gmagick::getsamplingfactors ( void ) : array
Gmagick::getsize ( void ) : array
Gmagick::getversion ( void ) : array
Gmagick::hasnextimage ( void ) : mixed
Gmagick::haspreviousimage ( void ) : mixed
Gmagick::implodeimage ( float $radius ) : mixed
Gmagick::labelimage ( string $label ) : mixed
Gmagick::levelimage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT ] ) : mixed
Gmagick::magnifyimage ( void ) : mixed
Gmagick::mapimage ( gmagick $gmagick , bool $dither ) : Gmagick
Gmagick::medianfilterimage ( float $radius ) : void
Gmagick::minifyimage ( void ) : Gmagick
Gmagick::modulateimage ( float $brightness , float $saturation , float $hue ) : Gmagick
Gmagick::motionblurimage ( float $radius , float $sigma , float $angle ) : Gmagick
Gmagick::newimage ( int $width , int $height , string $background [, string $format ] ) : Gmagick
Gmagick::nextimage ( void ) : bool
Gmagick::normalizeimage ([ int $channel ] ) : Gmagick
Gmagick::oilpaintimage ( float $radius ) : Gmagick
Gmagick::previousimage ( void ) : bool
Gmagick::profileimage ( string $name , string $profile ) : Gmagick
Gmagick::quantizeimage ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError ) : Gmagick
Gmagick::quantizeimages ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError ) : Gmagick
Gmagick::queryfontmetrics ( GmagickDraw $draw , string $text ) : array
Gmagick::queryfonts ([ string $pattern = "*" ] ) : array
Gmagick::queryformats ([ string $pattern = "*" ] ) : array
Gmagick::radialblurimage ( float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT ] ) : Gmagick
Gmagick::raiseimage ( int $width , int $height , int $x , int $y , bool $raise ) : Gmagick
Gmagick::read ( string $filename ) : Gmagick
Gmagick::readimage ( string $filename ) : Gmagick
Gmagick::readimageblob ( string $imageContents [, string $filename ] ) : Gmagick
Gmagick::readimagefile ( resource $fp [, string $filename ] ) : Gmagick
Gmagick::reducenoiseimage ( float $radius ) : Gmagick
Gmagick::removeimage ( void ) : Gmagick
Gmagick::removeimageprofile ( string $name ) : string
Gmagick::resampleimage ( float $xResolution , float $yResolution , int $filter , float $blur ) : Gmagick
Gmagick::resizeimage ( int $width , int $height , int $filter , float $blur [, bool $fit = FALSE ] ) : Gmagick
Gmagick::rollimage ( int $x , int $y ) : Gmagick
Gmagick::rotateimage ( mixed $color , float $degrees ) : Gmagick
Gmagick::scaleimage ( int $width , int $height [, bool $fit = FALSE ] ) : Gmagick
Gmagick::separateimagechannel ( int $channel ) : Gmagick
Gmagick::setCompressionQuality ( int $quality = 75 ) : Gmagick
Gmagick::setfilename ( string $filename ) : Gmagick
Gmagick::setimagebackgroundcolor ( GmagickPixel $color ) : Gmagick
Gmagick::setimageblueprimary ( float $x , float $y ) : Gmagick
Gmagick::setimagebordercolor ( GmagickPixel $color ) : Gmagick
Gmagick::setimagechanneldepth ( int $channel , int $depth ) : Gmagick
Gmagick::setimagecolorspace ( int $colorspace ) : Gmagick
Gmagick::setimagecompose ( int $composite ) : Gmagick
Gmagick::setimagedelay ( int $delay ) : Gmagick
Gmagick::setimagedepth ( int $depth ) : Gmagick
Gmagick::setimagedispose ( int $disposeType ) : Gmagick
Gmagick::setimagefilename ( string $filename ) : Gmagick
Gmagick::setimageformat ( string $imageFormat ) : Gmagick
Gmagick::setimagegamma ( float $gamma ) : Gmagick
Gmagick::setimagegreenprimary ( float $x , float $y ) : Gmagick
Gmagick::setimageindex ( int $index ) : Gmagick
Gmagick::setimageinterlacescheme ( int $interlace ) : Gmagick
Gmagick::setimageiterations ( int $iterations ) : Gmagick
Gmagick::setimageprofile ( string $name , string $profile ) : Gmagick
Gmagick::setimageredprimary ( float $x , float $y ) : Gmagick
Gmagick::setimagerenderingintent ( int $rendering_intent ) : Gmagick
Gmagick::setimageresolution ( float $xResolution , float $yResolution ) : Gmagick
Gmagick::setimagescene ( int $scene ) : Gmagick
Gmagick::setimagetype ( int $imgType ) : Gmagick
Gmagick::setimageunits ( int $resolution ) : Gmagick
Gmagick::setimagewhitepoint ( float $x , float $y ) : Gmagick
Gmagick::setsamplingfactors ( array $factors ) : Gmagick
Gmagick::setsize ( int $columns , int $rows ) : Gmagick
Gmagick::shearimage ( mixed $color , float $xShear , float $yShear ) : Gmagick
Gmagick::solarizeimage ( int $threshold ) : Gmagick
Gmagick::spreadimage ( float $radius ) : Gmagick
Gmagick::stripimage ( void ) : Gmagick
Gmagick::swirlimage ( float $degrees ) : Gmagick
Gmagick::thumbnailimage ( int $width , int $height [, bool $fit = FALSE ] ) : Gmagick
Gmagick::trimimage ( float $fuzz ) : Gmagick
Gmagick::writeimage ( string $filename [, bool $all_frames = FALSE ] ) : Gmagick
Gmagick::__construct ([ string $filename ] )
GmagickDraw::annotate ( float $x , float $y , string $text ) : GmagickDraw
GmagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed ) : GmagickDraw
GmagickDraw::bezier ( array $coordinate_array ) : GmagickDraw
GmagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end ) : GmagickDraw
GmagickDraw::getfillcolor ( void ) : GmagickPixel
GmagickDraw::getfillopacity ( void ) : float
GmagickDraw::getfont ( void ) : mixed
GmagickDraw::getfontsize ( void ) : float
GmagickDraw::getfontstyle ( void ) : int
GmagickDraw::getfontweight ( void ) : int
GmagickDraw::getstrokecolor ( void ) : GmagickPixel
GmagickDraw::getstrokeopacity ( void ) : float
GmagickDraw::getstrokewidth ( void ) : float
GmagickDraw::gettextdecoration ( void ) : int
GmagickDraw::gettextencoding ( void ) : mixed
GmagickDraw::line ( float $sx , float $sy , float $ex , float $ey ) : GmagickDraw
GmagickDraw::point ( float $x , float $y ) : GmagickDraw
GmagickDraw::polygon ( array $coordinates ) : GmagickDraw
GmagickDraw::polyline ( array $coordinate_array ) : GmagickDraw
GmagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 ) : GmagickDraw
GmagickDraw::rotate ( float $degrees ) : GmagickDraw
GmagickDraw::roundrectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry ) : GmagickDraw
GmagickDraw::scale ( float $x , float $y ) : GmagickDraw
GmagickDraw::setfillcolor ( mixed $color ) : GmagickDraw
GmagickDraw::setfillopacity ( float $fill_opacity ) : GmagickDraw
GmagickDraw::setfont ( string $font ) : GmagickDraw
GmagickDraw::setfontsize ( float $pointsize ) : GmagickDraw
GmagickDraw::setfontstyle ( int $style ) : GmagickDraw
GmagickDraw::setfontweight ( int $weight ) : GmagickDraw
GmagickDraw::setstrokecolor ( mixed $color ) : GmagickDraw
GmagickDraw::setstrokeopacity ( float $stroke_opacity ) : GmagickDraw
GmagickDraw::setstrokewidth ( float $width ) : GmagickDraw
GmagickDraw::settextdecoration ( int $decoration ) : GmagickDraw
GmagickDraw::settextencoding ( string $encoding ) : GmagickDraw
GmagickPixel::getcolor ([ bool $as_array = FALSE [, bool $normalize_array = FALSE ]] ) : mixed
GmagickPixel::getcolorcount ( void ) : int
GmagickPixel::getcolorvalue ( int $color ) : float
GmagickPixel::setcolor ( string $color ) : GmagickPixel
GmagickPixel::setcolorvalue ( int $color , float $value ) : GmagickPixel
GmagickPixel::__construct ([ string $color ] )
HaruAnnotation::setBorderStyle ( float $width , int $dash_on , int $dash_off ) : bool
HaruAnnotation::setHighlightMode ( int $mode ) : bool
HaruAnnotation::setIcon ( int $icon ) : bool
HaruAnnotation::setOpened ( bool $opened ) : bool
HaruDestination::setFit ( void ) : bool
HaruDestination::setFitB ( void ) : bool
HaruDestination::setFitBH ( float $top ) : bool
HaruDestination::setFitBV ( float $left ) : bool
HaruDestination::setFitH ( float $top ) : bool
HaruDestination::setFitR ( float $left , float $bottom , float $right , float $top ) : bool
HaruDestination::setFitV ( float $left ) : bool
HaruDestination::setXYZ ( float $left , float $top , float $zoom ) : bool
HaruDoc::addPage ( void ) : object
HaruDoc::addPageLabel ( int $first_page , int $style , int $first_num [, string $prefix = "" ] ) : bool
HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] ) : object
HaruDoc::getCurrentEncoder ( void ) : object
HaruDoc::getCurrentPage ( void ) : object
HaruDoc::getEncoder ( string $encoding ) : object
HaruDoc::getFont ( string $fontname [, string $encoding ] ) : object
HaruDoc::getInfoAttr ( int $type ) : string
HaruDoc::getPageLayout ( void ) : int
HaruDoc::getPageMode ( void ) : int
HaruDoc::getStreamSize ( void ) : int
HaruDoc::insertPage ( object $page ) : object
HaruDoc::loadJPEG ( string $filename ) : object
HaruDoc::loadPNG ( string $filename [, bool $deferred = FALSE ] ) : object
HaruDoc::loadRaw ( string $filename , int $width , int $height , int $color_space ) : object
HaruDoc::loadTTC ( string $fontfile , int $index [, bool $embed = FALSE ] ) : string
HaruDoc::loadTTF ( string $fontfile [, bool $embed = FALSE ] ) : string
HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] ) : string
HaruDoc::output ( void ) : bool
HaruDoc::readFromStream ( int $bytes ) : string
HaruDoc::resetError ( void ) : bool
HaruDoc::resetStream ( void ) : bool
HaruDoc::save ( string $file ) : bool
HaruDoc::saveToStream ( void ) : bool
HaruDoc::setCompressionMode ( int $mode ) : bool
HaruDoc::setCurrentEncoder ( string $encoding ) : bool
HaruDoc::setEncryptionMode ( int $mode [, int $key_len = 5 ] ) : bool
HaruDoc::setInfoAttr ( int $type , string $info ) : bool
HaruDoc::setInfoDateAttr ( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min ) : bool
HaruDoc::setOpenAction ( object $destination ) : bool
HaruDoc::setPageLayout ( int $layout ) : bool
HaruDoc::setPageMode ( int $mode ) : bool
HaruDoc::setPagesConfiguration ( int $page_per_pages ) : bool
HaruDoc::setPassword ( string $owner_password , string $user_password ) : bool
HaruDoc::setPermission ( int $permission ) : bool
HaruDoc::useCNSEncodings ( void ) : bool
HaruDoc::useCNSFonts ( void ) : bool
HaruDoc::useCNTEncodings ( void ) : bool
HaruDoc::useCNTFonts ( void ) : bool
HaruDoc::useJPEncodings ( void ) : bool
HaruDoc::useJPFonts ( void ) : bool
HaruDoc::useKREncodings ( void ) : bool
HaruDoc::useKRFonts ( void ) : bool
HaruDoc::__construct ( void )
HaruEncoder::getByteType ( string $text , int $index ) : int
HaruEncoder::getType ( void ) : int
HaruEncoder::getUnicode ( int $character ) : int
HaruEncoder::getWritingMode ( void ) : int
HaruException::getCode ( void ) : mixed
HaruException::getFile ( void ) : string
HaruException::getLine ( void ) : int
HaruException::getMessage ( void ) : string
HaruException::getPrevious ( void ) : Throwable
HaruException::getTrace ( void ) : array
HaruException::getTraceAsString ( void ) : string
HaruException::__clone ( void ) : void
HaruException::__toString ( void ) : string
HaruFont::getAscent ( void ) : int
HaruFont::getCapHeight ( void ) : int
HaruFont::getDescent ( void ) : int
HaruFont::getEncodingName ( void ) : string
HaruFont::getFontName ( void ) : string
HaruFont::getTextWidth ( string $text ) : array
HaruFont::getUnicodeWidth ( int $character ) : int
HaruFont::getXHeight ( void ) : int
HaruFont::measureText ( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap = FALSE ] ) : int
HaruImage::getBitsPerComponent ( void ) : int
HaruImage::getColorSpace ( void ) : string
HaruImage::getHeight ( void ) : int
HaruImage::getSize ( void ) : array
HaruImage::getWidth ( void ) : int
HaruImage::setColorMask ( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax ) : bool
HaruImage::setMaskImage ( object $mask_image ) : bool
HaruOutline::setDestination ( object $destination ) : bool
HaruOutline::setOpened ( bool $opened ) : bool
HaruPage::arc ( float $x , float $y , float $ray , float $ang1 , float $ang2 ) : bool
HaruPage::beginText ( void ) : bool
HaruPage::circle ( float $x , float $y , float $ray ) : bool
HaruPage::closePath ( void ) : bool
HaruPage::concat ( float $a , float $b , float $c , float $d , float $x , float $y ) : bool
HaruPage::createDestination ( void ) : object
HaruPage::createLinkAnnotation ( array $rectangle , object $destination ) : object
HaruPage::createTextAnnotation ( array $rectangle , string $text [, object $encoder ] ) : object
HaruPage::createURLAnnotation ( array $rectangle , string $url ) : object
HaruPage::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) : bool
HaruPage::curveTo2 ( float $x2 , float $y2 , float $x3 , float $y3 ) : bool
HaruPage::curveTo3 ( float $x1 , float $y1 , float $x3 , float $y3 ) : bool
HaruPage::drawImage ( object $image , float $x , float $y , float $width , float $height ) : bool
HaruPage::ellipse ( float $x , float $y , float $xray , float $yray ) : bool
HaruPage::endPath ( void ) : bool
HaruPage::endText ( void ) : bool
HaruPage::eofill ( void ) : bool
HaruPage::eoFillStroke ([ bool $close_path = FALSE ] ) : bool
HaruPage::fill ( void ) : bool
HaruPage::fillStroke ([ bool $close_path = FALSE ] ) : bool
HaruPage::getCharSpace ( void ) : float
HaruPage::getCMYKFill ( void ) : array
HaruPage::getCMYKStroke ( void ) : array
HaruPage::getCurrentFont ( void ) : object
HaruPage::getCurrentFontSize ( void ) : float
HaruPage::getCurrentPos ( void ) : array
HaruPage::getCurrentTextPos ( void ) : array
HaruPage::getDash ( void ) : array
HaruPage::getFillingColorSpace ( void ) : int
HaruPage::getFlatness ( void ) : float
HaruPage::getGMode ( void ) : int
HaruPage::getGrayFill ( void ) : float
HaruPage::getGrayStroke ( void ) : float
HaruPage::getHeight ( void ) : float
HaruPage::getHorizontalScaling ( void ) : float
HaruPage::getLineCap ( void ) : int
HaruPage::getLineJoin ( void ) : int
HaruPage::getLineWidth ( void ) : float
HaruPage::getMiterLimit ( void ) : float
HaruPage::getRGBFill ( void ) : array
HaruPage::getRGBStroke ( void ) : array
HaruPage::getStrokingColorSpace ( void ) : int
HaruPage::getTextLeading ( void ) : float
HaruPage::getTextMatrix ( void ) : array
HaruPage::getTextRenderingMode ( void ) : int
HaruPage::getTextRise ( void ) : float
HaruPage::getTextWidth ( string $text ) : float
HaruPage::getTransMatrix ( void ) : array
HaruPage::getWidth ( void ) : float
HaruPage::getWordSpace ( void ) : float
HaruPage::lineTo ( float $x , float $y ) : bool
HaruPage::measureText ( string $text , float $width [, bool $wordwrap = FALSE ] ) : int
HaruPage::moveTextPos ( float $x , float $y [, bool $set_leading = FALSE ] ) : bool
HaruPage::moveTo ( float $x , float $y ) : bool
HaruPage::moveToNextLine ( void ) : bool
HaruPage::rectangle ( float $x , float $y , float $width , float $height ) : bool
HaruPage::setCharSpace ( float $char_space ) : bool
HaruPage::setCMYKFill ( float $c , float $m , float $y , float $k ) : bool
HaruPage::setCMYKStroke ( float $c , float $m , float $y , float $k ) : bool
HaruPage::setDash ( array $pattern , int $phase ) : bool
HaruPage::setFlatness ( float $flatness ) : bool
HaruPage::setFontAndSize ( object $font , float $size ) : bool
HaruPage::setGrayFill ( float $value ) : bool
HaruPage::setGrayStroke ( float $value ) : bool
HaruPage::setHeight ( float $height ) : bool
HaruPage::setHorizontalScaling ( float $scaling ) : bool
HaruPage::setLineCap ( int $cap ) : bool
HaruPage::setLineJoin ( int $join ) : bool
HaruPage::setLineWidth ( float $width ) : bool
HaruPage::setMiterLimit ( float $limit ) : bool
HaruPage::setRGBFill ( float $r , float $g , float $b ) : bool
HaruPage::setRGBStroke ( float $r , float $g , float $b ) : bool
HaruPage::setRotate ( int $angle ) : bool
HaruPage::setSize ( int $size , int $direction ) : bool
HaruPage::setSlideShow ( int $type , float $disp_time , float $trans_time ) : bool
HaruPage::setTextLeading ( float $text_leading ) : bool
HaruPage::setTextMatrix ( float $a , float $b , float $c , float $d , float $x , float $y ) : bool
HaruPage::setTextRenderingMode ( int $mode ) : bool
HaruPage::setTextRise ( float $rise ) : bool
HaruPage::setWidth ( float $width ) : bool
HaruPage::setWordSpace ( float $word_space ) : bool
HaruPage::showText ( string $text ) : bool
HaruPage::showTextNextLine ( string $text [, float $word_space = 0 [, float $char_space = 0 ]] ) : bool
HaruPage::stroke ([ bool $close_path = FALSE ] ) : bool
HaruPage::textOut ( float $x , float $y , string $text ) : bool
HaruPage::textRect ( float $left , float $top , float $right , float $bottom , string $text [, int $align = HaruPage::TALIGN_LEFT ] ) : bool
HashContext::__construct ( void )
HRTime\PerformanceCounter::getFrequency ( void ) : int
HRTime\PerformanceCounter::getTicks ( void ) : int
HRTime\PerformanceCounter::getTicksSince ( int $start ) : int
HRTime\StopWatch::getElapsedTicks ( void ) : int
HRTime\StopWatch::getElapsedTime ([ int $unit ] ) : float
HRTime\StopWatch::getFrequency ( void ) : int
HRTime\StopWatch::getLastElapsedTicks ( void ) : int
HRTime\StopWatch::getLastElapsedTime ([ int $unit ] ) : float
HRTime\StopWatch::getTicks ( void ) : int
HRTime\StopWatch::getTicksSince ( int $start ) : int
HRTime\StopWatch::isRunning ( void ) : bool
HRTime\StopWatch::start ( void ) : void
HRTime\StopWatch::stop ( void ) : void
Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] ) : bool
Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset ) : bool
Imagick::addImage ( Imagick $source ) : bool
Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::affineTransformImage ( ImagickDraw $matrix ) : bool
Imagick::animateImages ( string $x_server ) : bool
Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text ) : bool
Imagick::appendImages ( bool $stack ) : Imagick
Imagick::autoLevelImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::averageImages ( void ) : Imagick
Imagick::blackThresholdImage ( mixed $threshold ) : bool
Imagick::blueShiftImage ([ float $factor = 1.5 ] ) : bool
Imagick::blurImage ( float $radius , float $sigma [, int $channel ] ) : bool
Imagick::borderImage ( mixed $bordercolor , int $width , int $height ) : bool
Imagick::brightnessContrastImage ( float $brightness , float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::charcoalImage ( float $radius , float $sigma ) : bool
Imagick::chopImage ( int $width , int $height , int $x , int $y ) : bool
Imagick::clampImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::clear ( void ) : bool
Imagick::clipImage ( void ) : bool
Imagick::clipImagePath ( string $pathname , string $inside ) : void
Imagick::clipPathImage ( string $pathname , bool $inside ) : bool
Imagick::clone ( void ) : Imagick
Imagick::clutImage ( Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::coalesceImages ( void ) : Imagick
Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y ) : bool
Imagick::colorizeImage ( mixed $colorize , mixed $opacity [, bool $legacy = FALSE ] ) : bool
Imagick::colorMatrixImage ( array $color_matrix = Imagick::CHANNEL_DEFAULT ) : bool
Imagick::combineImages ( int $channelType ) : Imagick
Imagick::commentImage ( string $comment ) : bool
Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType ) : array
Imagick::compareImageLayers ( int $method ) : Imagick
Imagick::compareImages ( Imagick $compare , int $metric ) : array
Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::contrastImage ( bool $sharpen ) : bool
Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::count ([ int $mode = 0 ] ) : int
Imagick::cropImage ( int $width , int $height , int $x , int $y ) : bool
Imagick::cropThumbnailImage ( int $width , int $height [, bool $legacy = FALSE ] ) : bool
Imagick::current ( void ) : Imagick
Imagick::cycleColormapImage ( int $displace ) : bool
Imagick::decipherImage ( string $passphrase ) : bool
Imagick::deconstructImages ( void ) : Imagick
Imagick::deleteImageArtifact ( string $artifact ) : bool
Imagick::deleteImageProperty ( string $name ) : bool
Imagick::deskewImage ( float $threshold ) : bool
Imagick::despeckleImage ( void ) : bool
Imagick::destroy ( void ) : bool
Imagick::displayImage ( string $servername ) : bool
Imagick::displayImages ( string $servername ) : bool
Imagick::distortImage ( int $method , array $arguments , bool $bestfit ) : bool
Imagick::drawImage ( ImagickDraw $draw ) : bool
Imagick::edgeImage ( float $radius ) : bool
Imagick::embossImage ( float $radius , float $sigma ) : bool
Imagick::encipherImage ( string $passphrase ) : bool
Imagick::enhanceImage ( void ) : bool
Imagick::equalizeImage ( void ) : bool
Imagick::evaluateImage ( int $op , float $constant [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::exportImagePixels ( int $x , int $y , int $width , int $height , string $map , int $STORAGE ) : array
Imagick::extentImage ( int $width , int $height , int $x , int $y ) : bool
Imagick::filter ( ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED ] ) : bool
Imagick::flattenImages ( void ) : Imagick
Imagick::flipImage ( void ) : bool
Imagick::floodFillPaintImage ( mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::flopImage ( void ) : bool
Imagick::forwardFourierTransformimage ( bool $magnitude ) : bool
Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel ) : bool
Imagick::functionImage ( int $function , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : Imagick
Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::getColorspace ( void ) : int
Imagick::getCompression ( void ) : int
Imagick::getCompressionQuality ( void ) : int
Imagick::getCopyright ( void ) : string
Imagick::getFilename ( void ) : string
Imagick::getFont ( void ) : string
Imagick::getFormat ( void ) : string
Imagick::getGravity ( void ) : int
Imagick::getHomeURL ( void ) : string
Imagick::getImage ( void ) : Imagick
Imagick::getImageAlphaChannel ( void ) : int
Imagick::getImageArtifact ( string $artifact ) : string
Imagick::getImageAttribute ( string $key ) : string
Imagick::getImageBackgroundColor ( void ) : ImagickPixel
Imagick::getImageBlob ( void ) : string
Imagick::getImageBluePrimary ( void ) : array
Imagick::getImageBorderColor ( void ) : ImagickPixel
Imagick::getImageChannelDepth ( int $channel ) : int
Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric ) : float
Imagick::getImageChannelDistortions ( Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : float
Imagick::getImageChannelExtrema ( int $channel ) : array
Imagick::getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] ) : array
Imagick::getImageChannelMean ( int $channel ) : array
Imagick::getImageChannelRange ( int $channel ) : array
Imagick::getImageChannelStatistics ( void ) : array
Imagick::getImageClipMask ( void ) : Imagick
Imagick::getImageColormapColor ( int $index ) : ImagickPixel
Imagick::getImageColors ( void ) : int
Imagick::getImageColorspace ( void ) : int
Imagick::getImageCompose ( void ) : int
Imagick::getImageCompression ( void ) : int
Imagick::getImageCompressionQuality ( void ) : int
Imagick::getImageDelay ( void ) : int
Imagick::getImageDepth ( void ) : int
Imagick::getImageDispose ( void ) : int
Imagick::getImageDistortion ( MagickWand $reference , int $metric ) : float
Imagick::getImageExtrema ( void ) : array
Imagick::getImageFilename ( void ) : string
Imagick::getImageFormat ( void ) : string
Imagick::getImageGamma ( void ) : float
Imagick::getImageGeometry ( void ) : array
Imagick::getImageGravity ( void ) : int
Imagick::getImageGreenPrimary ( void ) : array
Imagick::getImageHeight ( void ) : int
Imagick::getImageHistogram ( void ) : array
Imagick::getImageIndex ( void ) : int
Imagick::getImageInterlaceScheme ( void ) : int
Imagick::getImageInterpolateMethod ( void ) : int
Imagick::getImageIterations ( void ) : int
Imagick::getImageLength ( void ) : int
Imagick::getImageMagickLicense ( void ) : string
Imagick::getImageMatte ( void ) : bool
Imagick::getImageMatteColor ( void ) : ImagickPixel
Imagick::getImageMimeType ( void ) : string
Imagick::getImageOrientation ( void ) : int
Imagick::getImagePage ( void ) : array
Imagick::getImagePixelColor ( int $x , int $y ) : ImagickPixel
Imagick::getImageProfile ( string $name ) : string
Imagick::getImageProfiles ([ string $pattern = "*" [, bool $include_values = TRUE ]] ) : array
Imagick::getImageProperties ([ string $pattern = "*" [, bool $include_values = TRUE ]] ) : array
Imagick::getImageProperty ( string $name ) : string
Imagick::getImageRedPrimary ( void ) : array
Imagick::getImageRegion ( int $width , int $height , int $x , int $y ) : Imagick
Imagick::getImageRenderingIntent ( void ) : int
Imagick::getImageResolution ( void ) : array
Imagick::getImagesBlob ( void ) : string
Imagick::getImageScene ( void ) : int
Imagick::getImageSignature ( void ) : string
Imagick::getImageSize ( void ) : int
Imagick::getImageTicksPerSecond ( void ) : int
Imagick::getImageTotalInkDensity ( void ) : float
Imagick::getImageType ( void ) : int
Imagick::getImageUnits ( void ) : int
Imagick::getImageVirtualPixelMethod ( void ) : int
Imagick::getImageWhitePoint ( void ) : array
Imagick::getImageWidth ( void ) : int
Imagick::getInterlaceScheme ( void ) : int
Imagick::getIteratorIndex ( void ) : int
Imagick::getNumberImages ( void ) : int
Imagick::getOption ( string $key ) : string
Imagick::getPackageName ( void ) : string
Imagick::getPage ( void ) : array
Imagick::getPixelIterator ( void ) : ImagickPixelIterator
Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows ) : ImagickPixelIterator
Imagick::getPointSize ( void ) : float
Imagick::getQuantum ( void ) : int
Imagick::getQuantumDepth ( void ) : array
Imagick::getQuantumRange ( void ) : array
Imagick::getRegistry ( string $key ) : string
Imagick::getReleaseDate ( void ) : string
Imagick::getResource ( int $type ) : int
Imagick::getResourceLimit ( int $type ) : int
Imagick::getSamplingFactors ( void ) : array
Imagick::getSize ( void ) : array
Imagick::getSizeOffset ( void ) : int
Imagick::getVersion ( void ) : array
Imagick::haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::hasNextImage ( void ) : bool
Imagick::hasPreviousImage ( void ) : bool
Imagick::identifyFormat ( string $embedText ) : string
Imagick::identifyImage ([ bool $appendRawOutput = FALSE ] ) : array
Imagick::implodeImage ( float $radius ) : bool
Imagick::importImagePixels ( int $x , int $y , int $width , int $height , string $map , int $storage , array $pixels ) : bool
Imagick::inverseFourierTransformImage ( Imagick $complement , bool $magnitude ) : bool
Imagick::labelImage ( string $label ) : bool
Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::linearStretchImage ( float $blackPoint , float $whitePoint ) : bool
Imagick::liquidRescaleImage ( int $width , int $height , float $delta_x , float $rigidity ) : bool
Imagick::listRegistry ( void ) : array
Imagick::magnifyImage ( void ) : bool
Imagick::mapImage ( Imagick $map , bool $dither ) : bool
Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y ) : bool
Imagick::medianFilterImage ( float $radius ) : bool
Imagick::mergeImageLayers ( int $layer_method ) : Imagick
Imagick::minifyImage ( void ) : bool
Imagick::modulateImage ( float $brightness , float $saturation , float $hue ) : bool
Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame ) : Imagick
Imagick::morphImages ( int $number_frames ) : Imagick
Imagick::morphology ( int $morphologyMethod , int $iterations , ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::mosaicImages ( void ) : Imagick
Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] ) : bool
Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString ) : bool
Imagick::nextImage ( void ) : bool
Imagick::normalizeImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::oilPaintImage ( float $radius ) : bool
Imagick::opaquePaintImage ( mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::optimizeImageLayers ( void ) : bool
Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz ) : bool
Imagick::pingImage ( string $filename ) : bool
Imagick::pingImageBlob ( string $image ) : bool
Imagick::pingImageFile ( resource $filehandle [, string $fileName ] ) : bool
Imagick::polaroidImage ( ImagickDraw $properties , float $angle ) : bool
Imagick::posterizeImage ( int $levels , bool $dither ) : bool
Imagick::previewImages ( int $preview ) : bool
Imagick::previousImage ( void ) : bool
Imagick::profileImage ( string $name , string $profile ) : bool
Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError ) : bool
Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError ) : bool
Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] ) : array
Imagick::queryFonts ([ string $pattern = "*" ] ) : array
Imagick::queryFormats ([ string $pattern = "*" ] ) : array
Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise ) : bool
Imagick::randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::readImage ( string $filename ) : bool
Imagick::readImageBlob ( string $image [, string $filename ] ) : bool
Imagick::readImageFile ( resource $filehandle [, string $fileName = NULL ] ) : bool
Imagick::readImages ( array $filenames ) : bool
Imagick::recolorImage ( array $matrix ) : bool
Imagick::reduceNoiseImage ( float $radius ) : bool
Imagick::remapImage ( Imagick $replacement , int $DITHER ) : bool
Imagick::removeImage ( void ) : bool
Imagick::removeImageProfile ( string $name ) : string
Imagick::render ( void ) : bool
Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur ) : bool
Imagick::resetImagePage ( string $page ) : bool
Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] ) : bool
Imagick::rollImage ( int $x , int $y ) : bool
Imagick::rotateImage ( mixed $background , float $degrees ) : bool
Imagick::rotationalBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] ) : bool
Imagick::sampleImage ( int $columns , int $rows ) : bool
Imagick::scaleImage ( int $cols , int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] ) : bool
Imagick::segmentImage ( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = FALSE ] ) : bool
Imagick::selectiveBlurImage ( float $radius , float $sigma , float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::separateImageChannel ( int $channel ) : bool
Imagick::sepiaToneImage ( float $threshold ) : bool
Imagick::setBackgroundColor ( mixed $background ) : bool
Imagick::setColorspace ( int $COLORSPACE ) : bool
Imagick::setCompression ( int $compression ) : bool
Imagick::setCompressionQuality ( int $quality ) : bool
Imagick::setFilename ( string $filename ) : bool
Imagick::setFirstIterator ( void ) : bool
Imagick::setFont ( string $font ) : bool
Imagick::setFormat ( string $format ) : bool
Imagick::setGravity ( int $gravity ) : bool
Imagick::setImage ( Imagick $replace ) : bool
Imagick::setImageAlphaChannel ( int $mode ) : bool
Imagick::setImageArtifact ( string $artifact , string $value ) : bool
Imagick::setImageAttribute ( string $key , string $value ) : bool
Imagick::setImageBackgroundColor ( mixed $background ) : bool
Imagick::setImageBias ( float $bias ) : bool
Imagick::setImageBiasQuantum ( string $bias ) : void
Imagick::setImageBluePrimary ( float $x , float $y ) : bool
Imagick::setImageBorderColor ( mixed $border ) : bool
Imagick::setImageChannelDepth ( int $channel , int $depth ) : bool
Imagick::setImageClipMask ( Imagick $clip_mask ) : bool
Imagick::setImageColormapColor ( int $index , ImagickPixel $color ) : bool
Imagick::setImageColorspace ( int $colorspace ) : bool
Imagick::setImageCompose ( int $compose ) : bool
Imagick::setImageCompression ( int $compression ) : bool
Imagick::setImageCompressionQuality ( int $quality ) : bool
Imagick::setImageDelay ( int $delay ) : bool
Imagick::setImageDepth ( int $depth ) : bool
Imagick::setImageDispose ( int $dispose ) : bool
Imagick::setImageExtent ( int $columns , int $rows ) : bool
Imagick::setImageFilename ( string $filename ) : bool
Imagick::setImageFormat ( string $format ) : bool
Imagick::setImageGamma ( float $gamma ) : bool
Imagick::setImageGravity ( int $gravity ) : bool
Imagick::setImageGreenPrimary ( float $x , float $y ) : bool
Imagick::setImageIndex ( int $index ) : bool
Imagick::setImageInterlaceScheme ( int $interlace_scheme ) : bool
Imagick::setImageInterpolateMethod ( int $method ) : bool
Imagick::setImageIterations ( int $iterations ) : bool
Imagick::setImageMatte ( bool $matte ) : bool
Imagick::setImageMatteColor ( mixed $matte ) : bool
Imagick::setImageOpacity ( float $opacity ) : bool
Imagick::setImageOrientation ( int $orientation ) : bool
Imagick::setImagePage ( int $width , int $height , int $x , int $y ) : bool
Imagick::setImageProfile ( string $name , string $profile ) : bool
Imagick::setImageProperty ( string $name , string $value ) : bool
Imagick::setImageRedPrimary ( float $x , float $y ) : bool
Imagick::setImageRenderingIntent ( int $rendering_intent ) : bool
Imagick::setImageResolution ( float $x_resolution , float $y_resolution ) : bool
Imagick::setImageScene ( int $scene ) : bool
Imagick::setImageTicksPerSecond ( int $ticks_per_second ) : bool
Imagick::setImageType ( int $image_type ) : bool
Imagick::setImageUnits ( int $units ) : bool
Imagick::setImageVirtualPixelMethod ( int $method ) : bool
Imagick::setImageWhitePoint ( float $x , float $y ) : bool
Imagick::setInterlaceScheme ( int $interlace_scheme ) : bool
Imagick::setIteratorIndex ( int $index ) : bool
Imagick::setLastIterator ( void ) : bool
Imagick::setOption ( string $key , string $value ) : bool
Imagick::setPage ( int $width , int $height , int $x , int $y ) : bool
Imagick::setPointSize ( float $point_size ) : bool
Imagick::setProgressMonitor ( callable $callback ) : bool
Imagick::setRegistry ( string $key , string $value ) : bool
Imagick::setResolution ( float $x_resolution , float $y_resolution ) : bool
Imagick::setResourceLimit ( int $type , int $limit ) : bool
Imagick::setSamplingFactors ( array $factors ) : bool
Imagick::setSize ( int $columns , int $rows ) : bool
Imagick::setSizeOffset ( int $columns , int $rows , int $offset ) : bool
Imagick::setType ( int $image_type ) : bool
Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation ) : bool
Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y ) : bool
Imagick::sharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::shaveImage ( int $columns , int $rows ) : bool
Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear ) : bool
Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::sketchImage ( float $radius , float $sigma , float $angle ) : bool
Imagick::smushImages ( bool $stack , int $offset ) : Imagick
Imagick::solarizeImage ( int $threshold ) : bool
Imagick::sparseColorImage ( int $SPARSE_METHOD , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::spliceImage ( int $width , int $height , int $x , int $y ) : bool
Imagick::spreadImage ( float $radius ) : bool
Imagick::statisticImage ( int $type , int $width , int $height [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::steganoImage ( Imagick $watermark_wand , int $offset ) : Imagick
Imagick::stereoImage ( Imagick $offset_wand ) : bool
Imagick::stripImage ( void ) : bool
Imagick::subImageMatch ( Imagick $Imagick [, array &$offset [, float &$similarity ]] ) : Imagick
Imagick::swirlImage ( float $degrees ) : bool
Imagick::textureImage ( Imagick $texture_wand ) : Imagick
Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::thumbnailImage ( int $columns , int $rows [, bool $bestfit = FALSE [, bool $fill = FALSE [, bool $legacy = FALSE ]]] ) : bool
Imagick::tintImage ( mixed $tint , mixed $opacity [, bool $legacy = FALSE ] ) : bool
Imagick::transformImage ( string $crop , string $geometry ) : Imagick
Imagick::transformImageColorspace ( int $colorspace ) : bool
Imagick::transparentPaintImage ( mixed $target , float $alpha , float $fuzz , bool $invert ) : bool
Imagick::transposeImage ( void ) : bool
Imagick::transverseImage ( void ) : bool
Imagick::trimImage ( float $fuzz ) : bool
Imagick::uniqueImageColors ( void ) : bool
Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] ) : bool
Imagick::valid ( void ) : bool
Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y ) : bool
Imagick::waveImage ( float $amplitude , float $length ) : bool
Imagick::whiteThresholdImage ( mixed $threshold ) : bool
Imagick::writeImage ([ string $filename = NULL ] ) : bool
Imagick::writeImageFile ( resource $filehandle [, string $format ] ) : bool
Imagick::writeImages ( string $filename , bool $adjoin ) : bool
Imagick::writeImagesFile ( resource $filehandle [, string $format ] ) : bool
Imagick::__construct ([ mixed $files ] )
Imagick::__toString ( void ) : string
ImagickDraw::affine ( array $affine ) : bool
ImagickDraw::annotation ( float $x , float $y , string $text ) : bool
ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed ) : bool
ImagickDraw::bezier ( array $coordinates ) : bool
ImagickDraw::circle ( float $ox , float $oy , float $px , float $py ) : bool
ImagickDraw::clear ( void ) : bool
ImagickDraw::clone ( void ) : ImagickDraw
ImagickDraw::color ( float $x , float $y , int $paintMethod ) : bool
ImagickDraw::comment ( string $comment ) : bool
ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand ) : bool
ImagickDraw::destroy ( void ) : bool
ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end ) : bool
ImagickDraw::getClipPath ( void ) : string
ImagickDraw::getClipRule ( void ) : int
ImagickDraw::getClipUnits ( void ) : int
ImagickDraw::getFillColor ( void ) : ImagickPixel
ImagickDraw::getFillOpacity ( void ) : float
ImagickDraw::getFillRule ( void ) : int
ImagickDraw::getFont ( void ) : string
ImagickDraw::getFontFamily ( void ) : string
ImagickDraw::getFontSize ( void ) : float
ImagickDraw::getFontStretch ( void ) : int
ImagickDraw::getFontStyle ( void ) : int
ImagickDraw::getFontWeight ( void ) : int
ImagickDraw::getGravity ( void ) : int
ImagickDraw::getStrokeAntialias ( void ) : bool
ImagickDraw::getStrokeColor ( void ) : ImagickPixel
ImagickDraw::getStrokeDashArray ( void ) : array
ImagickDraw::getStrokeDashOffset ( void ) : float
ImagickDraw::getStrokeLineCap ( void ) : int
ImagickDraw::getStrokeLineJoin ( void ) : int
ImagickDraw::getStrokeMiterLimit ( void ) : int
ImagickDraw::getStrokeOpacity ( void ) : float
ImagickDraw::getStrokeWidth ( void ) : float
ImagickDraw::getTextAlignment ( void ) : int
ImagickDraw::getTextAntialias ( void ) : bool
ImagickDraw::getTextDecoration ( void ) : int
ImagickDraw::getTextEncoding ( void ) : string
ImagickDraw::getTextInterlineSpacing ( void ) : float
ImagickDraw::getTextInterwordSpacing ( void ) : float
ImagickDraw::getTextKerning ( void ) : float
ImagickDraw::getTextUnderColor ( void ) : ImagickPixel
ImagickDraw::getVectorGraphics ( void ) : string
ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey ) : bool
ImagickDraw::matte ( float $x , float $y , int $paintMethod ) : bool
ImagickDraw::pathClose ( void ) : bool
ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y ) : bool
ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y ) : bool
ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y ) : bool
ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y ) : bool
ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y ) : bool
ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y ) : bool
ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y ) : bool
ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y ) : bool
ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y ) : bool
ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y ) : bool
ImagickDraw::pathFinish ( void ) : bool
ImagickDraw::pathLineToAbsolute ( float $x , float $y ) : bool
ImagickDraw::pathLineToHorizontalAbsolute ( float $x ) : bool
ImagickDraw::pathLineToHorizontalRelative ( float $x ) : bool
ImagickDraw::pathLineToRelative ( float $x , float $y ) : bool
ImagickDraw::pathLineToVerticalAbsolute ( float $y ) : bool
ImagickDraw::pathLineToVerticalRelative ( float $y ) : bool
ImagickDraw::pathMoveToAbsolute ( float $x , float $y ) : bool
ImagickDraw::pathMoveToRelative ( float $x , float $y ) : bool
ImagickDraw::pathStart ( void ) : bool
ImagickDraw::point ( float $x , float $y ) : bool
ImagickDraw::polygon ( array $coordinates ) : bool
ImagickDraw::polyline ( array $coordinates ) : bool
ImagickDraw::pop ( void ) : bool
ImagickDraw::popClipPath ( void ) : bool
ImagickDraw::popDefs ( void ) : bool
ImagickDraw::popPattern ( void ) : bool
ImagickDraw::push ( void ) : bool
ImagickDraw::pushClipPath ( string $clip_mask_id ) : bool
ImagickDraw::pushDefs ( void ) : bool
ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height ) : bool
ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 ) : bool
ImagickDraw::render ( void ) : bool
ImagickDraw::resetVectorGraphics ( void ) : bool
ImagickDraw::rotate ( float $degrees ) : bool
ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry ) : bool
ImagickDraw::scale ( float $x , float $y ) : bool
ImagickDraw::setClipPath ( string $clip_mask ) : bool
ImagickDraw::setClipRule ( int $fill_rule ) : bool
ImagickDraw::setClipUnits ( int $clip_units ) : bool
ImagickDraw::setFillAlpha ( float $opacity ) : bool
ImagickDraw::setFillColor ( ImagickPixel $fill_pixel ) : bool
ImagickDraw::setFillOpacity ( float $fillOpacity ) : bool
ImagickDraw::setFillPatternURL ( string $fill_url ) : bool
ImagickDraw::setFillRule ( int $fill_rule ) : bool
ImagickDraw::setFont ( string $font_name ) : bool
ImagickDraw::setFontFamily ( string $font_family ) : bool
ImagickDraw::setFontSize ( float $pointsize ) : bool
ImagickDraw::setFontStretch ( int $fontStretch ) : bool
ImagickDraw::setFontStyle ( int $style ) : bool
ImagickDraw::setFontWeight ( int $font_weight ) : bool
ImagickDraw::setGravity ( int $gravity ) : bool
ImagickDraw::setResolution ( float $x_resolution , float $y_resolution ) : bool
ImagickDraw::setStrokeAlpha ( float $opacity ) : bool
ImagickDraw::setStrokeAntialias ( bool $stroke_antialias ) : bool
ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel ) : bool
ImagickDraw::setStrokeDashArray ( array $dashArray ) : bool
ImagickDraw::setStrokeDashOffset ( float $dash_offset ) : bool
ImagickDraw::setStrokeLineCap ( int $linecap ) : bool
ImagickDraw::setStrokeLineJoin ( int $linejoin ) : bool
ImagickDraw::setStrokeMiterLimit ( int $miterlimit ) : bool
ImagickDraw::setStrokeOpacity ( float $stroke_opacity ) : bool
ImagickDraw::setStrokePatternURL ( string $stroke_url ) : bool
ImagickDraw::setStrokeWidth ( float $stroke_width ) : bool
ImagickDraw::setTextAlignment ( int $alignment ) : bool
ImagickDraw::setTextAntialias ( bool $antiAlias ) : bool
ImagickDraw::setTextDecoration ( int $decoration ) : bool
ImagickDraw::setTextEncoding ( string $encoding ) : bool
ImagickDraw::setTextInterlineSpacing ( float $spacing ) : bool
ImagickDraw::setTextInterwordSpacing ( float $spacing ) : bool
ImagickDraw::setTextKerning ( float $kerning ) : bool
ImagickDraw::setTextUnderColor ( ImagickPixel $under_color ) : bool
ImagickDraw::setVectorGraphics ( string $xml ) : bool
ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 ) : bool
ImagickDraw::skewX ( float $degrees ) : bool
ImagickDraw::skewY ( float $degrees ) : bool
ImagickDraw::translate ( float $x , float $y ) : bool
ImagickDraw::__construct ( void )
ImagickKernel::addKernel ( ImagickKernel $ImagickKernel ) : void
ImagickKernel::addUnityKernel ( float $scale ) : void
ImagickKernel::fromBuiltin ( int $kernelType , string $kernelString ) : ImagickKernel
ImagickKernel::fromMatrix ( array $matrix [, array $origin ] ) : ImagickKernel
ImagickKernel::getMatrix ( void ) : array
ImagickKernel::scale ( float $scale [, int $normalizeFlag ] ) : void
ImagickKernel::separate ( void ) : array
ImagickPixel::clear ( void ) : bool
ImagickPixel::destroy ( void ) : bool
ImagickPixel::getColor ([ int $normalized = 0 ] ) : array
ImagickPixel::getColorAsString ( void ) : string
ImagickPixel::getColorCount ( void ) : int
ImagickPixel::getColorQuantum ( void ) : array
ImagickPixel::getColorValue ( int $color ) : float
ImagickPixel::getColorValueQuantum ( int $color ) : number
ImagickPixel::getHSL ( void ) : array
ImagickPixel::getIndex ( void ) : int
ImagickPixel::isPixelSimilar ( ImagickPixel $color , float $fuzz ) : bool
ImagickPixel::isPixelSimilarQuantum ( string $color [, string $fuzz ] ) : bool
ImagickPixel::isSimilar ( ImagickPixel $color , float $fuzz ) : bool
ImagickPixel::setColor ( string $color ) : bool
ImagickPixel::setcolorcount ( int $colorCount ) : bool
ImagickPixel::setColorValue ( int $color , float $value ) : bool
ImagickPixel::setColorValueQuantum ( int $color , number $value ) : bool
ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity ) : bool
ImagickPixel::setIndex ( int $index ) : bool
ImagickPixel::__construct ([ string $color ] )
ImagickPixelIterator::clear ( void ) : bool
ImagickPixelIterator::destroy ( void ) : bool
ImagickPixelIterator::getCurrentIteratorRow ( void ) : array
ImagickPixelIterator::getIteratorRow ( void ) : int
ImagickPixelIterator::getNextIteratorRow ( void ) : array
ImagickPixelIterator::getPreviousIteratorRow ( void ) : array
ImagickPixelIterator::newPixelIterator ( Imagick $wand ) : bool
ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows ) : bool
ImagickPixelIterator::resetIterator ( void ) : bool
ImagickPixelIterator::setIteratorFirstRow ( void ) : bool
ImagickPixelIterator::setIteratorLastRow ( void ) : bool
ImagickPixelIterator::setIteratorRow ( int $row ) : bool
ImagickPixelIterator::syncIterator ( void ) : bool
ImagickPixelIterator::__construct ( Imagick $wand )
InfiniteIterator::current ( void ) : mixed
InfiniteIterator::getInnerIterator ( void ) : Traversable
InfiniteIterator::key ( void ) : mixed
InfiniteIterator::next ( void ) : void
InfiniteIterator::rewind ( void ) : void
InfiniteIterator::valid ( void ) : bool
InfiniteIterator::__construct ( Iterator $iterator )
IntlBreakIterator::createCharacterInstance ([ string $locale ] ) : IntlBreakIterator
IntlBreakIterator::createCodePointInstance ( void ) : IntlBreakIterator
IntlBreakIterator::createLineInstance ([ string $locale ] ) : IntlBreakIterator
IntlBreakIterator::createSentenceInstance ([ string $locale ] ) : IntlBreakIterator
IntlBreakIterator::createTitleInstance ([ string $locale ] ) : IntlBreakIterator
IntlBreakIterator::createWordInstance ([ string $locale ] ) : IntlBreakIterator
IntlBreakIterator::current ( void ) : int
IntlBreakIterator::first ( void ) : int
IntlBreakIterator::following ( int $offset ) : int
IntlBreakIterator::getErrorCode ( void ) : int
IntlBreakIterator::getErrorMessage ( void ) : string
IntlBreakIterator::getLocale ( string $locale_type ) : string
IntlBreakIterator::getPartsIterator ([ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL ] ) : IntlPartsIterator
IntlBreakIterator::getText ( void ) : string
IntlBreakIterator::intl_get_error_code ( void ) : int
IntlBreakIterator::intl_get_error_message ( void ) : string
IntlBreakIterator::isBoundary ( int $offset ) : bool
IntlBreakIterator::last ( void ) : int
IntlBreakIterator::next ([ int $offset ] ) : int
IntlBreakIterator::preceding ( int $offset ) : int
IntlBreakIterator::previous ( void ) : int
IntlBreakIterator::setText ( string $text ) : bool
IntlBreakIterator::__construct ( void )
IntlCalendar::add ( int $field , int $amount ) : bool
IntlCalendar::after ( IntlCalendar $other ) : bool
IntlCalendar::before ( IntlCalendar $other ) : bool
IntlCalendar::clear ([ int $field = NULL ] ) : bool
IntlCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = "" ]] ) : IntlCalendar
IntlCalendar::equals ( IntlCalendar $other ) : bool
IntlCalendar::fieldDifference ( float $when , int $field ) : int
IntlCalendar::fromDateTime ( mixed $dateTime ) : IntlCalendar
IntlCalendar::get ( int $field ) : int
IntlCalendar::getActualMaximum ( int $field ) : int
IntlCalendar::getActualMinimum ( int $field ) : int
IntlCalendar::getAvailableLocales ( void ) : array
IntlCalendar::getDayOfWeekType ( int $dayOfWeek ) : int
IntlCalendar::getErrorCode ( void ) : int
IntlCalendar::getErrorMessage ( void ) : string
IntlCalendar::getFirstDayOfWeek ( void ) : int
IntlCalendar::getGreatestMinimum ( int $field ) : int
IntlCalendar::getKeywordValuesForLocale ( string $key , string $locale , bool $commonlyUsed ) : Iterator
IntlCalendar::getLeastMaximum ( int $field ) : int
IntlCalendar::getLocale ( int $localeType ) : string
IntlCalendar::getMaximum ( int $field ) : int
IntlCalendar::getMinimalDaysInFirstWeek ( void ) : int
IntlCalendar::getMinimum ( int $field ) : int
IntlCalendar::getNow ( void ) : float
IntlCalendar::getRepeatedWallTimeOption ( void ) : int
IntlCalendar::getSkippedWallTimeOption ( void ) : int
IntlCalendar::getTime ( void ) : float
IntlCalendar::getTimeZone ( void ) : IntlTimeZone
IntlCalendar::getType ( void ) : string
IntlCalendar::getWeekendTransition ( string $dayOfWeek ) : int
IntlCalendar::inDaylightTime ( void ) : bool
IntlCalendar::intlcal_add ( IntlCalendar $cal , int $field , int $amount ) : bool
IntlCalendar::intlcal_after ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlCalendar::intlcal_before ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlCalendar::intlcal_clear ( IntlCalendar $cal [, int $field = NULL ] ) : bool
IntlCalendar::intlcal_create_instance ([ mixed $timeZone = NULL [, string $locale = "" ]] ) : IntlCalendar
IntlCalendar::intlcal_equals ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlCalendar::intlcal_field_difference ( IntlCalendar $cal , float $when , int $field ) : int
IntlCalendar::intlcal_from_date_time ( mixed $dateTime ) : IntlCalendar
IntlCalendar::intlcal_get ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_actual_maximum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_actual_minimum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_available_locales ( void ) : array
IntlCalendar::intlcal_get_day_of_week_type ( IntlCalendar $cal , int $dayOfWeek ) : int
IntlCalendar::intlcal_get_first_day_of_week ( IntlCalendar $cal ) : int
IntlCalendar::intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_keyword_values_for_locale ( string $key , string $locale , bool $commonlyUsed ) : Iterator
IntlCalendar::intlcal_get_least_maximum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_locale ( IntlCalendar $cal , int $localeType ) : string
IntlCalendar::intlcal_get_maximum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal ) : int
IntlCalendar::intlcal_get_minimum ( IntlCalendar $cal , int $field ) : int
IntlCalendar::intlcal_get_now ( void ) : float
IntlCalendar::intlcal_get_repeated_wall_time_option ( IntlCalendar $cal ) : int
IntlCalendar::intlcal_get_skipped_wall_time_option ( IntlCalendar $cal ) : int
IntlCalendar::intlcal_get_time ( IntlCalendar $cal ) : float
IntlCalendar::intlcal_get_time_zone ( IntlCalendar $cal ) : IntlTimeZone
IntlCalendar::intlcal_get_type ( IntlCalendar $cal ) : string
IntlCalendar::intlcal_get_weekend_transition ( IntlCalendar $cal , string $dayOfWeek ) : int
IntlCalendar::intlcal_in_daylight_time ( IntlCalendar $cal ) : bool
IntlCalendar::intlcal_is_equivalent_to ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlCalendar::intlcal_is_lenient ( IntlCalendar $cal ) : bool
IntlCalendar::intlcal_is_set ( IntlCalendar $cal , int $field ) : bool
IntlCalendar::intlcal_is_weekend ( IntlCalendar $cal [, float $date = NULL ] ) : bool
IntlCalendar::intlcal_roll ( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown ) : bool
IntlCalendar::intlcal_set ( IntlCalendar $cal , int $field , int $value ) : bool
IntlCalendar::intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek ) : bool
IntlCalendar::intlcal_set_lenient ( IntlCalendar $cal , bool $isLenient ) : bool
IntlCalendar::intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool
IntlCalendar::intlcal_set_skipped_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool
IntlCalendar::intlcal_set_time ( IntlCalendar $cal , float $date ) : bool
IntlCalendar::intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone ) : bool
IntlCalendar::intlcal_to_date_time ( IntlCalendar $cal ) : DateTime
IntlCalendar::isEquivalentTo ( IntlCalendar $other ) : bool
IntlCalendar::isLenient ( void ) : bool
IntlCalendar::isSet ( int $field ) : bool
IntlCalendar::isWeekend ([ float $date = NULL ] ) : bool
IntlCalendar::roll ( int $field , mixed $amountOrUpOrDown ) : bool
IntlCalendar::set ( int $field , int $value ) : bool [:OR:] ( int $year , int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL ]]]] ) : bool
IntlCalendar::setFirstDayOfWeek ( int $dayOfWeek ) : bool
IntlCalendar::setLenient ( bool $isLenient ) : bool
IntlCalendar::setMinimalDaysInFirstWeek ( int $minimalDays ) : bool
IntlCalendar::setRepeatedWallTimeOption ( int $wallTimeOption ) : bool
IntlCalendar::setSkippedWallTimeOption ( int $wallTimeOption ) : bool
IntlCalendar::setTime ( float $date ) : bool
IntlCalendar::setTimeZone ( mixed $timeZone ) : bool
IntlCalendar::toDateTime ( void ) : DateTime
IntlCalendar::__construct ( void )
IntlChar::charAge ( mixed $codepoint ) : array
IntlChar::charDigitValue ( mixed $codepoint ) : int
IntlChar::charDirection ( mixed $codepoint ) : int
IntlChar::charFromName ( string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] ) : int
IntlChar::charMirror ( mixed $codepoint ) : mixed
IntlChar::charName ( mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] ) : string
IntlChar::charType ( mixed $codepoint ) : int
IntlChar::chr ( mixed $codepoint ) : string
IntlChar::digit ( string $codepoint [, int $radix = 10 ] ) : int
IntlChar::enumCharNames ( mixed $start , mixed $limit , callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] ) : void
IntlChar::enumCharTypes ( callable $callback ) : void
IntlChar::foldCase ( mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT ] ) : mixed
IntlChar::forDigit ( int $digit [, int $radix = 10 ] ) : int
IntlChar::getBidiPairedBracket ( mixed $codepoint ) : mixed
IntlChar::getBlockCode ( mixed $codepoint ) : int
IntlChar::getCombiningClass ( mixed $codepoint ) : int
IntlChar::getFC_NFKC_Closure ( mixed $codepoint ) : string
IntlChar::getIntPropertyMaxValue ( int $property ) : int
IntlChar::getIntPropertyMinValue ( int $property ) : int
IntlChar::getIntPropertyValue ( mixed $codepoint , int $property ) : int
IntlChar::getNumericValue ( mixed $codepoint ) : float
IntlChar::getPropertyEnum ( string $alias ) : int
IntlChar::getPropertyName ( int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] ) : string
IntlChar::getPropertyValueEnum ( int $property , string $name ) : int
IntlChar::getPropertyValueName ( int $property , int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] ) : string
IntlChar::getUnicodeVersion ( void ) : array
IntlChar::hasBinaryProperty ( mixed $codepoint , int $property ) : bool
IntlChar::isalnum ( mixed $codepoint ) : bool
IntlChar::isalpha ( mixed $codepoint ) : bool
IntlChar::isbase ( mixed $codepoint ) : bool
IntlChar::isblank ( mixed $codepoint ) : bool
IntlChar::iscntrl ( mixed $codepoint ) : bool
IntlChar::isdefined ( mixed $codepoint ) : bool
IntlChar::isdigit ( mixed $codepoint ) : bool
IntlChar::isgraph ( mixed $codepoint ) : bool
IntlChar::isIDIgnorable ( mixed $codepoint ) : bool
IntlChar::isIDPart ( mixed $codepoint ) : bool
IntlChar::isIDStart ( mixed $codepoint ) : bool
IntlChar::isISOControl ( mixed $codepoint ) : bool
IntlChar::isJavaIDPart ( mixed $codepoint ) : bool
IntlChar::isJavaIDStart ( mixed $codepoint ) : bool
IntlChar::isJavaSpaceChar ( mixed $codepoint ) : bool
IntlChar::islower ( mixed $codepoint ) : bool
IntlChar::isMirrored ( mixed $codepoint ) : bool
IntlChar::isprint ( mixed $codepoint ) : bool
IntlChar::ispunct ( mixed $codepoint ) : bool
IntlChar::isspace ( mixed $codepoint ) : bool
IntlChar::istitle ( mixed $codepoint ) : bool
IntlChar::isUAlphabetic ( mixed $codepoint ) : bool
IntlChar::isULowercase ( mixed $codepoint ) : bool
IntlChar::isupper ( mixed $codepoint ) : bool
IntlChar::isUUppercase ( mixed $codepoint ) : bool
IntlChar::isUWhiteSpace ( mixed $codepoint ) : bool
IntlChar::isWhitespace ( mixed $codepoint ) : bool
IntlChar::isxdigit ( mixed $codepoint ) : bool
IntlChar::ord ( mixed $character ) : int
IntlChar::tolower ( mixed $codepoint ) : mixed
IntlChar::totitle ( mixed $codepoint ) : mixed
IntlChar::toupper ( mixed $codepoint ) : mixed
IntlCodePointBreakIterator::createCharacterInstance ([ string $locale ] ) : IntlBreakIterator
IntlCodePointBreakIterator::createCodePointInstance ( void ) : IntlBreakIterator
IntlCodePointBreakIterator::createLineInstance ([ string $locale ] ) : IntlBreakIterator
IntlCodePointBreakIterator::createSentenceInstance ([ string $locale ] ) : IntlBreakIterator
IntlCodePointBreakIterator::createTitleInstance ([ string $locale ] ) : IntlBreakIterator
IntlCodePointBreakIterator::createWordInstance ([ string $locale ] ) : IntlBreakIterator
IntlCodePointBreakIterator::current ( void ) : int
IntlCodePointBreakIterator::first ( void ) : int
IntlCodePointBreakIterator::following ( int $offset ) : int
IntlCodePointBreakIterator::getErrorCode ( void ) : int
IntlCodePointBreakIterator::getErrorMessage ( void ) : string
IntlCodePointBreakIterator::getLastCodePoint ( void ) : int
IntlCodePointBreakIterator::getLocale ( string $locale_type ) : string
IntlCodePointBreakIterator::getPartsIterator ([ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL ] ) : IntlPartsIterator
IntlCodePointBreakIterator::getText ( void ) : string
IntlCodePointBreakIterator::intl_get_error_code ( void ) : int
IntlCodePointBreakIterator::intl_get_error_message ( void ) : string
IntlCodePointBreakIterator::isBoundary ( int $offset ) : bool
IntlCodePointBreakIterator::last ( void ) : int
IntlCodePointBreakIterator::next ([ int $offset ] ) : int
IntlCodePointBreakIterator::preceding ( int $offset ) : int
IntlCodePointBreakIterator::previous ( void ) : int
IntlCodePointBreakIterator::setText ( string $text ) : bool
IntlCodePointBreakIterator::__construct ( void )
IntlDateFormatter::create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] ) : IntlDateFormatter
IntlDateFormatter::format ( mixed $value ) : string
IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] ) : string
IntlDateFormatter::getCalendar ( void ) : int
IntlDateFormatter::getCalendarObject ( void ) : IntlCalendar
IntlDateFormatter::getDateType ( void ) : int
IntlDateFormatter::getErrorCode ( void ) : int
IntlDateFormatter::getErrorMessage ( void ) : string
IntlDateFormatter::getLocale ([ int $which ] ) : string
IntlDateFormatter::getPattern ( void ) : string
IntlDateFormatter::getTimeType ( void ) : int
IntlDateFormatter::getTimeZone ( void ) : IntlTimeZone
IntlDateFormatter::getTimeZoneId ( void ) : string
IntlDateFormatter::isLenient ( void ) : bool
IntlDateFormatter::localtime ( string $value [, int &$position ] ) : array
IntlDateFormatter::parse ( string $value [, int &$position ] ) : int
IntlDateFormatter::setCalendar ( mixed $which ) : bool
IntlDateFormatter::setLenient ( bool $lenient ) : bool
IntlDateFormatter::setPattern ( string $pattern ) : bool
IntlDateFormatter::setTimeZone ( mixed $zone ) : bool
IntlDateFormatter::setTimeZoneId ( string $zone ) : bool
IntlDateFormatter::__construct ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
IntlException::getCode ( void ) : mixed
IntlException::getFile ( void ) : string
IntlException::getLine ( void ) : int
IntlException::getMessage ( void ) : string
IntlException::getPrevious ( void ) : Throwable
IntlException::getTrace ( void ) : array
IntlException::getTraceAsString ( void ) : string
IntlException::__clone ( void ) : void
IntlException::__toString ( void ) : string
IntlGregorianCalendar::add ( int $field , int $amount ) : bool
IntlGregorianCalendar::after ( IntlCalendar $other ) : bool
IntlGregorianCalendar::before ( IntlCalendar $other ) : bool
IntlGregorianCalendar::clear ([ int $field = NULL ] ) : bool
IntlGregorianCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = "" ]] ) : IntlCalendar
IntlGregorianCalendar::equals ( IntlCalendar $other ) : bool
IntlGregorianCalendar::fieldDifference ( float $when , int $field ) : int
IntlGregorianCalendar::fromDateTime ( mixed $dateTime ) : IntlCalendar
IntlGregorianCalendar::get ( int $field ) : int
IntlGregorianCalendar::getActualMaximum ( int $field ) : int
IntlGregorianCalendar::getActualMinimum ( int $field ) : int
IntlGregorianCalendar::getAvailableLocales ( void ) : array
IntlGregorianCalendar::getDayOfWeekType ( int $dayOfWeek ) : int
IntlGregorianCalendar::getErrorCode ( void ) : int
IntlGregorianCalendar::getErrorMessage ( void ) : string
IntlGregorianCalendar::getFirstDayOfWeek ( void ) : int
IntlGregorianCalendar::getGreatestMinimum ( int $field ) : int
IntlGregorianCalendar::getGregorianChange ( void ) : float
IntlGregorianCalendar::getKeywordValuesForLocale ( string $key , string $locale , bool $commonlyUsed ) : Iterator
IntlGregorianCalendar::getLeastMaximum ( int $field ) : int
IntlGregorianCalendar::getLocale ( int $localeType ) : string
IntlGregorianCalendar::getMaximum ( int $field ) : int
IntlGregorianCalendar::getMinimalDaysInFirstWeek ( void ) : int
IntlGregorianCalendar::getMinimum ( int $field ) : int
IntlGregorianCalendar::getNow ( void ) : float
IntlGregorianCalendar::getRepeatedWallTimeOption ( void ) : int
IntlGregorianCalendar::getSkippedWallTimeOption ( void ) : int
IntlGregorianCalendar::getTime ( void ) : float
IntlGregorianCalendar::getTimeZone ( void ) : IntlTimeZone
IntlGregorianCalendar::getType ( void ) : string
IntlGregorianCalendar::getWeekendTransition ( string $dayOfWeek ) : int
IntlGregorianCalendar::inDaylightTime ( void ) : bool
IntlGregorianCalendar::intlcal_add ( IntlCalendar $cal , int $field , int $amount ) : bool
IntlGregorianCalendar::intlcal_after ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlGregorianCalendar::intlcal_before ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlGregorianCalendar::intlcal_clear ( IntlCalendar $cal [, int $field = NULL ] ) : bool
IntlGregorianCalendar::intlcal_create_instance ([ mixed $timeZone = NULL [, string $locale = "" ]] ) : IntlCalendar
IntlGregorianCalendar::intlcal_equals ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlGregorianCalendar::intlcal_field_difference ( IntlCalendar $cal , float $when , int $field ) : int
IntlGregorianCalendar::intlcal_from_date_time ( mixed $dateTime ) : IntlCalendar
IntlGregorianCalendar::intlcal_get ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_actual_maximum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_actual_minimum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_available_locales ( void ) : array
IntlGregorianCalendar::intlcal_get_day_of_week_type ( IntlCalendar $cal , int $dayOfWeek ) : int
IntlGregorianCalendar::intlcal_get_first_day_of_week ( IntlCalendar $cal ) : int
IntlGregorianCalendar::intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_keyword_values_for_locale ( string $key , string $locale , bool $commonlyUsed ) : Iterator
IntlGregorianCalendar::intlcal_get_least_maximum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_locale ( IntlCalendar $cal , int $localeType ) : string
IntlGregorianCalendar::intlcal_get_maximum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal ) : int
IntlGregorianCalendar::intlcal_get_minimum ( IntlCalendar $cal , int $field ) : int
IntlGregorianCalendar::intlcal_get_now ( void ) : float
IntlGregorianCalendar::intlcal_get_repeated_wall_time_option ( IntlCalendar $cal ) : int
IntlGregorianCalendar::intlcal_get_skipped_wall_time_option ( IntlCalendar $cal ) : int
IntlGregorianCalendar::intlcal_get_time ( IntlCalendar $cal ) : float
IntlGregorianCalendar::intlcal_get_time_zone ( IntlCalendar $cal ) : IntlTimeZone
IntlGregorianCalendar::intlcal_get_type ( IntlCalendar $cal ) : string
IntlGregorianCalendar::intlcal_get_weekend_transition ( IntlCalendar $cal , string $dayOfWeek ) : int
IntlGregorianCalendar::intlcal_in_daylight_time ( IntlCalendar $cal ) : bool
IntlGregorianCalendar::intlcal_is_equivalent_to ( IntlCalendar $cal , IntlCalendar $other ) : bool
IntlGregorianCalendar::intlcal_is_lenient ( IntlCalendar $cal ) : bool
IntlGregorianCalendar::intlcal_is_set ( IntlCalendar $cal , int $field ) : bool
IntlGregorianCalendar::intlcal_is_weekend ( IntlCalendar $cal [, float $date = NULL ] ) : bool
IntlGregorianCalendar::intlcal_roll ( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown ) : bool
IntlGregorianCalendar::intlcal_set ( IntlCalendar $cal , int $field , int $value ) : bool
IntlGregorianCalendar::intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek ) : bool
IntlGregorianCalendar::intlcal_set_lenient ( IntlCalendar $cal , bool $isLenient ) : bool
IntlGregorianCalendar::intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool
IntlGregorianCalendar::intlcal_set_skipped_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool
IntlGregorianCalendar::intlcal_set_time ( IntlCalendar $cal , float $date ) : bool
IntlGregorianCalendar::intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone ) : bool
IntlGregorianCalendar::intlcal_to_date_time ( IntlCalendar $cal ) : DateTime
IntlGregorianCalendar::isEquivalentTo ( IntlCalendar $other ) : bool
IntlGregorianCalendar::isLeapYear ( int $year ) : bool
IntlGregorianCalendar::isLenient ( void ) : bool
IntlGregorianCalendar::isSet ( int $field ) : bool
IntlGregorianCalendar::isWeekend ([ float $date = NULL ] ) : bool
IntlGregorianCalendar::roll ( int $field , mixed $amountOrUpOrDown ) : bool
IntlGregorianCalendar::set ( int $field , int $value ) : bool
IntlGregorianCalendar::setFirstDayOfWeek ( int $dayOfWeek ) : bool
IntlGregorianCalendar::setGregorianChange ( float $date ) : bool
IntlGregorianCalendar::setLenient ( bool $isLenient ) : bool
IntlGregorianCalendar::setMinimalDaysInFirstWeek ( int $minimalDays ) : bool
IntlGregorianCalendar::setRepeatedWallTimeOption ( int $wallTimeOption ) : bool
IntlGregorianCalendar::setSkippedWallTimeOption ( int $wallTimeOption ) : bool
IntlGregorianCalendar::setTime ( float $date ) : bool
IntlGregorianCalendar::setTimeZone ( mixed $timeZone ) : bool
IntlGregorianCalendar::toDateTime ( void ) : DateTime
IntlGregorianCalendar::__construct ([ IntlTimeZone $tz [, string $locale ]] )
IntlIterator::current ( void ) : mixed
IntlIterator::key ( void ) : string
IntlIterator::next ( void ) : void
IntlIterator::rewind ( void ) : void
IntlIterator::valid ( void ) : bool
IntlPartsIterator::current ( void ) : mixed
IntlPartsIterator::getBreakIterator ( void ) : IntlBreakIterator
IntlPartsIterator::key ( void ) : string
IntlPartsIterator::next ( void ) : void
IntlPartsIterator::rewind ( void ) : void
IntlPartsIterator::valid ( void ) : bool
IntlRuleBasedBreakIterator::createCharacterInstance ([ string $locale ] ) : IntlBreakIterator
IntlRuleBasedBreakIterator::createCodePointInstance ( void ) : IntlBreakIterator
IntlRuleBasedBreakIterator::createLineInstance ([ string $locale ] ) : IntlBreakIterator
IntlRuleBasedBreakIterator::createSentenceInstance ([ string $locale ] ) : IntlBreakIterator
IntlRuleBasedBreakIterator::createTitleInstance ([ string $locale ] ) : IntlBreakIterator
IntlRuleBasedBreakIterator::createWordInstance ([ string $locale ] ) : IntlBreakIterator
IntlRuleBasedBreakIterator::current ( void ) : int
IntlRuleBasedBreakIterator::first ( void ) : int
IntlRuleBasedBreakIterator::following ( int $offset ) : int
IntlRuleBasedBreakIterator::getBinaryRules ( void ) : string
IntlRuleBasedBreakIterator::getErrorCode ( void ) : int
IntlRuleBasedBreakIterator::getErrorMessage ( void ) : string
IntlRuleBasedBreakIterator::getLocale ( string $locale_type ) : string
IntlRuleBasedBreakIterator::getPartsIterator ([ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL ] ) : IntlPartsIterator
IntlRuleBasedBreakIterator::getRules ( void ) : string
IntlRuleBasedBreakIterator::getRuleStatus ( void ) : int
IntlRuleBasedBreakIterator::getRuleStatusVec ( void ) : array
IntlRuleBasedBreakIterator::getText ( void ) : string
IntlRuleBasedBreakIterator::intl_get_error_code ( void ) : int
IntlRuleBasedBreakIterator::intl_get_error_message ( void ) : string
IntlRuleBasedBreakIterator::isBoundary ( int $offset ) : bool
IntlRuleBasedBreakIterator::last ( void ) : int
IntlRuleBasedBreakIterator::next ([ int $offset ] ) : int
IntlRuleBasedBreakIterator::preceding ( int $offset ) : int
IntlRuleBasedBreakIterator::previous ( void ) : int
IntlRuleBasedBreakIterator::setText ( string $text ) : bool
IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )
IntlTimeZone::countEquivalentIDs ( string $zoneId ) : int
IntlTimeZone::createDefault ( void ) : IntlTimeZone
IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] ) : IntlIterator
IntlTimeZone::createTimeZone ( string $zoneId ) : IntlTimeZone
IntlTimeZone::createTimeZoneIDEnumeration ( int $zoneType [, string $region [, int $rawOffset ]] ) : IntlIterator
IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId ) : IntlTimeZone
IntlTimeZone::getCanonicalID ( string $zoneId [, bool &$isSystemID ] ) : string
IntlTimeZone::getDisplayName ([ bool $isDaylight [, int $style [, string $locale ]]] ) : string
IntlTimeZone::getDSTSavings ( void ) : int
IntlTimeZone::getEquivalentID ( string $zoneId , int $index ) : string
IntlTimeZone::getErrorCode ( void ) : int
IntlTimeZone::getErrorMessage ( void ) : string
IntlTimeZone::getGMT ( void ) : IntlTimeZone
IntlTimeZone::getID ( void ) : string
IntlTimeZone::getIDForWindowsID ( string $timezone [, string $region ] ) : string
IntlTimeZone::getOffset ( float $date , bool $local , int &$rawOffset , int &$dstOffset ) : int
IntlTimeZone::getRawOffset ( void ) : int
IntlTimeZone::getRegion ( string $zoneId ) : string
IntlTimeZone::getTZDataVersion ( void ) : string
IntlTimeZone::getUnknown ( void ) : IntlTimeZone
IntlTimeZone::getWindowsID ( string $timezone ) : string
IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone ) : bool
IntlTimeZone::toDateTimeZone ( void ) : DateTimeZone
IntlTimeZone::useDaylightTime ( void ) : bool
InvalidArgumentException::getCode ( void ) : mixed
InvalidArgumentException::getFile ( void ) : string
InvalidArgumentException::getLine ( void ) : int
InvalidArgumentException::getMessage ( void ) : string
InvalidArgumentException::getPrevious ( void ) : Throwable
InvalidArgumentException::getTrace ( void ) : array
InvalidArgumentException::getTraceAsString ( void ) : string
InvalidArgumentException::__clone ( void ) : void
InvalidArgumentException::__toString ( void ) : string
Iterator::current ( void ) : mixed
Iterator::key ( void ) : scalar
Iterator::next ( void ) : void
Iterator::rewind ( void ) : void
Iterator::valid ( void ) : bool
IteratorAggregate::getIterator ( void ) : Traversable
IteratorIterator::current ( void ) : mixed
IteratorIterator::getInnerIterator ( void ) : Traversable
IteratorIterator::key ( void ) : mixed
IteratorIterator::next ( void ) : void
IteratorIterator::rewind ( void ) : void
IteratorIterator::valid ( void ) : bool
IteratorIterator::__construct ( Traversable $iterator )
JsonException::getCode ( void ) : mixed
JsonException::getFile ( void ) : string
JsonException::getLine ( void ) : int
JsonException::getMessage ( void ) : string
JsonException::getPrevious ( void ) : Throwable
JsonException::getTrace ( void ) : array
JsonException::getTraceAsString ( void ) : string
JsonException::__clone ( void ) : void
JsonException::__toString ( void ) : string
JsonSerializable::jsonSerialize ( void ) : mixed
Judy::byCount ( int $nth_index ) : int
Judy::count ([ int $index_start = 0 [, int $index_end = -1 ]] ) : int
Judy::first ([ mixed $index ] ) : mixed
Judy::firstEmpty ([ mixed $index = 0 ] ) : int
Judy::free ( void ) : int
Judy::getType ( void ) : int
Judy::last ([ string $index ] ) : void
Judy::lastEmpty ([ int $index = -1 ] ) : int
Judy::memoryUsage ( void ) : int
Judy::next ( mixed $index ) : mixed
Judy::nextEmpty ( int $index ) : int
Judy::offsetExists ( mixed $offset ) : bool
Judy::offsetGet ( mixed $offset ) : mixed
Judy::offsetSet ( mixed $offset , mixed $value ) : bool
Judy::offsetUnset ( mixed $offset ) : bool
Judy::prev ( mixed $index ) : mixed
Judy::prevEmpty ( mixed $index ) : int
Judy::size ( void ) : void
Judy::__construct ( int $judy_type )
Judy::__destruct ( void ) : void
KTaglib_ID3v2_AttachedPictureFrame::getAlbum ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getArtist ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getComment ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getDescription ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getGenre ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getMimeType ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getSize ( void ) : int
KTaglib_ID3v2_AttachedPictureFrame::getTitle ( void ) : string
KTaglib_ID3v2_AttachedPictureFrame::getTrack ( void ) : int
KTaglib_ID3v2_AttachedPictureFrame::getType ( void ) : int
KTaglib_ID3v2_AttachedPictureFrame::getYear ( void ) : int
KTaglib_ID3v2_AttachedPictureFrame::isEmpty ( void ) : bool
KTaglib_ID3v2_AttachedPictureFrame::savePicture ( string $filename ) : bool
KTaglib_ID3v2_AttachedPictureFrame::setPicture ( string $filename ) : void
KTaglib_ID3v2_AttachedPictureFrame::setType ( int $type ) : void
KTaglib_ID3v2_AttachedPictureFrame::__toString ( void ) : string
KTaglib_ID3v2_Frame::getAlbum ( void ) : string
KTaglib_ID3v2_Frame::getArtist ( void ) : string
KTaglib_ID3v2_Frame::getComment ( void ) : string
KTaglib_ID3v2_Frame::getGenre ( void ) : string
KTaglib_ID3v2_Frame::getSize ( void ) : int
KTaglib_ID3v2_Frame::getTitle ( void ) : string
KTaglib_ID3v2_Frame::getTrack ( void ) : int
KTaglib_ID3v2_Frame::getYear ( void ) : int
KTaglib_ID3v2_Frame::isEmpty ( void ) : bool
KTaglib_ID3v2_Frame::__toString ( void ) : string
KTaglib_ID3v2_Tag::addFrame ( KTaglib_ID3v2_Frame $frame ) : bool
KTaglib_ID3v2_Tag::getAlbum ( void ) : string
KTaglib_ID3v2_Tag::getArtist ( void ) : string
KTaglib_ID3v2_Tag::getComment ( void ) : string
KTaglib_ID3v2_Tag::getFrameList ( void ) : array
KTaglib_ID3v2_Tag::getGenre ( void ) : string
KTaglib_ID3v2_Tag::getTitle ( void ) : string
KTaglib_ID3v2_Tag::getTrack ( void ) : int
KTaglib_ID3v2_Tag::getYear ( void ) : int
KTaglib_ID3v2_Tag::isEmpty ( void ) : bool
KTaglib_MPEG_AudioProperties::getBitrate ( void ) : int
KTaglib_MPEG_AudioProperties::getChannels ( void ) : int
KTaglib_MPEG_AudioProperties::getLayer ( void ) : int
KTaglib_MPEG_AudioProperties::getLength ( void ) : int
KTaglib_MPEG_AudioProperties::getSampleBitrate ( void ) : int
KTaglib_MPEG_AudioProperties::getVersion ( void ) : int
KTaglib_MPEG_AudioProperties::isCopyrighted ( void ) : bool
KTaglib_MPEG_AudioProperties::isOriginal ( void ) : bool
KTaglib_MPEG_AudioProperties::isProtectionEnabled ( void ) : bool
KTaglib_MPEG_File::getAudioProperties ( void ) : KTaglib_MPEG_File
KTaglib_MPEG_File::getID3v1Tag ([ bool $create = FALSE ] ) : KTaglib_ID3v1_Tag
KTaglib_MPEG_File::getID3v2Tag ([ bool $create = FALSE ] ) : KTaglib_ID3v2_Tag
KTaglib_Tag::getAlbum ( void ) : string
KTaglib_Tag::getArtist ( void ) : string
KTaglib_Tag::getComment ( void ) : string
KTaglib_Tag::getGenre ( void ) : string
KTaglib_Tag::getTitle ( void ) : string
KTaglib_Tag::getTrack ( void ) : int
KTaglib_Tag::getYear ( void ) : int
KTaglib_Tag::isEmpty ( void ) : bool
Lapack::eigenValues ( array $a [, array $left [, array $right ]] ) : array
Lapack::identity ( int $n ) : array
Lapack::leastSquaresByFactorisation ( array $a , array $b ) : array
Lapack::leastSquaresBySVD ( array $a , array $b ) : array
Lapack::pseudoInverse ( array $a ) : array
Lapack::singularValues ( array $a ) : array
Lapack::solveLinearEquation ( array $a , array $b ) : array
lapackexception::getCode ( void ) : mixed
lapackexception::getFile ( void ) : string
lapackexception::getLine ( void ) : int
lapackexception::getMessage ( void ) : string
lapackexception::getPrevious ( void ) : Throwable
lapackexception::getTrace ( void ) : array
lapackexception::getTraceAsString ( void ) : string
lapackexception::__clone ( void ) : void
lapackexception::__toString ( void ) : string
LengthException::getCode ( void ) : mixed
LengthException::getFile ( void ) : string
LengthException::getLine ( void ) : int
LengthException::getMessage ( void ) : string
LengthException::getPrevious ( void ) : Throwable
LengthException::getTrace ( void ) : array
LengthException::getTraceAsString ( void ) : string
LengthException::__clone ( void ) : void
LengthException::__toString ( void ) : string
LimitIterator::current ( void ) : mixed
LimitIterator::getInnerIterator ( void ) : Iterator
LimitIterator::getPosition ( void ) : int
LimitIterator::key ( void ) : mixed
LimitIterator::next ( void ) : void
LimitIterator::rewind ( void ) : void
LimitIterator::seek ( int $position ) : int
LimitIterator::valid ( void ) : bool
LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )
Locale::acceptFromHttp ( string $header ) : string
Locale::canonicalize ( string $locale ) : string
Locale::composeLocale ( array $subtags ) : string
Locale::filterMatches ( string $langtag , string $locale [, bool $canonicalize = FALSE ] ) : bool
Locale::getAllVariants ( string $locale ) : array
Locale::getDefault ( void ) : string
Locale::getDisplayLanguage ( string $locale [, string $in_locale ] ) : string
Locale::getDisplayName ( string $locale [, string $in_locale ] ) : string
Locale::getDisplayRegion ( string $locale [, string $in_locale ] ) : string
Locale::getDisplayScript ( string $locale [, string $in_locale ] ) : string
Locale::getDisplayVariant ( string $locale [, string $in_locale ] ) : string
Locale::getKeywords ( string $locale ) : array
Locale::getPrimaryLanguage ( string $locale ) : string
Locale::getRegion ( string $locale ) : string
Locale::getScript ( string $locale ) : string
Locale::lookup ( array $langtag , string $locale [, bool $canonicalize = FALSE [, string $default ]] ) : string
Locale::parseLocale ( string $locale ) : array
Locale::setDefault ( string $locale ) : bool
LogicException::getCode ( void ) : mixed
LogicException::getFile ( void ) : string
LogicException::getLine ( void ) : int
LogicException::getMessage ( void ) : string
LogicException::getPrevious ( void ) : Throwable
LogicException::getTrace ( void ) : array
LogicException::getTraceAsString ( void ) : string
LogicException::__clone ( void ) : void
LogicException::__toString ( void ) : string
Lua::assign ( string $name , string $value ) : mixed
Lua::call ( callable $lua_func [, array $args [, int $use_self = 0 ]] ) : mixed
Lua::eval ( string $statements ) : mixed
Lua::getVersion ( void ) : string
Lua::include ( string $file ) : mixed
Lua::registerCallback ( string $name , callable $function ) : mixed
Lua::__call ( callable $lua_func [, array $args [, int $use_self = 0 ]] ) : mixed
Lua::__construct ( string $lua_script_file = NULL )
LuaClosure::__invoke ([ mixed $... ] ) : void
Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] ) : bool
Memcache::addServer ( string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]] ) : bool
Memcache::close ( void ) : bool
Memcache::connect ( string $host [, int $port [, int $timeout ]] ) : bool
Memcache::decrement ( string $key [, int $value = 1 ] ) : int
Memcache::delete ( string $key [, int $timeout = 0 ] ) : bool
Memcache::flush ( void ) : bool
Memcache::get ( string $key [, int &$flags ] ) : string [:OR:] ( array $keys [, array &$flags ] ) : string
Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit = 100 ]]] ) : array
Memcache::getServerStatus ( string $host [, int $port = 11211 ] ) : int
Memcache::getStats ([ string $type [, int $slabid [, int $limit = 100 ]]] ) : array
Memcache::getVersion ( void ) : string
Memcache::increment ( string $key [, int $value = 1 ] ) : int
Memcache::pconnect ( string $host [, int $port [, int $timeout ]] ) : mixed
Memcache::replace ( string $key , mixed $var [, int $flag [, int $expire ]] ) : bool
Memcache::set ( string $key , mixed $var [, int $flag [, int $expire ]] ) : bool
Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] ) : bool
Memcache::setServerParams ( string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = FALSE [, bool $status [, callable $failure_callback ]]]]] ) : bool
Memcached::add ( string $key , mixed $value [, int $expiration ] ) : bool
Memcached::addByKey ( string $server_key , string $key , mixed $value [, int $expiration ] ) : bool
Memcached::addServer ( string $host , int $port [, int $weight = 0 ] ) : bool
Memcached::addServers ( array $servers ) : bool
Memcached::append ( string $key , string $value ) : bool
Memcached::appendByKey ( string $server_key , string $key , string $value ) : bool
Memcached::cas ( float $cas_token , string $key , mixed $value [, int $expiration ] ) : bool
Memcached::casByKey ( float $cas_token , string $server_key , string $key , mixed $value [, int $expiration ] ) : bool
Memcached::decrement ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] ) : int
Memcached::decrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] ) : int
Memcached::delete ( string $key [, int $time = 0 ] ) : bool
Memcached::deleteByKey ( string $server_key , string $key [, int $time = 0 ] ) : bool
Memcached::deleteMulti ( array $keys [, int $time = 0 ] ) : array
Memcached::deleteMultiByKey ( string $server_key , array $keys [, int $time = 0 ] ) : bool
Memcached::fetch ( void ) : array
Memcached::fetchAll ( void ) : array
Memcached::flush ([ int $delay = 0 ] ) : bool
Memcached::get ( string $key [, callable $cache_cb [, int $$flags ]] ) : mixed
Memcached::getAllKeys ( void ) : array
Memcached::getByKey ( string $server_key , string $key [, callable $cache_cb [, int $flags ]] ) : mixed
Memcached::getDelayed ( array $keys [, bool $with_cas [, callable $value_cb ]] ) : bool
Memcached::getDelayedByKey ( string $server_key , array $keys [, bool $with_cas [, callable $value_cb ]] ) : bool
Memcached::getMulti ( array $keys [, int $flags ] ) : mixed
Memcached::getMultiByKey ( string $server_key , array $keys [, int $flags ] ) : array
Memcached::getOption ( int $option ) : mixed
Memcached::getResultCode ( void ) : int
Memcached::getResultMessage ( void ) : string
Memcached::getServerByKey ( string $server_key ) : array
Memcached::getServerList ( void ) : array
Memcached::getStats ( void ) : array
Memcached::getVersion ( void ) : array
Memcached::increment ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] ) : int
Memcached::incrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] ) : int
Memcached::isPersistent ( void ) : bool
Memcached::isPristine ( void ) : bool
Memcached::prepend ( string $key , string $value ) : bool
Memcached::prependByKey ( string $server_key , string $key , string $value ) : bool
Memcached::quit ( void ) : bool
Memcached::replace ( string $key , mixed $value [, int $expiration ] ) : bool
Memcached::replaceByKey ( string $server_key , string $key , mixed $value [, int $expiration ] ) : bool
Memcached::resetServerList ( void ) : bool
Memcached::set ( string $key , mixed $value [, int $expiration ] ) : bool
Memcached::setByKey ( string $server_key , string $key , mixed $value [, int $expiration ] ) : bool
Memcached::setMulti ( array $items [, int $expiration ] ) : bool
Memcached::setMultiByKey ( string $server_key , array $items [, int $expiration ] ) : bool
Memcached::setOption ( int $option , mixed $value ) : bool
Memcached::setOptions ( array $options ) : bool
Memcached::setSaslAuthData ( string $username , string $password ) : void
Memcached::touch ( string $key , int $expiration ) : bool
Memcached::touchByKey ( string $server_key , string $key , int $expiration ) : bool
Memcached::__construct ([ string $persistent_id ] )
MemcachedException::getCode ( void ) : mixed
MemcachedException::getFile ( void ) : string
MemcachedException::getLine ( void ) : int
MemcachedException::getMessage ( void ) : string
MemcachedException::getPrevious ( void ) : Throwable
MemcachedException::getTrace ( void ) : array
MemcachedException::getTraceAsString ( void ) : string
MemcachedException::__clone ( void ) : void
MemcachedException::__toString ( void ) : string
MessageFormatter::create ( string $locale , string $pattern ) : MessageFormatter
MessageFormatter::format ( array $args ) : string
MessageFormatter::formatMessage ( string $locale , string $pattern , array $args ) : string
MessageFormatter::getErrorCode ( void ) : int
MessageFormatter::getErrorMessage ( void ) : string
MessageFormatter::getLocale ( void ) : string
MessageFormatter::getPattern ( void ) : string
MessageFormatter::parse ( string $value ) : array
MessageFormatter::parseMessage ( string $locale , string $pattern , string $source ) : array
MessageFormatter::setPattern ( string $pattern ) : bool
MessageFormatter::__construct ( string $locale , string $pattern )
Mongo::close ([ boolean|string $connection ] ) : bool
Mongo::connect ( void ) : bool
Mongo::connectUtil ( void ) : bool
Mongo::dropDB ( mixed $db ) : array
Mongo::getConnections ( void ) : array
Mongo::getHosts ( void ) : array
Mongo::getPoolSize ( void ) : int
Mongo::getReadPreference ( void ) : array
Mongo::getSlave ( void ) : string
Mongo::getSlaveOkay ( void ) : bool
Mongo::getWriteConcern ( void ) : array
Mongo::killCursor ( string $server_hash , int|MongoInt64 $id ) : bool
Mongo::listDBs ( void ) : array
Mongo::poolDebug ( void ) : array
Mongo::selectCollection ( string $db , string $collection ) : MongoCollection
Mongo::selectDB ( string $name ) : MongoDB
Mongo::setPoolSize ( int $size ) : bool
Mongo::setReadPreference ( string $read_preference [, array $tags ] ) : bool
Mongo::setSlaveOkay ([ bool $ok = TRUE ] ) : bool
Mongo::setWriteConcern ( mixed $w [, int $wtimeout ] ) : bool
Mongo::switchSlave ( void ) : string
Mongo::__get ( string $dbname ) : MongoDB
Mongo::__toString ( void ) : string
MongoBinData::__construct ( string $data [, int $type = 0 ] )
MongoBinData::__toString ( void ) : string
MongoClient::close ([ boolean|string $connection ] ) : bool
MongoClient::connect ( void ) : bool
MongoClient::dropDB ( mixed $db ) : array
MongoClient::getConnections ( void ) : array
MongoClient::getHosts ( void ) : array
MongoClient::getReadPreference ( void ) : array
MongoClient::getWriteConcern ( void ) : array
MongoClient::killCursor ( string $server_hash , int|MongoInt64 $id ) : bool
MongoClient::listDBs ( void ) : array
MongoClient::selectCollection ( string $db , string $collection ) : MongoCollection
MongoClient::selectDB ( string $name ) : MongoDB
MongoClient::setReadPreference ( string $read_preference [, array $tags ] ) : bool
MongoClient::setWriteConcern ( mixed $w [, int $wtimeout ] ) : bool
MongoClient::__construct ([ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE ) [, array $driver_options ]]] )
MongoClient::__get ( string $dbname ) : MongoDB
MongoClient::__toString ( void ) : string
MongoCode::__construct ( string $code [, array $scope = array() ] )
MongoCode::__toString ( void ) : string
MongoCollection::aggregate ( array $pipeline [, array $options ] ) : array [:OR:] ( array $op [, array $op [, array $... ]] ) : array
MongoCollection::aggregateCursor ( array $command [, array $options ] ) : MongoCommandCursor
MongoCollection::batchInsert ( array $a [, array $options = array() ] ) : mixed
MongoCollection::count ([ array $query = array() [, array $options = array() ]] ) : int
MongoCollection::createDBRef ( mixed $document_or_id ) : array
MongoCollection::createIndex ( array $keys [, array $options = array() ] ) : bool
MongoCollection::deleteIndex ( string|array $keys ) : array
MongoCollection::deleteIndexes ( void ) : array
MongoCollection::distinct ( string $key [, array $query ] ) : array
MongoCollection::drop ( void ) : array
MongoCollection::ensureIndex ( string|array $key|keys [, array $options = array() ] ) : bool
MongoCollection::find ([ array $query = array() [, array $fields = array() ]] ) : MongoCursor
MongoCollection::findAndModify ( array $query [, array $update [, array $fields [, array $options ]]] ) : array
MongoCollection::findOne ([ array $query = array() [, array $fields = array() [, array $options = array() ]]] ) : array
MongoCollection::getDBRef ( array $ref ) : array
MongoCollection::getIndexInfo ( void ) : array
MongoCollection::getName ( void ) : string
MongoCollection::getReadPreference ( void ) : array
MongoCollection::getSlaveOkay ( void ) : bool
MongoCollection::getWriteConcern ( void ) : array
MongoCollection::group ( mixed $keys , array $initial , MongoCode $reduce [, array $options = array() ] ) : array
MongoCollection::insert ( array|object $document [, array $options = array() ] ) : bool
MongoCollection::parallelCollectionScan ( int $num_cursors ) : array
MongoCollection::remove ([ array $criteria = array() [, array $options = array() ]] ) : bool
MongoCollection::save ( array|object $document [, array $options = array() ] ) : mixed
MongoCollection::setReadPreference ( string $read_preference [, array $tags ] ) : bool
MongoCollection::setSlaveOkay ([ bool $ok = TRUE ] ) : bool
MongoCollection::setWriteConcern ( mixed $w [, int $wtimeout ] ) : bool
MongoCollection::toIndexString ( mixed $keys ) : string
MongoCollection::update ( array $criteria , array $new_object [, array $options = array() ] ) : bool
MongoCollection::validate ([ bool $scan_data = FALSE ] ) : array
MongoCollection::__construct ( MongoDB $db , string $name )
MongoCollection::__get ( string $name ) : MongoCollection
MongoCollection::__toString ( void ) : string
MongoCommandCursor::batchSize ( int $batchSize ) : MongoCommandCursor
MongoCommandCursor::createFromDocument ( MongoClient $connection , string $hash , array $document ) : MongoCommandCursor
MongoCommandCursor::current ( void ) : array
MongoCommandCursor::dead ( void ) : bool
MongoCommandCursor::getReadPreference ( void ) : array
MongoCommandCursor::info ( void ) : array
MongoCommandCursor::key ( void ) : int
MongoCommandCursor::next ( void ) : void
MongoCommandCursor::rewind ( void ) : array
MongoCommandCursor::setReadPreference ( string $read_preference [, array $tags ] ) : MongoCommandCursor
MongoCommandCursor::timeout ( int $ms ) : MongoCommandCursor
MongoCommandCursor::valid ( void ) : bool
MongoCommandCursor::__construct ( MongoClient $connection , string $ns , array $command = array() )
MongoCursor::addOption ( string $key , mixed $value ) : MongoCursor
MongoCursor::awaitData ([ bool $wait = TRUE ] ) : MongoCursor
MongoCursor::batchSize ( int $batchSize ) : MongoCursor
MongoCursor::count ([ bool $foundOnly = FALSE ] ) : int
MongoCursor::current ( void ) : array
MongoCursor::dead ( void ) : bool
MongoCursor::doQuery ( void ) : void
MongoCursor::explain ( void ) : array
MongoCursor::fields ( array $f ) : MongoCursor
MongoCursor::getNext ( void ) : array
MongoCursor::getReadPreference ( void ) : array
MongoCursor::hasNext ( void ) : bool
MongoCursor::hint ( mixed $index ) : MongoCursor
MongoCursor::immortal ([ bool $liveForever = TRUE ] ) : MongoCursor
MongoCursor::info ( void ) : array
MongoCursor::key ( void ) : string
MongoCursor::limit ( int $num ) : MongoCursor
MongoCursor::maxTimeMS ( int $ms ) : MongoCursor
MongoCursor::next ( void ) : array
MongoCursor::partial ([ bool $okay = TRUE ] ) : MongoCursor
MongoCursor::reset ( void ) : void
MongoCursor::rewind ( void ) : void
MongoCursor::setFlag ( int $flag [, bool $set = TRUE ] ) : MongoCursor
MongoCursor::setReadPreference ( string $read_preference [, array $tags ] ) : MongoCursor
MongoCursor::skip ( int $num ) : MongoCursor
MongoCursor::slaveOkay ([ bool $okay = TRUE ] ) : MongoCursor
MongoCursor::snapshot ( void ) : MongoCursor
MongoCursor::sort ( array $fields ) : MongoCursor
MongoCursor::tailable ([ bool $tail = TRUE ] ) : MongoCursor
MongoCursor::timeout ( int $ms ) : MongoCursor
MongoCursor::valid ( void ) : bool
MongoCursor::__construct ( MongoClient $connection , string $ns [, array $query = array() [, array $fields = array() ]] )
MongoCursorInterface::batchSize ( int $batchSize ) : MongoCursorInterface
MongoCursorInterface::current ( void ) : mixed
MongoCursorInterface::dead ( void ) : bool
MongoCursorInterface::getReadPreference ( void ) : array
MongoCursorInterface::info ( void ) : array
MongoCursorInterface::key ( void ) : scalar
MongoCursorInterface::next ( void ) : void
MongoCursorInterface::rewind ( void ) : void
MongoCursorInterface::setReadPreference ( string $read_preference [, array $tags ] ) : MongoCursorInterface
MongoCursorInterface::timeout ( int $ms ) : MongoCursorInterface
MongoCursorInterface::valid ( void ) : bool
MongoDate::toDateTime ( void ) : DateTime
MongoDate::__construct ([ int $sec = time() [, int $usec = 0 ]] )
MongoDate::__toString ( void ) : string
MongoDB::authenticate ( string $username , string $password ) : array
MongoDB::command ( array $command [, array $options = array() [, string &$hash ]] ) : array
MongoDB::createCollection ( string $name [, array $options ] ) : MongoCollection [:OR:] ( string $name [, bool $capped = FALSE [, int $size = 0 [, int $max = 0 ]]] ) : MongoCollection
MongoDB::createDBRef ( string $collection , mixed $document_or_id ) : array
MongoDB::drop ( void ) : array
MongoDB::dropCollection ( mixed $coll ) : array
MongoDB::execute ( mixed $code [, array $args = array() ] ) : array
MongoDB::forceError ( void ) : bool
MongoDB::getCollectionInfo ([ array $options = array() ] ) : array
MongoDB::getCollectionNames ([ array $options = array() ] ) : array
MongoDB::getDBRef ( array $ref ) : array
MongoDB::getGridFS ([ string $prefix = "fs" ] ) : MongoGridFS
MongoDB::getProfilingLevel ( void ) : int
MongoDB::getReadPreference ( void ) : array
MongoDB::getSlaveOkay ( void ) : bool
MongoDB::getWriteConcern ( void ) : array
MongoDB::lastError ( void ) : array
MongoDB::listCollections ([ array $options = array() ] ) : array
MongoDB::prevError ( void ) : array
MongoDB::repair ([ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE ]] ) : array
MongoDB::resetError ( void ) : array
MongoDB::selectCollection ( string $name ) : MongoCollection
MongoDB::setProfilingLevel ( int $level ) : int
MongoDB::setReadPreference ( string $read_preference [, array $tags ] ) : bool
MongoDB::setSlaveOkay ([ bool $ok = TRUE ] ) : bool
MongoDB::setWriteConcern ( mixed $w [, int $wtimeout ] ) : bool
MongoDB::__construct ( MongoClient $conn , string $name )
MongoDB::__get ( string $name ) : MongoCollection
MongoDB::__toString ( void ) : string
MongoDBRef::create ( string $collection , mixed $id [, string $database ] ) : array
MongoDBRef::get ( MongoDB $db , array $ref ) : array
MongoDBRef::isRef ( mixed $ref ) : bool
MongoDB\BSON\Binary::getData ( void ) : string
MongoDB\BSON\Binary::getType ( void ) : int
MongoDB\BSON\Binary::jsonSerialize ( void ) : mixed
MongoDB\BSON\Binary::serialize ( void ) : string
MongoDB\BSON\Binary::unserialize ( string $serialized ) : void
MongoDB\BSON\Binary::__construct ( string $data , int $type )
MongoDB\BSON\Binary::__toString ( void ) : string
MongoDB\BSON\BinaryInterface::getData ( void ) : string
MongoDB\BSON\BinaryInterface::getType ( void ) : int
MongoDB\BSON\BinaryInterface::__toString ( void ) : string
MongoDB\BSON\DBPointer::jsonSerialize ( void ) : mixed
MongoDB\BSON\DBPointer::serialize ( void ) : string
MongoDB\BSON\DBPointer::unserialize ( string $serialized ) : void
MongoDB\BSON\DBPointer::__construct ( void )
MongoDB\BSON\DBPointer::__toString ( void ) : string
MongoDB\BSON\Decimal128::jsonSerialize ( void ) : mixed
MongoDB\BSON\Decimal128::serialize ( void ) : string
MongoDB\BSON\Decimal128::unserialize ( string $serialized ) : void
MongoDB\BSON\Decimal128::__construct ([ string $value ] )
MongoDB\BSON\Decimal128::__toString ( void ) : string
MongoDB\BSON\Decimal128Interface::__toString ( void ) : string
MongoDB\BSON\Int64::jsonSerialize ( void ) : mixed
MongoDB\BSON\Int64::serialize ( void ) : string
MongoDB\BSON\Int64::unserialize ( string $serialized ) : void
MongoDB\BSON\Int64::__construct ( void )
MongoDB\BSON\Int64::__toString ( void ) : string
MongoDB\BSON\Javascript::getCode ( void ) : string
MongoDB\BSON\Javascript::getScope ( void ) : object
MongoDB\BSON\Javascript::jsonSerialize ( void ) : mixed
MongoDB\BSON\Javascript::serialize ( void ) : string
MongoDB\BSON\Javascript::unserialize ( string $serialized ) : void
MongoDB\BSON\Javascript::__construct ( string $code [, array|object $scope ] )
MongoDB\BSON\Javascript::__toString ( void ) : string
MongoDB\BSON\JavascriptInterface::getCode ( void ) : string
MongoDB\BSON\JavascriptInterface::getScope ( void ) : object
MongoDB\BSON\JavascriptInterface::__toString ( void ) : string
MongoDB\BSON\MaxKey::jsonSerialize ( void ) : mixed
MongoDB\BSON\MaxKey::serialize ( void ) : string
MongoDB\BSON\MaxKey::unserialize ( string $serialized ) : void
MongoDB\BSON\MaxKey::__construct ( void )
MongoDB\BSON\MinKey::jsonSerialize ( void ) : mixed
MongoDB\BSON\MinKey::serialize ( void ) : string
MongoDB\BSON\MinKey::unserialize ( string $serialized ) : void
MongoDB\BSON\MinKey::__construct ( void )
MongoDB\BSON\ObjectId::getTimestamp ( void ) : int
MongoDB\BSON\ObjectId::jsonSerialize ( void ) : mixed
MongoDB\BSON\ObjectId::serialize ( void ) : string
MongoDB\BSON\ObjectId::unserialize ( string $serialized ) : void
MongoDB\BSON\ObjectId::__construct ([ string $id ] )
MongoDB\BSON\ObjectId::__toString ( void ) : string
MongoDB\BSON\ObjectIdInterface::getTimestamp ( void ) : int
MongoDB\BSON\ObjectIdInterface::__toString ( void ) : string
MongoDB\BSON\Persistable::bsonSerialize ( void ) : array
MongoDB\BSON\Persistable::bsonUnserialize ( array $data ) : void
MongoDB\BSON\Regex::getFlags ( void ) : string
MongoDB\BSON\Regex::getPattern ( void ) : string
MongoDB\BSON\Regex::jsonSerialize ( void ) : mixed
MongoDB\BSON\Regex::serialize ( void ) : string
MongoDB\BSON\Regex::unserialize ( string $serialized ) : void
MongoDB\BSON\Regex::__construct ( string $pattern [, string $flags = "" ] )
MongoDB\BSON\Regex::__toString ( void ) : string
MongoDB\BSON\RegexInterface::getFlags ( void ) : string
MongoDB\BSON\RegexInterface::getPattern ( void ) : string
MongoDB\BSON\RegexInterface::__toString ( void ) : string
MongoDB\BSON\Serializable::bsonSerialize ( void ) : array
MongoDB\BSON\Symbol::jsonSerialize ( void ) : mixed
MongoDB\BSON\Symbol::serialize ( void ) : string
MongoDB\BSON\Symbol::unserialize ( string $serialized ) : void
MongoDB\BSON\Symbol::__construct ( void )
MongoDB\BSON\Symbol::__toString ( void ) : string
MongoDB\BSON\Timestamp::getIncrement ( void ) : int
MongoDB\BSON\Timestamp::getTimestamp ( void ) : int
MongoDB\BSON\Timestamp::jsonSerialize ( void ) : mixed
MongoDB\BSON\Timestamp::serialize ( void ) : string
MongoDB\BSON\Timestamp::unserialize ( string $serialized ) : void
MongoDB\BSON\Timestamp::__construct ( int $increment , int $timestamp )
MongoDB\BSON\Timestamp::__toString ( void ) : string
MongoDB\BSON\TimestampInterface::getIncrement ( void ) : int
MongoDB\BSON\TimestampInterface::getTimestamp ( void ) : int
MongoDB\BSON\TimestampInterface::__toString ( void ) : string
MongoDB\BSON\Undefined::jsonSerialize ( void ) : mixed
MongoDB\BSON\Undefined::serialize ( void ) : string
MongoDB\BSON\Undefined::unserialize ( string $serialized ) : void
MongoDB\BSON\Undefined::__construct ( void )
MongoDB\BSON\Undefined::__toString ( void ) : string
MongoDB\BSON\Unserializable::bsonUnserialize ( array $data ) : void
MongoDB\BSON\UTCDateTime::jsonSerialize ( void ) : mixed
MongoDB\BSON\UTCDateTime::serialize ( void ) : string
MongoDB\BSON\UTCDateTime::toDateTime ( void ) : DateTime
MongoDB\BSON\UTCDateTime::unserialize ( string $serialized ) : void
MongoDB\BSON\UTCDateTime::__construct ([ integer|float|string|DateTimeInterface $milliseconds = NULL ] )
MongoDB\BSON\UTCDateTime::__toString ( void ) : string
MongoDB\BSON\UTCDateTimeInterface::toDateTime ( void ) : DateTime
MongoDB\BSON\UTCDateTimeInterface::__toString ( void ) : string
MongoDB\Driver\BulkWrite::count ( void ) : int
MongoDB\Driver\BulkWrite::delete ( array|object $filter [, array $deleteOptions ] ) : void
MongoDB\Driver\BulkWrite::insert ( array|object $document ) : mixed
MongoDB\Driver\BulkWrite::update ( array|object $filter , array|object $newObj [, array $updateOptions ] ) : void
MongoDB\Driver\BulkWrite::__construct ([ array $options ] )
MongoDB\Driver\Command::__construct ( array|object $document [, array $commandOptions ] )
MongoDB\Driver\Cursor::getId ( void ) : MongoDB\Driver\CursorId
MongoDB\Driver\Cursor::getServer ( void ) : MongoDB\Driver\Server
MongoDB\Driver\Cursor::isDead ( void ) : bool
MongoDB\Driver\Cursor::setTypeMap ( array $typemap ) : void
MongoDB\Driver\Cursor::toArray ( void ) : array
MongoDB\Driver\Cursor::__construct ( void )
MongoDB\Driver\CursorId::__construct ( void )
MongoDB\Driver\CursorId::__toString ( void ) : string
MongoDB\Driver\Exception\AuthenticationException::getCode ( void ) : mixed
MongoDB\Driver\Exception\AuthenticationException::getFile ( void ) : string
MongoDB\Driver\Exception\AuthenticationException::getLine ( void ) : int
MongoDB\Driver\Exception\AuthenticationException::getMessage ( void ) : string
MongoDB\Driver\Exception\AuthenticationException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\AuthenticationException::getTrace ( void ) : array
MongoDB\Driver\Exception\AuthenticationException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\AuthenticationException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\AuthenticationException::__clone ( void ) : void
MongoDB\Driver\Exception\AuthenticationException::__toString ( void ) : string
MongoDB\Driver\Exception\BulkWriteException::getCode ( void ) : mixed
MongoDB\Driver\Exception\BulkWriteException::getFile ( void ) : string
MongoDB\Driver\Exception\BulkWriteException::getLine ( void ) : int
MongoDB\Driver\Exception\BulkWriteException::getMessage ( void ) : string
MongoDB\Driver\Exception\BulkWriteException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\BulkWriteException::getTrace ( void ) : array
MongoDB\Driver\Exception\BulkWriteException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\BulkWriteException::getWriteResult ( void ) : MongoDB\Driver\WriteResult
MongoDB\Driver\Exception\BulkWriteException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\BulkWriteException::__clone ( void ) : void
MongoDB\Driver\Exception\BulkWriteException::__toString ( void ) : string
MongoDB\Driver\Exception\CommandException::getCode ( void ) : mixed
MongoDB\Driver\Exception\CommandException::getFile ( void ) : string
MongoDB\Driver\Exception\CommandException::getLine ( void ) : int
MongoDB\Driver\Exception\CommandException::getMessage ( void ) : string
MongoDB\Driver\Exception\CommandException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\CommandException::getResultDocument ( void ) : object
MongoDB\Driver\Exception\CommandException::getTrace ( void ) : array
MongoDB\Driver\Exception\CommandException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\CommandException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\CommandException::__clone ( void ) : void
MongoDB\Driver\Exception\CommandException::__toString ( void ) : string
MongoDB\Driver\Exception\ConnectionException::getCode ( void ) : mixed
MongoDB\Driver\Exception\ConnectionException::getFile ( void ) : string
MongoDB\Driver\Exception\ConnectionException::getLine ( void ) : int
MongoDB\Driver\Exception\ConnectionException::getMessage ( void ) : string
MongoDB\Driver\Exception\ConnectionException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\ConnectionException::getTrace ( void ) : array
MongoDB\Driver\Exception\ConnectionException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\ConnectionException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\ConnectionException::__clone ( void ) : void
MongoDB\Driver\Exception\ConnectionException::__toString ( void ) : string
MongoDB\Driver\Exception\ConnectionTimeoutException::getCode ( void ) : mixed
MongoDB\Driver\Exception\ConnectionTimeoutException::getFile ( void ) : string
MongoDB\Driver\Exception\ConnectionTimeoutException::getLine ( void ) : int
MongoDB\Driver\Exception\ConnectionTimeoutException::getMessage ( void ) : string
MongoDB\Driver\Exception\ConnectionTimeoutException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\ConnectionTimeoutException::getTrace ( void ) : array
MongoDB\Driver\Exception\ConnectionTimeoutException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\ConnectionTimeoutException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\ConnectionTimeoutException::__clone ( void ) : void
MongoDB\Driver\Exception\ConnectionTimeoutException::__toString ( void ) : string
MongoDB\Driver\Exception\ExecutionTimeoutException::getCode ( void ) : mixed
MongoDB\Driver\Exception\ExecutionTimeoutException::getFile ( void ) : string
MongoDB\Driver\Exception\ExecutionTimeoutException::getLine ( void ) : int
MongoDB\Driver\Exception\ExecutionTimeoutException::getMessage ( void ) : string
MongoDB\Driver\Exception\ExecutionTimeoutException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\ExecutionTimeoutException::getTrace ( void ) : array
MongoDB\Driver\Exception\ExecutionTimeoutException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\ExecutionTimeoutException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\ExecutionTimeoutException::__clone ( void ) : void
MongoDB\Driver\Exception\ExecutionTimeoutException::__toString ( void ) : string
MongoDB\Driver\Exception\InvalidArgumentException::getCode ( void ) : mixed
MongoDB\Driver\Exception\InvalidArgumentException::getFile ( void ) : string
MongoDB\Driver\Exception\InvalidArgumentException::getLine ( void ) : int
MongoDB\Driver\Exception\InvalidArgumentException::getMessage ( void ) : string
MongoDB\Driver\Exception\InvalidArgumentException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\InvalidArgumentException::getTrace ( void ) : array
MongoDB\Driver\Exception\InvalidArgumentException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\InvalidArgumentException::__clone ( void ) : void
MongoDB\Driver\Exception\InvalidArgumentException::__toString ( void ) : string
MongoDB\Driver\Exception\LogicException::getCode ( void ) : mixed
MongoDB\Driver\Exception\LogicException::getFile ( void ) : string
MongoDB\Driver\Exception\LogicException::getLine ( void ) : int
MongoDB\Driver\Exception\LogicException::getMessage ( void ) : string
MongoDB\Driver\Exception\LogicException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\LogicException::getTrace ( void ) : array
MongoDB\Driver\Exception\LogicException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\LogicException::__clone ( void ) : void
MongoDB\Driver\Exception\LogicException::__toString ( void ) : string
MongoDB\Driver\Exception\RuntimeException::getCode ( void ) : mixed
MongoDB\Driver\Exception\RuntimeException::getFile ( void ) : string
MongoDB\Driver\Exception\RuntimeException::getLine ( void ) : int
MongoDB\Driver\Exception\RuntimeException::getMessage ( void ) : string
MongoDB\Driver\Exception\RuntimeException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\RuntimeException::getTrace ( void ) : array
MongoDB\Driver\Exception\RuntimeException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\RuntimeException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\RuntimeException::__clone ( void ) : void
MongoDB\Driver\Exception\RuntimeException::__toString ( void ) : string
MongoDB\Driver\Exception\ServerException::getCode ( void ) : mixed
MongoDB\Driver\Exception\ServerException::getFile ( void ) : string
MongoDB\Driver\Exception\ServerException::getLine ( void ) : int
MongoDB\Driver\Exception\ServerException::getMessage ( void ) : string
MongoDB\Driver\Exception\ServerException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\ServerException::getTrace ( void ) : array
MongoDB\Driver\Exception\ServerException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\ServerException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\ServerException::__clone ( void ) : void
MongoDB\Driver\Exception\ServerException::__toString ( void ) : string
MongoDB\Driver\Exception\SSLConnectionException::getCode ( void ) : mixed
MongoDB\Driver\Exception\SSLConnectionException::getFile ( void ) : string
MongoDB\Driver\Exception\SSLConnectionException::getLine ( void ) : int
MongoDB\Driver\Exception\SSLConnectionException::getMessage ( void ) : string
MongoDB\Driver\Exception\SSLConnectionException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\SSLConnectionException::getTrace ( void ) : array
MongoDB\Driver\Exception\SSLConnectionException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\SSLConnectionException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\SSLConnectionException::__clone ( void ) : void
MongoDB\Driver\Exception\SSLConnectionException::__toString ( void ) : string
MongoDB\Driver\Exception\UnexpectedValueException::getCode ( void ) : mixed
MongoDB\Driver\Exception\UnexpectedValueException::getFile ( void ) : string
MongoDB\Driver\Exception\UnexpectedValueException::getLine ( void ) : int
MongoDB\Driver\Exception\UnexpectedValueException::getMessage ( void ) : string
MongoDB\Driver\Exception\UnexpectedValueException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\UnexpectedValueException::getTrace ( void ) : array
MongoDB\Driver\Exception\UnexpectedValueException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\UnexpectedValueException::__clone ( void ) : void
MongoDB\Driver\Exception\UnexpectedValueException::__toString ( void ) : string
MongoDB\Driver\Exception\WriteException::getCode ( void ) : mixed
MongoDB\Driver\Exception\WriteException::getFile ( void ) : string
MongoDB\Driver\Exception\WriteException::getLine ( void ) : int
MongoDB\Driver\Exception\WriteException::getMessage ( void ) : string
MongoDB\Driver\Exception\WriteException::getPrevious ( void ) : Throwable
MongoDB\Driver\Exception\WriteException::getTrace ( void ) : array
MongoDB\Driver\Exception\WriteException::getTraceAsString ( void ) : string
MongoDB\Driver\Exception\WriteException::getWriteResult ( void ) : MongoDB\Driver\WriteResult
MongoDB\Driver\Exception\WriteException::hasErrorLabel ( string $errorLabel ) : bool
MongoDB\Driver\Exception\WriteException::__clone ( void ) : void
MongoDB\Driver\Exception\WriteException::__toString ( void ) : string
MongoDB\Driver\Manager::executeBulkWrite ( string $namespace , MongoDB\Driver\BulkWrite $bulk [, array $options = array() ] ) : MongoDB\Driver\WriteResult
MongoDB\Driver\Manager::executeCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeQuery ( string $namespace , MongoDB\Driver\Query $query [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeReadCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeReadWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Manager::getReadConcern ( void ) : MongoDB\Driver\ReadConcern
MongoDB\Driver\Manager::getReadPreference ( void ) : MongoDB\Driver\ReadPreference
MongoDB\Driver\Manager::getServers ( void ) : array
MongoDB\Driver\Manager::getWriteConcern ( void ) : MongoDB\Driver\WriteConcern
MongoDB\Driver\Manager::selectServer ( MongoDB\Driver\ReadPreference $readPreference ) : MongoDB\Driver\Server
MongoDB\Driver\Manager::startSession ([ array $options ] ) : MongoDB\Driver\Session
MongoDB\Driver\Manager::__construct ([ string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array() ]]] )
MongoDB\Driver\Monitoring\CommandFailedEvent::getCommandName ( void ) : string
MongoDB\Driver\Monitoring\CommandFailedEvent::getDurationMicros ( void ) : int
MongoDB\Driver\Monitoring\CommandFailedEvent::getError ( void ) : Exception
MongoDB\Driver\Monitoring\CommandFailedEvent::getOperationId ( void ) : string
MongoDB\Driver\Monitoring\CommandFailedEvent::getReply ( void ) : object
MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId ( void ) : string
MongoDB\Driver\Monitoring\CommandFailedEvent::getServer ( void ) : MongoDB\Driver\Server
MongoDB\Driver\Monitoring\CommandStartedEvent::getCommand ( void ) : object
MongoDB\Driver\Monitoring\CommandStartedEvent::getCommandName ( void ) : string
MongoDB\Driver\Monitoring\CommandStartedEvent::getDatabaseName ( void ) : string
MongoDB\Driver\Monitoring\CommandStartedEvent::getOperationId ( void ) : string
MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId ( void ) : string
MongoDB\Driver\Monitoring\CommandStartedEvent::getServer ( void ) : MongoDB\Driver\Server
MongoDB\Driver\Monitoring\CommandSubscriber::commandFailed ( MongoDB\Driver\Monitoring\CommandFailedEvent $event ) : void
MongoDB\Driver\Monitoring\CommandSubscriber::commandStarted ( MongoDB\Driver\Monitoring\CommandStartedEvent $event ) : void
MongoDB\Driver\Monitoring\CommandSubscriber::commandSucceeded ( MongoDB\Driver\Monitoring\CommandSucceededEvent $event ) : void
MongoDB\Driver\Monitoring\CommandSucceededEvent::getCommandName ( void ) : string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getDurationMicros ( void ) : int
MongoDB\Driver\Monitoring\CommandSucceededEvent::getOperationId ( void ) : string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getReply ( void ) : object
MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId ( void ) : string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getServer ( void ) : MongoDB\Driver\Server
MongoDB\Driver\Query::__construct ( array|object $filter [, array $queryOptions ] )
MongoDB\Driver\ReadConcern::bsonSerialize ( void ) : object
MongoDB\Driver\ReadConcern::getLevel ( void ) : string
MongoDB\Driver\ReadConcern::isDefault ( void ) : bool
MongoDB\Driver\ReadConcern::__construct ([ string $level ] )
MongoDB\Driver\ReadPreference::bsonSerialize ( void ) : object
MongoDB\Driver\ReadPreference::getMaxStalenessSeconds ( void ) : int
MongoDB\Driver\ReadPreference::getMode ( void ) : int
MongoDB\Driver\ReadPreference::getTagSets ( void ) : array
MongoDB\Driver\ReadPreference::__construct ( string|integer $mode [, array $tagSets = NULL [, array $options = array() ]] )
MongoDB\Driver\Server::executeBulkWrite ( string $namespace , MongoDB\Driver\BulkWrite $bulk [, array $options = array() ] ) : MongoDB\Driver\WriteResult
MongoDB\Driver\Server::executeCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeQuery ( string $namespace , MongoDB\Driver\Query $query [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeReadCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeReadWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] ) : MongoDB\Driver\Cursor
MongoDB\Driver\Server::getHost ( void ) : string
MongoDB\Driver\Server::getInfo ( void ) : array
MongoDB\Driver\Server::getLatency ( void ) : string
MongoDB\Driver\Server::getPort ( void ) : int
MongoDB\Driver\Server::getTags ( void ) : array
MongoDB\Driver\Server::getType ( void ) : int
MongoDB\Driver\Server::isArbiter ( void ) : bool
MongoDB\Driver\Server::isHidden ( void ) : bool
MongoDB\Driver\Server::isPassive ( void ) : bool
MongoDB\Driver\Server::isPrimary ( void ) : bool
MongoDB\Driver\Server::isSecondary ( void ) : bool
MongoDB\Driver\Server::__construct ( void )
MongoDB\Driver\Session::abortTransaction ( void ) : void
MongoDB\Driver\Session::advanceClusterTime ( array|object $clusterTime ) : void
MongoDB\Driver\Session::advanceOperationTime ( MongoDB\BSON\TimestampInterface $operationTime ) : void
MongoDB\Driver\Session::commitTransaction ( void ) : void
MongoDB\Driver\Session::endSession ( void ) : void
MongoDB\Driver\Session::getClusterTime ( void ) : object
MongoDB\Driver\Session::getLogicalSessionId ( void ) : object
MongoDB\Driver\Session::getOperationTime ( void ) : MongoDB\BSON\Timestamp
MongoDB\Driver\Session::startTransaction ( array|object $options ) : void
MongoDB\Driver\Session::__construct ( void )
MongoDB\Driver\WriteConcern::bsonSerialize ( void ) : object
MongoDB\Driver\WriteConcern::getJournal ( void ) : boolean
MongoDB\Driver\WriteConcern::getW ( void ) : string
MongoDB\Driver\WriteConcern::getWtimeout ( void ) : int
MongoDB\Driver\WriteConcern::isDefault ( void ) : bool
MongoDB\Driver\WriteConcern::__construct ( string|integer $w [, int $wtimeout [, bool $journal ]] )
MongoDB\Driver\WriteConcernError::getCode ( void ) : int
MongoDB\Driver\WriteConcernError::getInfo ( void ) : mixed
MongoDB\Driver\WriteConcernError::getMessage ( void ) : string
MongoDB\Driver\WriteError::getCode ( void ) : int
MongoDB\Driver\WriteError::getIndex ( void ) : int
MongoDB\Driver\WriteError::getInfo ( void ) : mixed
MongoDB\Driver\WriteError::getMessage ( void ) : string
MongoDB\Driver\WriteResult::getDeletedCount ( void ) : integer
MongoDB\Driver\WriteResult::getInsertedCount ( void ) : integer
MongoDB\Driver\WriteResult::getMatchedCount ( void ) : integer
MongoDB\Driver\WriteResult::getModifiedCount ( void ) : integer
MongoDB\Driver\WriteResult::getServer ( void ) : MongoDB\Driver\Server
MongoDB\Driver\WriteResult::getUpsertedCount ( void ) : integer
MongoDB\Driver\WriteResult::getUpsertedIds ( void ) : array
MongoDB\Driver\WriteResult::getWriteConcernError ( void ) : MongoDB\Driver\WriteConcernError
MongoDB\Driver\WriteResult::getWriteErrors ( void ) : array
MongoDB\Driver\WriteResult::isAcknowledged ( void ) : bool
MongoDeleteBatch::add ( array $item ) : bool
MongoDeleteBatch::execute ( array $write_options ) : array
MongoDeleteBatch::__construct ( MongoCollection $collection [, array $write_options ] )
MongoDuplicateKeyException::getDocument ( void ) : array
MongoGridFS::delete ( mixed $id ) : bool
MongoGridFS::drop ( void ) : array
MongoGridFS::find ([ array $query = array() [, array $fields = array() ]] ) : MongoGridFSCursor
MongoGridFS::findOne ([ mixed $query = array() [, mixed $fields = array() ]] ) : MongoGridFSFile
MongoGridFS::get ( mixed $id ) : MongoGridFSFile
MongoGridFS::put ( string $filename [, array $metadata = array() [, array $options = array() ]] ) : mixed
MongoGridFS::remove ([ array $criteria = array() [, array $options = array() ]] ) : bool
MongoGridFS::storeBytes ( string $bytes [, array $metadata = array() [, array $options = array() ]] ) : mixed
MongoGridFS::storeFile ( string|resource $filename [, array $metadata = array() [, array $options = array() ]] ) : mixed
MongoGridFS::storeUpload ( string $name [, array $metadata ] ) : mixed
MongoGridFS::__construct ( MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs" ]] )
MongoGridFSCursor::current ( void ) : MongoGridFSFile
MongoGridFSCursor::getNext ( void ) : MongoGridFSFile
MongoGridFSCursor::key ( void ) : string
MongoGridFSCursor::__construct ( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields )
MongoGridFSFile::getBytes ( void ) : string
MongoGridFSFile::getFilename ( void ) : string
MongoGridFSFile::getResource ( void ) : resource
MongoGridFSFile::getSize ( void ) : int
MongoGridFSFile::write ([ string $filename = NULL ] ) : int
MongoGridFSFile::__construct ( MongoGridFS $gridfs , array $file )
MongoId::getHostname ( void ) : string
MongoId::getInc ( void ) : int
MongoId::getPID ( void ) : int
MongoId::getTimestamp ( void ) : int
MongoId::isValid ( mixed $value ) : bool
MongoId::__construct ([ string|MongoId $id = NULL ] )
MongoId::__set_state ( array $props ) : MongoId
MongoId::__toString ( void ) : string
MongoInsertBatch::add ( array $item ) : bool
MongoInsertBatch::execute ( array $write_options ) : array
MongoInsertBatch::__construct ( MongoCollection $collection [, array $write_options ] )
MongoInt32::__construct ( string $value )
MongoInt32::__toString ( void ) : string
MongoInt64::__construct ( string $value )
MongoInt64::__toString ( void ) : string
MongoLog::getCallback ( void ) : callable
MongoLog::getLevel ( void ) : int
MongoLog::getModule ( void ) : int
MongoLog::setCallback ( callable $log_function ) : void
MongoLog::setLevel ( int $level ) : void
MongoLog::setModule ( int $module ) : void
MongoPool::getSize ( void ) : int
MongoPool::info ( void ) : array
MongoPool::setSize ( int $size ) : bool
MongoRegex::__construct ( string $regex )
MongoRegex::__toString ( void ) : string
MongoResultException::getDocument ( void ) : array
MongoTimestamp::__construct ([ int $sec = time() [, int $inc ]] )
MongoTimestamp::__toString ( void ) : string
MongoUpdateBatch::add ( array $item ) : bool
MongoUpdateBatch::execute ( array $write_options ) : array
MongoUpdateBatch::__construct ( MongoCollection $collection [, array $write_options ] )
MongoWriteBatch::add ( array $item ) : bool
MongoWriteBatch::execute ( array $write_options ) : array
MongoWriteBatch::__construct ( MongoCollection $collection [, string $batch_type [, array $write_options ]] )
MongoWriteConcernException::getDocument ( void ) : array
MongoWriteConcernException::getHost ( void ) : string
MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ] ) : void
MultipleIterator::containsIterator ( Iterator $iterator ) : bool
MultipleIterator::countIterators ( void ) : int
MultipleIterator::current ( void ) : array
MultipleIterator::detachIterator ( Iterator $iterator ) : void
MultipleIterator::getFlags ( void ) : int
MultipleIterator::key ( void ) : array
MultipleIterator::next ( void ) : void
MultipleIterator::rewind ( void ) : void
MultipleIterator::setFlags ( int $flags ) : void
MultipleIterator::valid ( void ) : bool
MultipleIterator::__construct ([ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC ] )
Mutex::create ([ bool $lock ] ) : int
Mutex::destroy ( int $mutex ) : bool
Mutex::lock ( int $mutex ) : bool
Mutex::trylock ( int $mutex ) : bool
Mutex::unlock ( int $mutex [, bool $destroy ] ) : bool
mysqli::autocommit ( bool $mode ) : bool
mysqli::change_user ( string $user , string $password , string $database ) : bool
mysqli::character_set_name ( void ) : string
mysqli::close ( void ) : bool
mysqli::commit ([ int $flags = 0 [, string $name ]] ) : bool
mysqli::connect ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] ) : void
mysqli::debug ( string $message ) : bool
mysqli::dump_debug_info ( void ) : bool
mysqli::escape_string ( string $escapestr ) : string
mysqli::get_charset ( void ) : object
mysqli::get_client_info ( void ) : string
mysqli::get_connection_stats ( void ) : bool
mysqli::get_server_info ( void ) : string
mysqli::get_warnings ( void ) : mysqli_warning
mysqli::init ( void ) : mysqli
mysqli::kill ( int $processid ) : bool
mysqli::more_results ( void ) : bool
mysqli::multi_query ( string $query ) : bool
mysqli::next_result ( void ) : bool
mysqli::options ( int $option , mixed $value ) : bool
mysqli::ping ( void ) : bool
mysqli::poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec = 0 ] ) : int
mysqli::prepare ( string $query ) : mysqli_stmt
mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] ) : mixed
mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] ) : bool
mysqli::real_escape_string ( string $escapestr ) : string
mysqli::real_query ( string $query ) : bool
mysqli::reap_async_query ( void ) : mysqli_result
mysqli::refresh ( int $options ) : bool
mysqli::rollback ([ int $flags = 0 [, string $name ]] ) : bool
mysqli::rpl_query_type ( string $query ) : int
mysqli::select_db ( string $dbname ) : bool
mysqli::send_query ( string $query ) : bool
mysqli::set_charset ( string $charset ) : bool
mysqli::set_local_infile_handler ( mysqli $link , callable $read_func ) : bool
mysqli::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher ) : bool
mysqli::stat ( void ) : string
mysqli::stmt_init ( void ) : mysqli_stmt
mysqli::store_result ([ int $option ] ) : mysqli_result
mysqli::use_result ( void ) : mysqli_result
mysqli::__construct ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
mysqli_driver::embedded_server_end ( void ) : void
mysqli_driver::embedded_server_start ( int $start , array $arguments , array $groups ) : bool
mysqli_result::data_seek ( int $offset ) : bool
mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] ) : mixed
mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] ) : mixed
mysqli_result::fetch_assoc ( void ) : array
mysqli_result::fetch_field ( void ) : object
mysqli_result::fetch_fields ( void ) : array
mysqli_result::fetch_field_direct ( int $fieldnr ) : object
mysqli_result::fetch_object ([ string $class_name = "stdClass" [, array $params ]] ) : object
mysqli_result::fetch_row ( void ) : mixed
mysqli_result::field_seek ( int $fieldnr ) : bool
mysqli_result::free ( void ) : void
mysqli_stmt::attr_get ( int $attr ) : int
mysqli_stmt::attr_set ( int $attr , int $mode ) : bool
mysqli_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] ) : bool
mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] ) : bool
mysqli_stmt::close ( void ) : bool
mysqli_stmt::data_seek ( int $offset ) : void
mysqli_stmt::execute ( void ) : bool
mysqli_stmt::fetch ( void ) : bool
mysqli_stmt::free_result ( void ) : void
mysqli_stmt::get_result ( void ) : mysqli_result
mysqli_stmt::get_warnings ( mysqli_stmt $stmt ) : object
mysqli_stmt::num_rows ( void ) : int
mysqli_stmt::prepare ( string $query ) : mixed
mysqli_stmt::reset ( void ) : bool
mysqli_stmt::result_metadata ( void ) : mysqli_result
mysqli_stmt::send_long_data ( int $param_nr , string $data ) : bool
mysqli_stmt::store_result ( void ) : bool
mysqli_stmt::__construct ( mysqli $link [, string $query ] )
mysqli_warning::next ( void ) : void
mysqli_warning::__construct ( void )
MysqlndUhConnection::changeUser ( mysqlnd_connection $connection , string $user , string $password , string $database , bool $silent , int $passwd_len ) : bool
MysqlndUhConnection::charsetName ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::close ( mysqlnd_connection $connection , int $close_type ) : bool
MysqlndUhConnection::connect ( mysqlnd_connection $connection , string $host , string $use" , string $password , string $database , int $port , string $socket , int $mysql_flags ) : bool
MysqlndUhConnection::endPSession ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::escapeString ( mysqlnd_connection $connection , string $escape_string ) : string
MysqlndUhConnection::getAffectedRows ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getErrorNumber ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getErrorString ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getFieldCount ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getHostInformation ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getLastInsertId ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getLastMessage ( mysqlnd_connection $connection ) : void
MysqlndUhConnection::getProtocolInformation ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getServerInformation ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getServerStatistics ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getServerVersion ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getSqlstate ( mysqlnd_connection $connection ) : string
MysqlndUhConnection::getStatistics ( mysqlnd_connection $connection ) : array
MysqlndUhConnection::getThreadId ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::getWarningCount ( mysqlnd_connection $connection ) : int
MysqlndUhConnection::init ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::killConnection ( mysqlnd_connection $connection , int $pid ) : bool
MysqlndUhConnection::listFields ( mysqlnd_connection $connection , string $table , string $achtung_wild ) : array
MysqlndUhConnection::listMethod ( mysqlnd_connection $connection , string $query , string $achtung_wild , string $par1 ) : void
MysqlndUhConnection::moreResults ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::nextResult ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::ping ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::query ( mysqlnd_connection $connection , string $query ) : bool
MysqlndUhConnection::queryReadResultsetHeader ( mysqlnd_connection $connection , mysqlnd_statement $mysqlnd_stmt ) : bool
MysqlndUhConnection::reapQuery ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::refreshServer ( mysqlnd_connection $connection , int $options ) : bool
MysqlndUhConnection::restartPSession ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::selectDb ( mysqlnd_connection $connection , string $database ) : bool
MysqlndUhConnection::sendClose ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::sendQuery ( mysqlnd_connection $connection , string $query ) : bool
MysqlndUhConnection::serverDumpDebugInformation ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::setAutocommit ( mysqlnd_connection $connection , int $mode ) : bool
MysqlndUhConnection::setCharset ( mysqlnd_connection $connection , string $charset ) : bool
MysqlndUhConnection::setClientOption ( mysqlnd_connection $connection , int $option , int $value ) : bool
MysqlndUhConnection::setServerOption ( mysqlnd_connection $connection , int $option ) : void
MysqlndUhConnection::shutdownServer ( string $MYSQLND_UH_RES_MYSQLND_NAME , string $level ) : void
MysqlndUhConnection::simpleCommand ( mysqlnd_connection $connection , int $command , string $arg , int $ok_packet , bool $silent , bool $ignore_upsert_status ) : bool
MysqlndUhConnection::simpleCommandHandleResponse ( mysqlnd_connection $connection , int $ok_packet , bool $silent , int $command , bool $ignore_upsert_status ) : bool
MysqlndUhConnection::sslSet ( mysqlnd_connection $connection , string $key , string $cert , string $ca , string $capath , string $cipher ) : bool
MysqlndUhConnection::stmtInit ( mysqlnd_connection $connection ) : resource
MysqlndUhConnection::storeResult ( mysqlnd_connection $connection ) : resource
MysqlndUhConnection::txCommit ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::txRollback ( mysqlnd_connection $connection ) : bool
MysqlndUhConnection::useResult ( mysqlnd_connection $connection ) : resource
MysqlndUhConnection::__construct ( void )
MysqlndUhPreparedStatement::execute ( mysqlnd_prepared_statement $statement ) : bool
MysqlndUhPreparedStatement::prepare ( mysqlnd_prepared_statement $statement , string $query ) : bool
MysqlndUhPreparedStatement::__construct ( void )
mysql_xdevapi\BaseResult::getWarnings ( void ) : array
mysql_xdevapi\BaseResult::getWarningsCount ( void ) : integer
mysql_xdevapi\Collection::add ( mixed $document ) : mysql_xdevapi\CollectionAdd
mysql_xdevapi\Collection::addOrReplaceOne ( string $id , string $doc ) : mysql_xdevapi\Result
mysql_xdevapi\Collection::count ( void ) : integer
mysql_xdevapi\Collection::createIndex ( string $index_name , string $index_desc_json ) : void
mysql_xdevapi\Collection::dropIndex ( string $index_name ) : bool
mysql_xdevapi\Collection::existsInDatabase ( void ) : bool
mysql_xdevapi\Collection::find ([ string $search_condition ] ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\Collection::getName ( void ) : string
mysql_xdevapi\Collection::getOne ( string $id ) : Document
mysql_xdevapi\Collection::getSchema ( void ) : Schema
mysql_xdevapi\Collection::getSession ( void ) : Session
mysql_xdevapi\Collection::modify ( string $search_condition ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\Collection::remove ( string $search_condition ) : mysql_xdevapi\CollectionRemove
mysql_xdevapi\Collection::removeOne ( string $id ) : mysql_xdevapi\Result
mysql_xdevapi\Collection::replaceOne ( string $id , string $doc ) : mysql_xdevapi\Result
mysql_xdevapi\CollectionAdd::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\CollectionFind::bind ( array $placeholder_values ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::execute ( void ) : mysql_xdevapi\DocResult
mysql_xdevapi\CollectionFind::fields ( string $projection ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::groupBy ( string $sort_expr ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::having ( string $sort_expr ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::limit ( integer $rows ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::lockExclusive ([ integer $lock_waiting_option ] ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::lockShared ([ integer $lock_waiting_option ] ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::offset ( integer $position ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionFind::sort ( string $sort_expr ) : mysql_xdevapi\CollectionFind
mysql_xdevapi\CollectionModify::arrayAppend ( string $collection_field , string $expression_or_literal ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::arrayInsert ( string $collection_field , string $expression_or_literal ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::bind ( array $placeholder_values ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\CollectionModify::limit ( integer $rows ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::patch ( string $document ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::replace ( string $collection_field , string $expression_or_literal ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::set ( string $collection_field , string $expression_or_literal ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::skip ( integer $position ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::sort ( string $sort_expr ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionModify::unset ( array $fields ) : mysql_xdevapi\CollectionModify
mysql_xdevapi\CollectionRemove::bind ( array $placeholder_values ) : mysql_xdevapi\CollectionRemove
mysql_xdevapi\CollectionRemove::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\CollectionRemove::limit ( integer $rows ) : mysql_xdevapi\CollectionRemove
mysql_xdevapi\CollectionRemove::sort ( string $sort_expr ) : mysql_xdevapi\CollectionRemove
mysql_xdevapi\ColumnResult::getCharacterSetName ( void ) : string
mysql_xdevapi\ColumnResult::getCollationName ( void ) : string
mysql_xdevapi\ColumnResult::getColumnLabel ( void ) : string
mysql_xdevapi\ColumnResult::getColumnName ( void ) : string
mysql_xdevapi\ColumnResult::getFractionalDigits ( void ) : integer
mysql_xdevapi\ColumnResult::getLength ( void ) : integer
mysql_xdevapi\ColumnResult::getSchemaName ( void ) : string
mysql_xdevapi\ColumnResult::getTableLabel ( void ) : string
mysql_xdevapi\ColumnResult::getTableName ( void ) : string
mysql_xdevapi\ColumnResult::getType ( void ) : integer
mysql_xdevapi\ColumnResult::isNumberSigned ( void ) : integer
mysql_xdevapi\ColumnResult::isPadded ( void ) : integer
mysql_xdevapi\CrudOperationBindable::bind ( array $placeholder_values ) : mysql_xdevapi\CrudOperationBindable
mysql_xdevapi\CrudOperationLimitable::limit ( integer $rows ) : mysql_xdevapi\CrudOperationLimitable
mysql_xdevapi\CrudOperationSkippable::skip ( integer $skip ) : mysql_xdevapi\CrudOperationSkippable
mysql_xdevapi\CrudOperationSortable::sort ( string $sort_expr ) : mysql_xdevapi\CrudOperationSortable
mysql_xdevapi\DatabaseObject::existsInDatabase ( void ) : bool
mysql_xdevapi\DatabaseObject::getName ( void ) : string
mysql_xdevapi\DatabaseObject::getSession ( void ) : mysql_xdevapi\Session
mysql_xdevapi\DocResult::fetchAll ( void ) : Array
mysql_xdevapi\DocResult::fetchOne ( void ) : Object
mysql_xdevapi\DocResult::getWarnings ( void ) : Array
mysql_xdevapi\DocResult::getWarningsCount ( void ) : integer
mysql_xdevapi\Driver::__construct ( void )
mysql_xdevapi\Executable::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\ExecutionStatus::__construct ( void )
mysql_xdevapi\Expression::__construct ( string $expression )
mysql_xdevapi\FieldMetadata::__construct ( void )
mysql_xdevapi\Result::getAutoIncrementValue ( void ) : int
mysql_xdevapi\Result::getGeneratedIds ( void ) : ArrayOfInt
mysql_xdevapi\Result::getWarnings ( void ) : array
mysql_xdevapi\Result::getWarningsCount ( void ) : integer
mysql_xdevapi\RowResult::fetchAll ( void ) : array
mysql_xdevapi\RowResult::fetchOne ( void ) : object
mysql_xdevapi\RowResult::getColumnCount ( void ) : integer
mysql_xdevapi\RowResult::getColumnNames ( void ) : array
mysql_xdevapi\RowResult::getColumns ( void ) : array
mysql_xdevapi\RowResult::getWarnings ( void ) : array
mysql_xdevapi\RowResult::getWarningsCount ( void ) : integer
mysql_xdevapi\Schema::createCollection ( string $name ) : mysql_xdevapi\Collection
mysql_xdevapi\Schema::dropCollection ( string $collection_name ) : bool
mysql_xdevapi\Schema::existsInDatabase ( void ) : bool
mysql_xdevapi\Schema::getCollection ( string $name ) : mysql_xdevapi\Collection
mysql_xdevapi\Schema::getCollectionAsTable ( string $name ) : mysql_xdevapi\Table
mysql_xdevapi\Schema::getCollections ( void ) : array
mysql_xdevapi\Schema::getName ( void ) : string
mysql_xdevapi\Schema::getSession ( void ) : mysql_xdevapi\Session
mysql_xdevapi\Schema::getTable ( string $name ) : mysql_xdevapi\Table
mysql_xdevapi\Schema::getTables ( void ) : array
mysql_xdevapi\SchemaObject::getSchema ( void ) : mysql_xdevapi\Schema
mysql_xdevapi\Session::close ( void ) : bool
mysql_xdevapi\Session::commit ( void ) : Object
mysql_xdevapi\Session::createSchema ( string $schema_name ) : mysql_xdevapi\Schema
mysql_xdevapi\Session::dropSchema ( string $schema_name ) : bool
mysql_xdevapi\Session::executeSql ( string $statement ) : Object
mysql_xdevapi\Session::generateUUID ( void ) : string
mysql_xdevapi\Session::getClientId ( void ) : integer
mysql_xdevapi\Session::getSchema ( string $schema_name ) : mysql_xdevapi\Schema
mysql_xdevapi\Session::getSchemas ( void ) : array
mysql_xdevapi\Session::getServerVersion ( void ) : integer
mysql_xdevapi\Session::killClient ( integer $client_id ) : object
mysql_xdevapi\Session::listClients ( void ) : array
mysql_xdevapi\Session::quoteName ( string $name ) : string
mysql_xdevapi\Session::releaseSavepoint ( string $name ) : void
mysql_xdevapi\Session::rollback ( void ) : void
mysql_xdevapi\Session::rollbackTo ( string $name ) : void
mysql_xdevapi\Session::setSavepoint ([ string $name ] ) : string
mysql_xdevapi\Session::sql ( string $query ) : mysql_xdevapi\SqlStatement
mysql_xdevapi\Session::startTransaction ( void ) : void
mysql_xdevapi\SqlStatement::bind ( string $param ) : mysql_xdevapi\SqlStatement
mysql_xdevapi\SqlStatement::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\SqlStatement::getNextResult ( void ) : mysql_xdevapi\Result
mysql_xdevapi\SqlStatement::getResult ( void ) : mysql_xdevapi\Result
mysql_xdevapi\SqlStatement::hasMoreResults ( void ) : bool
mysql_xdevapi\SqlStatementResult::fetchAll ( void ) : array
mysql_xdevapi\SqlStatementResult::fetchOne ( void ) : object
mysql_xdevapi\SqlStatementResult::getAffectedItemsCount ( void ) : integer
mysql_xdevapi\SqlStatementResult::getColumnCount ( void ) : integer
mysql_xdevapi\SqlStatementResult::getColumnNames ( void ) : array
mysql_xdevapi\SqlStatementResult::getColumns ( void ) : Array
mysql_xdevapi\SqlStatementResult::getGeneratedIds ( void ) : array
mysql_xdevapi\SqlStatementResult::getLastInsertId ( void ) : String
mysql_xdevapi\SqlStatementResult::getWarningCounts ( void ) : integer
mysql_xdevapi\SqlStatementResult::getWarnings ( void ) : array
mysql_xdevapi\SqlStatementResult::hasData ( void ) : bool
mysql_xdevapi\SqlStatementResult::nextResult ( void ) : mysql_xdevapi\Result
mysql_xdevapi\Statement::getNextResult ( void ) : mysql_xdevapi\Result
mysql_xdevapi\Statement::getResult ( void ) : mysql_xdevapi\Result
mysql_xdevapi\Statement::hasMoreResults ( void ) : bool
mysql_xdevapi\Table::count ( void ) : integer
mysql_xdevapi\Table::delete ( void ) : mysql_xdevapi\TableDelete
mysql_xdevapi\Table::existsInDatabase ( void ) : bool
mysql_xdevapi\Table::getName ( void ) : string
mysql_xdevapi\Table::getSchema ( void ) : mysql_xdevapi\Schema
mysql_xdevapi\Table::getSession ( void ) : mysql_xdevapi\Session
mysql_xdevapi\Table::insert ( mixed $columns [, mixed $... ] ) : mysql_xdevapi\TableInsert
mysql_xdevapi\Table::isView ( void ) : bool
mysql_xdevapi\Table::select ( mixed $columns [, mixed $... ] ) : mysql_xdevapi\TableSelect
mysql_xdevapi\Table::update ( void ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableDelete::bind ( array $placeholder_values ) : mysql_xdevapi\TableDelete
mysql_xdevapi\TableDelete::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\TableDelete::limit ( integer $rows ) : mysql_xdevapi\TableDelete
mysql_xdevapi\TableDelete::offset ( integer $position ) : mysql_xdevapi\TableDelete
mysql_xdevapi\TableDelete::orderby ( string $orderby_expr ) : mysql_xdevapi\TableDelete
mysql_xdevapi\TableDelete::where ( string $where_expr ) : mysql_xdevapi\TableDelete
mysql_xdevapi\TableInsert::execute ( void ) : mysql_xdevapi\Result
mysql_xdevapi\TableInsert::values ( array $row_values ) : mysql_xdevapi\TableInsert
mysql_xdevapi\TableSelect::bind ( array $placeholder_values ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::execute ( void ) : mysql_xdevapi\RowResult
mysql_xdevapi\TableSelect::groupBy ( mixed $sort_expr ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::having ( string $sort_expr ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::limit ( integer $rows ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::lockExclusive ([ integer $lock_waiting_option ] ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::lockShared ([ integer $lock_waiting_option ] ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::offset ( integer $position ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::orderby ( mixed $sort_expr [, mixed $... ] ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableSelect::where ( string $where_expr ) : mysql_xdevapi\TableSelect
mysql_xdevapi\TableUpdate::bind ( array $placeholder_values ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableUpdate::execute ( void ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableUpdate::limit ( integer $rows ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableUpdate::orderby ( mixed $orderby_expr [, mixed $... ] ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableUpdate::set ( string $table_field , string $expression_or_literal ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\TableUpdate::where ( string $where_expr ) : mysql_xdevapi\TableUpdate
mysql_xdevapi\Warning::__construct ( void )
mysql_xdevapi\XSession::__construct ( void )
NoRewindIterator::current ( void ) : mixed
NoRewindIterator::getInnerIterator ( void ) : iterator
NoRewindIterator::key ( void ) : mixed
NoRewindIterator::next ( void ) : void
NoRewindIterator::rewind ( void ) : void
NoRewindIterator::valid ( void ) : bool
NoRewindIterator::__construct ( Iterator $iterator )
Normalizer::getRawDecomposition ( string $input ) : string
Normalizer::isNormalized ( string $input [, int $form = Normalizer::FORM_C ] ) : bool
Normalizer::normalize ( string $input [, int $form = Normalizer::FORM_C ] ) : string
NumberFormatter::create ( string $locale , int $style [, string $pattern ] ) : NumberFormatter
NumberFormatter::format ( number $value [, int $type ] ) : string
NumberFormatter::formatCurrency ( float $value , string $currency ) : string
NumberFormatter::getAttribute ( int $attr ) : int
NumberFormatter::getErrorCode ( void ) : int
NumberFormatter::getErrorMessage ( void ) : string
NumberFormatter::getLocale ([ int $type ] ) : string
NumberFormatter::getPattern ( void ) : string
NumberFormatter::getSymbol ( int $attr ) : string
NumberFormatter::getTextAttribute ( int $attr ) : string
NumberFormatter::parse ( string $value [, int $type [, int &$position ]] ) : mixed
NumberFormatter::parseCurrency ( string $value , string &$currency [, int &$position ] ) : float
NumberFormatter::setAttribute ( int $attr , int $value ) : bool
NumberFormatter::setPattern ( string $pattern ) : bool
NumberFormatter::setSymbol ( int $attr , string $value ) : bool
NumberFormatter::setTextAttribute ( int $attr , string $value ) : bool
NumberFormatter::__construct ( string $locale , int $style [, string $pattern ] )
OAuth::disableDebug ( void ) : bool
OAuth::disableRedirects ( void ) : bool
OAuth::disableSSLChecks ( void ) : bool
OAuth::enableDebug ( void ) : bool
OAuth::enableRedirects ( void ) : bool
OAuth::enableSSLChecks ( void ) : bool
OAuth::fetch ( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]] ) : mixed
OAuth::generateSignature ( string $http_method , string $url [, mixed $extra_parameters ] ) : string
OAuth::getAccessToken ( string $access_token_url [, string $auth_session_handle [, string $verifier_token [, string $http_method ]]] ) : array
OAuth::getCAPath ( void ) : array
OAuth::getLastResponse ( void ) : string
OAuth::getLastResponseHeaders ( void ) : string
OAuth::getLastResponseInfo ( void ) : array
OAuth::getRequestHeader ( string $http_method , string $url [, mixed $extra_parameters ] ) : string
OAuth::getRequestToken ( string $request_token_url [, string $callback_url [, string $http_method ]] ) : array
OAuth::setAuthType ( int $auth_type ) : bool
OAuth::setCAPath ([ string $ca_path [, string $ca_info ]] ) : mixed
OAuth::setNonce ( string $nonce ) : mixed
OAuth::setRequestEngine ( int $reqengine ) : void
OAuth::setRSACertificate ( string $cert ) : mixed
OAuth::setSSLChecks ( int $sslcheck ) : bool
OAuth::setTimestamp ( string $timestamp ) : mixed
OAuth::setToken ( string $token , string $token_secret ) : bool
OAuth::setVersion ( string $version ) : bool
OAuth::__construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )
OAuth::__destruct ( void ) : void
OAuthException::getCode ( void ) : mixed
OAuthException::getFile ( void ) : string
OAuthException::getLine ( void ) : int
OAuthException::getMessage ( void ) : string
OAuthException::getPrevious ( void ) : Throwable
OAuthException::getTrace ( void ) : array
OAuthException::getTraceAsString ( void ) : string
OAuthException::__clone ( void ) : void
OAuthException::__toString ( void ) : string
OAuthProvider::addRequiredParameter ( string $req_params ) : bool
OAuthProvider::callconsumerHandler ( void ) : void
OAuthProvider::callTimestampNonceHandler ( void ) : void
OAuthProvider::calltokenHandler ( void ) : void
OAuthProvider::checkOAuthRequest ([ string $uri [, string $method ]] ) : void
OAuthProvider::consumerHandler ( callable $callback_function ) : void
OAuthProvider::generateToken ( int $size [, bool $strong = FALSE ] ) : string
OAuthProvider::is2LeggedEndpoint ( mixed $params_array ) : void
OAuthProvider::isRequestTokenEndpoint ( bool $will_issue_request_token ) : void
OAuthProvider::removeRequiredParameter ( string $req_params ) : bool
OAuthProvider::reportProblem ( string $oauthexception [, bool $send_headers = TRUE ] ) : string
OAuthProvider::setParam ( string $param_key [, mixed $param_val ] ) : bool
OAuthProvider::setRequestTokenPath ( string $path ) : bool
OAuthProvider::timestampNonceHandler ( callable $callback_function ) : void
OAuthProvider::tokenHandler ( callable $callback_function ) : void
OAuthProvider::__construct ([ array $params_array ] )
OCI-Collection::append ( mixed $value ) : bool
OCI-Collection::assign ( OCI-Collection $from ) : bool
OCI-Collection::assignElem ( int $index , mixed $value ) : bool
OCI-Collection::free ( void ) : bool
OCI-Collection::getElem ( int $index ) : mixed
OCI-Collection::max ( void ) : int
OCI-Collection::size ( void ) : int
OCI-Collection::trim ( int $num ) : bool
OCI-Lob::append ( OCI-Lob $lob_from ) : bool
OCI-Lob::close ( void ) : bool
OCI-Lob::eof ( void ) : bool
OCI-Lob::erase ([ int $offset [, int $length ]] ) : int
OCI-Lob::export ( string $filename [, int $start [, int $length ]] ) : bool
OCI-Lob::flush ([ int $flag ] ) : bool
OCI-Lob::free ( void ) : bool
OCI-Lob::getBuffering ( void ) : bool
OCI-Lob::import ( string $filename ) : bool
OCI-Lob::load ( void ) : string
OCI-Lob::read ( int $length ) : string
OCI-Lob::rewind ( void ) : bool
OCI-Lob::save ( string $data [, int $offset ] ) : bool
OCI-Lob::seek ( int $offset [, int $whence = OCI_SEEK_SET ] ) : bool
OCI-Lob::setBuffering ( bool $on_off ) : bool
OCI-Lob::size ( void ) : int
OCI-Lob::tell ( void ) : int
OCI-Lob::truncate ([ int $length = 0 ] ) : bool
OCI-Lob::write ( string $data [, int $length ] ) : int
OCI-Lob::writeTemporary ( string $data [, int $lob_type = OCI_TEMP_CLOB ] ) : bool
OuterIterator::current ( void ) : mixed
OuterIterator::getInnerIterator ( void ) : Iterator
OuterIterator::key ( void ) : scalar
OuterIterator::next ( void ) : void
OuterIterator::rewind ( void ) : void
OuterIterator::valid ( void ) : bool
OutOfBoundsException::getCode ( void ) : mixed
OutOfBoundsException::getFile ( void ) : string
OutOfBoundsException::getLine ( void ) : int
OutOfBoundsException::getMessage ( void ) : string
OutOfBoundsException::getPrevious ( void ) : Throwable
OutOfBoundsException::getTrace ( void ) : array
OutOfBoundsException::getTraceAsString ( void ) : string
OutOfBoundsException::__clone ( void ) : void
OutOfBoundsException::__toString ( void ) : string
OutOfRangeException::getCode ( void ) : mixed
OutOfRangeException::getFile ( void ) : string
OutOfRangeException::getLine ( void ) : int
OutOfRangeException::getMessage ( void ) : string
OutOfRangeException::getPrevious ( void ) : Throwable
OutOfRangeException::getTrace ( void ) : array
OutOfRangeException::getTraceAsString ( void ) : string
OutOfRangeException::__clone ( void ) : void
OutOfRangeException::__toString ( void ) : string
OverflowException::getCode ( void ) : mixed
OverflowException::getFile ( void ) : string
OverflowException::getLine ( void ) : int
OverflowException::getMessage ( void ) : string
OverflowException::getPrevious ( void ) : Throwable
OverflowException::getTrace ( void ) : array
OverflowException::getTraceAsString ( void ) : string
OverflowException::__clone ( void ) : void
OverflowException::__toString ( void ) : string
parallel\Future::done ( void ) : bool
parallel\Future::select ( array &$resolving , array &$resolved , array &$errored ) : int [:OR:] ( array &$resolving , array &$resolved , array &$errored , string &$timedout , int $timeout ) : int
parallel\Future::value ( void ) : mixed [:OR:] ( int $timeout ) : mixed
parallel\Runtime::close ( void ) : void
parallel\Runtime::kill ( void ) : void
parallel\Runtime::run ( Closure $closure ) : Future [:OR:] ( Closure $closure , array $args ) : Future
parallel\Runtime::__construct ( void )
ParentIterator::accept ( void ) : bool
ParentIterator::getChildren ( void ) : ParentIterator
ParentIterator::getInnerIterator ( void ) : Iterator
ParentIterator::hasChildren ( void ) : bool
ParentIterator::next ( void ) : void
ParentIterator::rewind ( void ) : void
ParentIterator::__construct ( RecursiveIterator $iterator )
Parle\Lexer::advance ( void ) : void
Parle\Lexer::build ( void ) : void
Parle\Lexer::callout ( int $id , callable $callback ) : void
Parle\Lexer::consume ( string $data ) : void
Parle\Lexer::dump ( void ) : void
Parle\Lexer::getToken ( void ) : Parle\Token
Parle\Lexer::insertMacro ( string $name , string $regex ) : void
Parle\Lexer::push ( string $regex , int $id ) : void
Parle\Lexer::reset ( int $pos ) : void
Parle\LexerException::getCode ( void ) : mixed
Parle\LexerException::getFile ( void ) : string
Parle\LexerException::getLine ( void ) : int
Parle\LexerException::getMessage ( void ) : string
Parle\LexerException::getPrevious ( void ) : Throwable
Parle\LexerException::getTrace ( void ) : array
Parle\LexerException::getTraceAsString ( void ) : string
Parle\LexerException::__clone ( void ) : void
Parle\LexerException::__toString ( void ) : string
Parle\Parser::advance ( void ) : void
Parle\Parser::build ( void ) : void
Parle\Parser::consume ( string $data , Parle\Lexer $lexer ) : void
Parle\Parser::dump ( void ) : void
Parle\Parser::errorInfo ( void ) : Parle\ErrorInfo
Parle\Parser::left ( string $tok ) : void
Parle\Parser::nonassoc ( string $tok ) : void
Parle\Parser::precedence ( string $tok ) : void
Parle\Parser::push ( string $name , string $rule ) : int
Parle\Parser::reset ([ int $tokenId ] ) : void
Parle\Parser::right ( string $tok ) : void
Parle\Parser::sigil ([ int $idx ] ) : string
Parle\Parser::token ( string $tok ) : void
Parle\Parser::tokenId ( string $tok ) : int
Parle\Parser::trace ( void ) : string
Parle\Parser::validate ( string $data , Parle\Lexer $lexer ) : bool
Parle\ParserException::getCode ( void ) : mixed
Parle\ParserException::getFile ( void ) : string
Parle\ParserException::getLine ( void ) : int
Parle\ParserException::getMessage ( void ) : string
Parle\ParserException::getPrevious ( void ) : Throwable
Parle\ParserException::getTrace ( void ) : array
Parle\ParserException::getTraceAsString ( void ) : string
Parle\ParserException::__clone ( void ) : void
Parle\ParserException::__toString ( void ) : string
Parle\RLexer::advance ( void ) : void
Parle\RLexer::build ( void ) : void
Parle\RLexer::callout ( int $id , callable $callback ) : void
Parle\RLexer::consume ( string $data ) : void
Parle\RLexer::dump ( void ) : void
Parle\RLexer::getToken ( void ) : Parle\Token
Parle\RLexer::insertMacro ( string $name , string $regex ) : void
Parle\RLexer::push ( string $regex , int $id ) : void [:OR:] ( string $state , string $regex , int $id , string $newState ) : void [:OR:] ( string $state , string $regex , string $newState ) : void
Parle\RLexer::pushState ( string $state ) : int
Parle\RLexer::reset ( int $pos ) : void
Parle\RParser::advance ( void ) : void
Parle\RParser::build ( void ) : void
Parle\RParser::consume ( string $data , Parle\RLexer $rlexer ) : void
Parle\RParser::dump ( void ) : void
Parle\RParser::errorInfo ( void ) : Parle\ErrorInfo
Parle\RParser::left ( string $tok ) : void
Parle\RParser::nonassoc ( string $tok ) : void
Parle\RParser::precedence ( string $tok ) : void
Parle\RParser::push ( string $name , string $rule ) : int
Parle\RParser::reset ([ int $tokenId ] ) : void
Parle\RParser::right ( string $tok ) : void
Parle\RParser::sigil ([ int $idx ] ) : string
Parle\RParser::token ( string $tok ) : void
Parle\RParser::tokenId ( string $tok ) : int
Parle\RParser::trace ( void ) : string
Parle\RParser::validate ( string $data , Parle\RLexer $lexer ) : bool
Parle\Stack::pop ( void ) : void
Parle\Stack::push ( mixed $item ) : void
ParseError::getCode ( void ) : mixed
ParseError::getFile ( void ) : string
ParseError::getLine ( void ) : int
ParseError::getMessage ( void ) : string
ParseError::getPrevious ( void ) : Throwable
ParseError::getTrace ( void ) : array
ParseError::getTraceAsString ( void ) : string
ParseError::__clone ( void ) : void
ParseError::__toString ( void ) : string
PDO::beginTransaction ( void ) : bool
PDO::commit ( void ) : bool
PDO::errorCode ( void ) : string
PDO::errorInfo ( void ) : array
PDO::exec ( string $statement ) : int
PDO::getAttribute ( int $attribute ) : mixed
PDO::getAvailableDrivers ( void ) : array
PDO::inTransaction ( void ) : bool
PDO::lastInsertId ([ string $name = NULL ] ) : string
PDO::prepare ( string $statement [, array $driver_options = array() ] ) : PDOStatement
PDO::query ( string $statement ) : PDOStatement [:OR:] ( string $statement , int $PDO::FETCH_COLUMN , int $colno ) : PDOStatement [:OR:] ( string $statement , int $PDO::FETCH_CLASS , string $classname , array $ctorargs ) : PDOStatement [:OR:] ( string $statement , int $PDO::FETCH_INTO , object $object ) : PDOStatement
PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ] ) : string
PDO::rollBack ( void ) : bool
PDO::setAttribute ( int $attribute , mixed $value ) : bool
PDO::__construct ( string $dsn [, string $username [, string $passwd [, array $options ]]] )
PDOException::getCode ( void ) : mixed
PDOException::getFile ( void ) : string
PDOException::getLine ( void ) : int
PDOException::getMessage ( void ) : string
PDOException::getPrevious ( void ) : Throwable
PDOException::getTrace ( void ) : array
PDOException::getTraceAsString ( void ) : string
PDOException::__clone ( void ) : void
PDOException::__toString ( void ) : string
PDOStatement::bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] ) : bool
PDOStatement::bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] ) : bool
PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] ) : bool
PDOStatement::closeCursor ( void ) : bool
PDOStatement::columnCount ( void ) : int
PDOStatement::debugDumpParams ( void ) : void
PDOStatement::errorCode ( void ) : string
PDOStatement::errorInfo ( void ) : array
PDOStatement::execute ([ array $input_parameters ] ) : bool
PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] ) : mixed
PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] ) : array
PDOStatement::fetchColumn ([ int $column_number = 0 ] ) : mixed
PDOStatement::fetchObject ([ string $class_name = "stdClass" [, array $ctor_args ]] ) : mixed
PDOStatement::getAttribute ( int $attribute ) : mixed
PDOStatement::getColumnMeta ( int $column ) : array
PDOStatement::nextRowset ( void ) : bool
PDOStatement::rowCount ( void ) : int
PDOStatement::setAttribute ( int $attribute , mixed $value ) : bool
PDOStatement::setFetchMode ( int $mode ) : bool [:OR:] ( int $PDO::FETCH_COLUMN , int $colno ) : bool [:OR:] ( int $PDO::FETCH_CLASS , string $classname , array $ctorargs ) : bool [:OR:] ( int $PDO::FETCH_INTO , object $object ) : bool
Phar::addEmptyDir ( string $dirname ) : void
Phar::addFile ( string $file [, string $localname ] ) : void
Phar::addFromString ( string $localname , string $contents ) : void
Phar::apiVersion ( void ) : string
Phar::buildFromDirectory ( string $base_dir [, string $regex ] ) : array
Phar::buildFromIterator ( Iterator $iter [, string $base_directory ] ) : array
Phar::canCompress ([ int $type = 0 ] ) : bool
Phar::canWrite ( void ) : bool
Phar::compress ( int $compression [, string $extension ] ) : object
Phar::compressAllFilesBZIP2 ( void ) : bool
Phar::compressAllFilesGZ ( void ) : bool
Phar::compressFiles ( int $compression ) : void
Phar::convertToData ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] ) : PharData
Phar::convertToExecutable ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] ) : Phar
Phar::copy ( string $oldfile , string $newfile ) : bool
Phar::count ( void ) : int
Phar::createDefaultStub ([ string $indexfile [, string $webindexfile ]] ) : string
Phar::decompress ([ string $extension ] ) : object
Phar::decompressFiles ( void ) : bool
Phar::delete ( string $entry ) : bool
Phar::delMetadata ( void ) : bool
Phar::extractTo ( string $pathto [, string|array $files [, bool $overwrite = FALSE ]] ) : bool
Phar::getAlias ( void ) : string
Phar::getMetadata ( void ) : mixed
Phar::getModified ( void ) : bool
Phar::getPath ( void ) : string
Phar::getSignature ( void ) : array
Phar::getStub ( void ) : string
Phar::getSupportedCompression ( void ) : array
Phar::getSupportedSignatures ( void ) : array
Phar::getVersion ( void ) : string
Phar::hasMetadata ( void ) : bool
Phar::interceptFileFuncs ( void ) : void
Phar::isBuffering ( void ) : bool
Phar::isCompressed ( void ) : mixed
Phar::isFileFormat ( int $format ) : bool
Phar::isValidPharFilename ( string $filename [, bool $executable = TRUE ] ) : bool
Phar::isWritable ( void ) : bool
Phar::loadPhar ( string $filename [, string $alias ] ) : bool
Phar::mapPhar ([ string $alias [, int $dataoffset = 0 ]] ) : bool
Phar::mount ( string $pharpath , string $externalpath ) : void
Phar::mungServer ( array $munglist ) : void
Phar::offsetExists ( string $offset ) : bool
Phar::offsetGet ( string $offset ) : int
Phar::offsetSet ( string $offset , string $value ) : void
Phar::offsetUnset ( string $offset ) : bool
Phar::running ([ bool $retphar = TRUE ] ) : string
Phar::setAlias ( string $alias ) : bool
Phar::setDefaultStub ([ string $index [, string $webindex ]] ) : bool
Phar::setMetadata ( mixed $metadata ) : void
Phar::setSignatureAlgorithm ( int $sigtype [, string $privatekey ] ) : void
Phar::setStub ( string $stub [, int $len = -1 ] ) : bool
Phar::startBuffering ( void ) : void
Phar::stopBuffering ( void ) : void
Phar::uncompressAllFiles ( void ) : bool
Phar::unlinkArchive ( string $archive ) : bool
Phar::webPhar ([ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]] ) : void
Phar::__construct ( string $fname [, int $flags [, string $alias ]] )
PharData::addEmptyDir ( string $dirname ) : void
PharData::addFile ( string $file [, string $localname ] ) : void
PharData::addFromString ( string $localname , string $contents ) : void
PharData::apiVersion ( void ) : string
PharData::buildFromDirectory ( string $base_dir [, string $regex ] ) : array
PharData::buildFromIterator ( Iterator $iter [, string $base_directory ] ) : array
PharData::canCompress ([ int $type = 0 ] ) : bool
PharData::canWrite ( void ) : bool
PharData::compress ( int $compression [, string $extension ] ) : object
PharData::compressAllFilesBZIP2 ( void ) : bool
PharData::compressAllFilesGZ ( void ) : bool
PharData::compressFiles ( int $compression ) : void
PharData::convertToData ([ int $format [, int $compression [, string $extension ]]] ) : PharData
PharData::convertToExecutable ([ int $format [, int $compression [, string $extension ]]] ) : Phar
PharData::copy ( string $oldfile , string $newfile ) : bool
PharData::count ( void ) : int
PharData::createDefaultStub ([ string $indexfile [, string $webindexfile ]] ) : string
PharData::decompress ([ string $extension ] ) : object
PharData::decompressFiles ( void ) : bool
PharData::delete ( string $entry ) : bool
PharData::delMetadata ( void ) : bool
PharData::extractTo ( string $pathto [, string|array $files [, bool $overwrite = FALSE ]] ) : bool
PharData::getAlias ( void ) : string
PharData::getMetadata ( void ) : mixed
PharData::getModified ( void ) : bool
PharData::getPath ( void ) : string
PharData::getSignature ( void ) : array
PharData::getStub ( void ) : string
PharData::getSupportedCompression ( void ) : array
PharData::getSupportedSignatures ( void ) : array
PharData::getVersion ( void ) : string
PharData::hasMetadata ( void ) : bool
PharData::interceptFileFuncs ( void ) : void
PharData::isBuffering ( void ) : bool
PharData::isCompressed ( void ) : mixed
PharData::isFileFormat ( int $format ) : bool
PharData::isValidPharFilename ( string $filename [, bool $executable = TRUE ] ) : bool
PharData::isWritable ( void ) : bool
PharData::loadPhar ( string $filename [, string $alias ] ) : bool
PharData::mapPhar ([ string $alias [, int $dataoffset = 0 ]] ) : bool
PharData::mount ( string $pharpath , string $externalpath ) : void
PharData::mungServer ( array $munglist ) : void
PharData::offsetExists ( string $offset ) : bool
PharData::offsetGet ( string $offset ) : int
PharData::offsetSet ( string $offset , string $value ) : void
PharData::offsetUnset ( string $offset ) : bool
PharData::running ([ bool $retphar = TRUE ] ) : string
PharData::setAlias ( string $alias ) : bool
PharData::setDefaultStub ([ string $index [, string $webindex ]] ) : bool
PharData::setMetadata ( mixed $metadata ) : void
PharData::setSignatureAlgorithm ( int $sigtype ) : void
PharData::setStub ( string $stub [, int $len = -1 ] ) : bool
PharData::startBuffering ( void ) : void
PharData::stopBuffering ( void ) : void
PharData::uncompressAllFiles ( void ) : bool
PharData::unlinkArchive ( string $archive ) : bool
PharData::webPhar ([ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]] ) : void
PharData::__construct ( string $fname [, int $flags [, string $alias [, int $format = Phar::TAR ]]] )
PharException::getCode ( void ) : mixed
PharException::getFile ( void ) : string
PharException::getLine ( void ) : int
PharException::getMessage ( void ) : string
PharException::getPrevious ( void ) : Throwable
PharException::getTrace ( void ) : array
PharException::getTraceAsString ( void ) : string
PharException::__clone ( void ) : void
PharException::__toString ( void ) : string
PharFileInfo::chmod ( int $permissions ) : void
PharFileInfo::compress ( int $compression ) : bool
PharFileInfo::decompress ( void ) : bool
PharFileInfo::delMetadata ( void ) : bool
PharFileInfo::getCompressedSize ( void ) : int
PharFileInfo::getContent ( void ) : string
PharFileInfo::getCRC32 ( void ) : int
PharFileInfo::getMetadata ( void ) : mixed
PharFileInfo::getPharFlags ( void ) : int
PharFileInfo::hasMetadata ( void ) : bool
PharFileInfo::isCompressed ([ int $compression_type = 9021976 ] ) : bool
PharFileInfo::isCompressedBZIP2 ( void ) : bool
PharFileInfo::isCompressedGZ ( void ) : bool
PharFileInfo::isCRCChecked ( void ) : bool
PharFileInfo::setCompressedBZIP2 ( void ) : bool
PharFileInfo::setCompressedGZ ( void ) : bool
PharFileInfo::setMetadata ( mixed $metadata ) : void
PharFileInfo::setUncompressed ( void ) : bool
PharFileInfo::__construct ( string $entry )
phdfs::connect ( void ) : bool
phdfs::copy ( string $source_file , string $destination_file ) : bool
phdfs::create_directory ( string $path ) : bool
phdfs::delete ( string $path ) : bool
phdfs::disconnect ( void ) : bool
phdfs::exists ( string $path ) : bool
phdfs::file_info ( string $path ) : array
phdfs::list_directory ( string $path [, int $level = 0 ] ) : array
phdfs::read ( string $path [, int $length = 0 ] ) : string
phdfs::rename ( string $old_path , string $new_path ) : bool
phdfs::tell ( string $path [, int $read_length = 1024 ] ) : int
phdfs::write ( string $path , string $buffer [, int $mode = 0 ] ) : bool
phdfs::__construct ( string $ip , string $port )
phdfs::__destruct ( void ) : void
php_user_filter::filter ( resource $in , resource $out , int &$consumed , bool $closing ) : int
php_user_filter::onClose ( void ) : void
php_user_filter::onCreate ( void ) : bool
pht\AtomicInteger::dec ( void ) : void
pht\AtomicInteger::get ( void ) : int
pht\AtomicInteger::inc ( void ) : void
pht\AtomicInteger::lock ( void ) : void
pht\AtomicInteger::set ( int $value ) : void
pht\AtomicInteger::unlock ( void ) : void
pht\AtomicInteger::__construct ([ int $value = 0 ] ) : AtomicInteger
pht\HashTable::lock ( void ) : void
pht\HashTable::size ( void ) : int
pht\HashTable::unlock ( void ) : void
pht\Queue::front ( void ) : mixed
pht\Queue::lock ( void ) : void
pht\Queue::pop ( void ) : mixed
pht\Queue::push ( mixed $value ) : void
pht\Queue::size ( void ) : int
pht\Queue::unlock ( void ) : void
pht\Runnable::run ( void ) : void
pht\Thread::addClassTask ( string $className [, mixed $...ctorArgs ] ) : void
pht\Thread::addFileTask ( string $fileName [, mixed $...globals ] ) : void
pht\Thread::addFunctionTask ( callable $func [, mixed $...funcArgs ] ) : void
pht\Thread::join ( void ) : void
pht\Thread::start ( void ) : void
pht\Thread::taskCount ( void ) : int
pht\Threaded::lock ( void ) : void
pht\Threaded::unlock ( void ) : void
pht\Vector::deleteAt ( int $offset ) : void
pht\Vector::insertAt ( mixed $value , int $offset ) : void
pht\Vector::lock ( void ) : void
pht\Vector::pop ( void ) : mixed
pht\Vector::push ( mixed $value ) : void
pht\Vector::resize ( int $size [, mixed $value = 0 ] ) : void
pht\Vector::shift ( void ) : mixed
pht\Vector::size ( void ) : int
pht\Vector::unlock ( void ) : void
pht\Vector::unshift ( mixed $value ) : void
pht\Vector::updateAt ( mixed $value , int $offset ) : void
pht\Vector::__construct ([ int $size = 0 [, mixed $value = 0 ]] ) : Vector
Pool::collect ([ Callable $collector ] ) : int
Pool::resize ( int $size ) : void
Pool::shutdown ( void ) : void
Pool::submit ( Threaded $task ) : int
Pool::submitTo ( int $worker , Threaded $task ) : int
Pool::__construct ( int $size [, string $class [, array $ctor ]] ) : Pool
QuickHashIntHash::add ( int $key [, int $value ] ) : bool
QuickHashIntHash::delete ( int $key ) : bool
QuickHashIntHash::exists ( int $key ) : bool
QuickHashIntHash::get ( int $key ) : int
QuickHashIntHash::getSize ( void ) : int
QuickHashIntHash::loadFromFile ( string $filename [, int $options ] ) : QuickHashIntHash
QuickHashIntHash::loadFromString ( string $contents [, int $options ] ) : QuickHashIntHash
QuickHashIntHash::saveToFile ( string $filename ) : void
QuickHashIntHash::saveToString ( void ) : string
QuickHashIntHash::set ( int $key , int $value ) : bool
QuickHashIntHash::update ( int $key , int $value ) : bool
QuickHashIntHash::__construct ( int $size [, int $options ] )
QuickHashIntSet::add ( int $key ) : bool
QuickHashIntSet::delete ( int $key ) : bool
QuickHashIntSet::exists ( int $key ) : bool
QuickHashIntSet::getSize ( void ) : int
QuickHashIntSet::loadFromFile ( string $filename [, int $size [, int $options ]] ) : QuickHashIntSet
QuickHashIntSet::loadFromString ( string $contents [, int $size [, int $options ]] ) : QuickHashIntSet
QuickHashIntSet::saveToFile ( string $filename ) : void
QuickHashIntSet::saveToString ( void ) : string
QuickHashIntSet::__construct ( int $size [, int $options ] )
QuickHashIntStringHash::add ( int $key , string $value ) : bool
QuickHashIntStringHash::delete ( int $key ) : bool
QuickHashIntStringHash::exists ( int $key ) : bool
QuickHashIntStringHash::get ( int $key ) : mixed
QuickHashIntStringHash::getSize ( void ) : int
QuickHashIntStringHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] ) : QuickHashIntStringHash
QuickHashIntStringHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] ) : QuickHashIntStringHash
QuickHashIntStringHash::saveToFile ( string $filename ) : void
QuickHashIntStringHash::saveToString ( void ) : string
QuickHashIntStringHash::set ( int $key , string $value ) : int
QuickHashIntStringHash::update ( int $key , string $value ) : bool
QuickHashIntStringHash::__construct ( int $size [, int $options = 0 ] )
QuickHashStringIntHash::add ( string $key , int $value ) : bool
QuickHashStringIntHash::delete ( string $key ) : bool
QuickHashStringIntHash::exists ( string $key ) : bool
QuickHashStringIntHash::get ( string $key ) : mixed
QuickHashStringIntHash::getSize ( void ) : int
QuickHashStringIntHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] ) : QuickHashStringIntHash
QuickHashStringIntHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] ) : QuickHashStringIntHash
QuickHashStringIntHash::saveToFile ( string $filename ) : void
QuickHashStringIntHash::saveToString ( void ) : string
QuickHashStringIntHash::set ( string $key , int $value ) : int
QuickHashStringIntHash::update ( string $key , int $value ) : bool
QuickHashStringIntHash::__construct ( int $size [, int $options = 0 ] )
RangeException::getCode ( void ) : mixed
RangeException::getFile ( void ) : string
RangeException::getLine ( void ) : int
RangeException::getMessage ( void ) : string
RangeException::getPrevious ( void ) : Throwable
RangeException::getTrace ( void ) : array
RangeException::getTraceAsString ( void ) : string
RangeException::__clone ( void ) : void
RangeException::__toString ( void ) : string
RarArchive::close ( void ) : bool
RarArchive::getComment ( void ) : string
RarArchive::getEntries ( void ) : array
RarArchive::getEntry ( string $entryname ) : RarEntry
RarArchive::isBroken ( void ) : bool
RarArchive::isSolid ( void ) : bool
RarArchive::open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] ) : RarArchive
RarArchive::setAllowBroken ( bool $allow_broken ) : bool
RarArchive::__toString ( void ) : string
RarEntry::extract ( string $dir [, string $filepath = "" [, string $password = NULL [, bool $extended_data = FALSE ]]] ) : bool
RarEntry::getAttr ( void ) : int
RarEntry::getCrc ( void ) : string
RarEntry::getFileTime ( void ) : string
RarEntry::getHostOs ( void ) : int
RarEntry::getMethod ( void ) : int
RarEntry::getName ( void ) : string
RarEntry::getPackedSize ( void ) : int
RarEntry::getStream ([ string $password ] ) : resource
RarEntry::getUnpackedSize ( void ) : int
RarEntry::getVersion ( void ) : int
RarEntry::isDirectory ( void ) : bool
RarEntry::isEncrypted ( void ) : bool
RarEntry::__toString ( void ) : string
RarException::getCode ( void ) : mixed
RarException::getFile ( void ) : string
RarException::getLine ( void ) : int
RarException::getMessage ( void ) : string
RarException::getPrevious ( void ) : Throwable
RarException::getTrace ( void ) : array
RarException::getTraceAsString ( void ) : string
RarException::isUsingExceptions ( void ) : bool
RarException::setUsingExceptions ( bool $using_exceptions ) : void
RarException::__clone ( void ) : void
RarException::__toString ( void ) : string
RecursiveArrayIterator::append ( mixed $value ) : void
RecursiveArrayIterator::asort ( void ) : void
RecursiveArrayIterator::count ( void ) : int
RecursiveArrayIterator::current ( void ) : mixed
RecursiveArrayIterator::getArrayCopy ( void ) : array
RecursiveArrayIterator::getChildren ( void ) : RecursiveArrayIterator
RecursiveArrayIterator::getFlags ( void ) : void
RecursiveArrayIterator::hasChildren ( void ) : bool
RecursiveArrayIterator::key ( void ) : mixed
RecursiveArrayIterator::ksort ( void ) : void
RecursiveArrayIterator::natcasesort ( void ) : void
RecursiveArrayIterator::natsort ( void ) : void
RecursiveArrayIterator::next ( void ) : void
RecursiveArrayIterator::offsetExists ( mixed $index ) : bool
RecursiveArrayIterator::offsetGet ( mixed $index ) : mixed
RecursiveArrayIterator::offsetSet ( mixed $index , mixed $newval ) : void
RecursiveArrayIterator::offsetUnset ( mixed $index ) : void
RecursiveArrayIterator::rewind ( void ) : void
RecursiveArrayIterator::seek ( int $position ) : void
RecursiveArrayIterator::serialize ( void ) : string
RecursiveArrayIterator::setFlags ( string $flags ) : void
RecursiveArrayIterator::uasort ( callable $cmp_function ) : void
RecursiveArrayIterator::uksort ( callable $cmp_function ) : void
RecursiveArrayIterator::unserialize ( string $serialized ) : string
RecursiveArrayIterator::valid ( void ) : bool
RecursiveArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )
RecursiveCachingIterator::count ( void ) : int
RecursiveCachingIterator::current ( void ) : void
RecursiveCachingIterator::getCache ( void ) : array
RecursiveCachingIterator::getChildren ( void ) : RecursiveCachingIterator
RecursiveCachingIterator::getFlags ( void ) : int
RecursiveCachingIterator::getInnerIterator ( void ) : Iterator
RecursiveCachingIterator::hasChildren ( void ) : bool
RecursiveCachingIterator::hasNext ( void ) : void
RecursiveCachingIterator::key ( void ) : scalar
RecursiveCachingIterator::next ( void ) : void
RecursiveCachingIterator::offsetExists ( mixed $index ) : void
RecursiveCachingIterator::offsetGet ( string $index ) : void
RecursiveCachingIterator::offsetSet ( mixed $index , mixed $newval ) : void
RecursiveCachingIterator::offsetUnset ( string $index ) : void
RecursiveCachingIterator::rewind ( void ) : void
RecursiveCachingIterator::setFlags ( int $flags ) : void
RecursiveCachingIterator::valid ( void ) : void
RecursiveCachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
RecursiveCachingIterator::__toString ( void ) : void
RecursiveCallbackFilterIterator::accept ( void ) : bool
RecursiveCallbackFilterIterator::getChildren ( void ) : RecursiveCallbackFilterIterator
RecursiveCallbackFilterIterator::hasChildren ( void ) : bool
RecursiveCallbackFilterIterator::__construct ( RecursiveIterator $iterator , string $callback )
RecursiveDirectoryIterator::current ( void ) : mixed
RecursiveDirectoryIterator::getChildren ( void ) : mixed
RecursiveDirectoryIterator::getFlags ( void ) : int
RecursiveDirectoryIterator::getSubPath ( void ) : string
RecursiveDirectoryIterator::getSubPathname ( void ) : string
RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = FALSE ] ) : bool
RecursiveDirectoryIterator::key ( void ) : string
RecursiveDirectoryIterator::next ( void ) : void
RecursiveDirectoryIterator::rewind ( void ) : void
RecursiveDirectoryIterator::setFlags ([ int $flags ] ) : void
RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
RecursiveFilterIterator::accept ( void ) : bool
RecursiveFilterIterator::current ( void ) : mixed
RecursiveFilterIterator::getChildren ( void ) : RecursiveFilterIterator
RecursiveFilterIterator::getInnerIterator ( void ) : Iterator
RecursiveFilterIterator::hasChildren ( void ) : bool
RecursiveFilterIterator::key ( void ) : mixed
RecursiveFilterIterator::next ( void ) : void
RecursiveFilterIterator::rewind ( void ) : void
RecursiveFilterIterator::valid ( void ) : bool
RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )
RecursiveIterator::current ( void ) : mixed
RecursiveIterator::getChildren ( void ) : RecursiveIterator
RecursiveIterator::hasChildren ( void ) : bool
RecursiveIterator::key ( void ) : scalar
RecursiveIterator::next ( void ) : void
RecursiveIterator::rewind ( void ) : void
RecursiveIterator::valid ( void ) : bool
RecursiveIteratorIterator::beginChildren ( void ) : void
RecursiveIteratorIterator::beginIteration ( void ) : void
RecursiveIteratorIterator::callGetChildren ( void ) : RecursiveIterator
RecursiveIteratorIterator::callHasChildren ( void ) : bool
RecursiveIteratorIterator::current ( void ) : mixed
RecursiveIteratorIterator::endChildren ( void ) : void
RecursiveIteratorIterator::endIteration ( void ) : void
RecursiveIteratorIterator::getDepth ( void ) : int
RecursiveIteratorIterator::getInnerIterator ( void ) : iterator
RecursiveIteratorIterator::getMaxDepth ( void ) : mixed
RecursiveIteratorIterator::getSubIterator ([ int $level ] ) : RecursiveIterator
RecursiveIteratorIterator::key ( void ) : mixed
RecursiveIteratorIterator::next ( void ) : void
RecursiveIteratorIterator::nextElement ( void ) : void
RecursiveIteratorIterator::rewind ( void ) : void
RecursiveIteratorIterator::setMaxDepth ([ int $max_depth = -1 ] ) : void
RecursiveIteratorIterator::valid ( void ) : bool
RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )
RecursiveRegexIterator::accept ( void ) : bool
RecursiveRegexIterator::getChildren ( void ) : RecursiveRegexIterator
RecursiveRegexIterator::getFlags ( void ) : int
RecursiveRegexIterator::getMode ( void ) : int
RecursiveRegexIterator::getPregFlags ( void ) : int
RecursiveRegexIterator::getRegex ( void ) : string
RecursiveRegexIterator::hasChildren ( void ) : bool
RecursiveRegexIterator::setFlags ( int $flags ) : void
RecursiveRegexIterator::setMode ( int $mode ) : void
RecursiveRegexIterator::setPregFlags ( int $preg_flags ) : void
RecursiveRegexIterator::__construct ( RecursiveIterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
RecursiveTreeIterator::beginChildren ( void ) : void
RecursiveTreeIterator::beginIteration ( void ) : RecursiveIterator
RecursiveTreeIterator::callGetChildren ( void ) : RecursiveIterator
RecursiveTreeIterator::callHasChildren ( void ) : bool
RecursiveTreeIterator::current ( void ) : string
RecursiveTreeIterator::endChildren ( void ) : void
RecursiveTreeIterator::endIteration ( void ) : void
RecursiveTreeIterator::getDepth ( void ) : int
RecursiveTreeIterator::getEntry ( void ) : string
RecursiveTreeIterator::getInnerIterator ( void ) : iterator
RecursiveTreeIterator::getMaxDepth ( void ) : mixed
RecursiveTreeIterator::getPostfix ( void ) : string
RecursiveTreeIterator::getPrefix ( void ) : string
RecursiveTreeIterator::getSubIterator ([ int $level ] ) : RecursiveIterator
RecursiveTreeIterator::key ( void ) : string
RecursiveTreeIterator::next ( void ) : void
RecursiveTreeIterator::nextElement ( void ) : void
RecursiveTreeIterator::rewind ( void ) : void
RecursiveTreeIterator::setMaxDepth ([ int $max_depth = -1 ] ) : void
RecursiveTreeIterator::setPostfix ( string $postfix ) : void
RecursiveTreeIterator::setPrefixPart ( int $part , string $value ) : void
RecursiveTreeIterator::valid ( void ) : bool
RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )
Reflection::export ( Reflector $reflector [, bool $return = FALSE ] ) : string
Reflection::getModifierNames ( int $modifiers ) : array
ReflectionClass::export ( mixed $argument [, bool $return = FALSE ] ) : string
ReflectionClass::getConstant ( string $name ) : mixed
ReflectionClass::getConstants ( void ) : array
ReflectionClass::getConstructor ( void ) : ReflectionMethod
ReflectionClass::getDefaultProperties ( void ) : array
ReflectionClass::getDocComment ( void ) : string
ReflectionClass::getEndLine ( void ) : int
ReflectionClass::getExtension ( void ) : ReflectionExtension
ReflectionClass::getExtensionName ( void ) : string
ReflectionClass::getFileName ( void ) : string
ReflectionClass::getInterfaceNames ( void ) : array
ReflectionClass::getInterfaces ( void ) : array
ReflectionClass::getMethod ( string $name ) : ReflectionMethod
ReflectionClass::getMethods ([ int $filter ] ) : array
ReflectionClass::getModifiers ( void ) : int
ReflectionClass::getName ( void ) : string
ReflectionClass::getNamespaceName ( void ) : string
ReflectionClass::getParentClass ( void ) : ReflectionClass
ReflectionClass::getProperties ([ int $filter ] ) : array
ReflectionClass::getProperty ( string $name ) : ReflectionProperty
ReflectionClass::getReflectionConstant ( string $name ) : ReflectionClassConstant
ReflectionClass::getReflectionConstants ( void ) : array
ReflectionClass::getShortName ( void ) : string
ReflectionClass::getStartLine ( void ) : int
ReflectionClass::getStaticProperties ( void ) : array
ReflectionClass::getStaticPropertyValue ( string $name [, mixed &$def_value ] ) : mixed
ReflectionClass::getTraitAliases ( void ) : array
ReflectionClass::getTraitNames ( void ) : array
ReflectionClass::getTraits ( void ) : array
ReflectionClass::hasConstant ( string $name ) : bool
ReflectionClass::hasMethod ( string $name ) : bool
ReflectionClass::hasProperty ( string $name ) : bool
ReflectionClass::implementsInterface ( string $interface ) : bool
ReflectionClass::inNamespace ( void ) : bool
ReflectionClass::isAbstract ( void ) : bool
ReflectionClass::isAnonymous ( void ) : bool
ReflectionClass::isCloneable ( void ) : bool
ReflectionClass::isFinal ( void ) : bool
ReflectionClass::isInstance ( object $object ) : bool
ReflectionClass::isInstantiable ( void ) : bool
ReflectionClass::isInterface ( void ) : bool
ReflectionClass::isInternal ( void ) : bool
ReflectionClass::isIterable ( void ) : bool
ReflectionClass::isSubclassOf ( mixed $class ) : bool
ReflectionClass::isTrait ( void ) : bool
ReflectionClass::isUserDefined ( void ) : bool
ReflectionClass::newInstance ([ mixed $... ] ) : object
ReflectionClass::newInstanceArgs ([ array $args ] ) : object
ReflectionClass::newInstanceWithoutConstructor ( void ) : object
ReflectionClass::setStaticPropertyValue ( string $name , mixed $value ) : void
ReflectionClass::__construct ( mixed $argument )
ReflectionClass::__toString ( void ) : string
ReflectionClassConstant::export ( mixed $class , string $name [, bool $return ] ) : string
ReflectionClassConstant::getDeclaringClass ( void ) : ReflectionClass
ReflectionClassConstant::getDocComment ( void ) : string
ReflectionClassConstant::getModifiers ( void ) : int
ReflectionClassConstant::getName ( void ) : string
ReflectionClassConstant::getValue ( void ) : mixed
ReflectionClassConstant::isPrivate ( void ) : bool
ReflectionClassConstant::isProtected ( void ) : bool
ReflectionClassConstant::isPublic ( void ) : bool
ReflectionClassConstant::__construct ( mixed $class , string $name )
ReflectionClassConstant::__toString ( void ) : string
ReflectionException::getCode ( void ) : mixed
ReflectionException::getFile ( void ) : string
ReflectionException::getLine ( void ) : int
ReflectionException::getMessage ( void ) : string
ReflectionException::getPrevious ( void ) : Throwable
ReflectionException::getTrace ( void ) : array
ReflectionException::getTraceAsString ( void ) : string
ReflectionException::__clone ( void ) : void
ReflectionException::__toString ( void ) : string
ReflectionExtension::export ( string $name [, string $return = FALSE ] ) : string
ReflectionExtension::getClasses ( void ) : array
ReflectionExtension::getClassNames ( void ) : array
ReflectionExtension::getConstants ( void ) : array
ReflectionExtension::getDependencies ( void ) : array
ReflectionExtension::getFunctions ( void ) : array
ReflectionExtension::getINIEntries ( void ) : array
ReflectionExtension::getName ( void ) : string
ReflectionExtension::getVersion ( void ) : string
ReflectionExtension::info ( void ) : void
ReflectionExtension::isPersistent ( void ) : void
ReflectionExtension::isTemporary ( void ) : void
ReflectionExtension::__clone ( void ) : void
ReflectionExtension::__construct ( string $name )
ReflectionExtension::__toString ( void ) : string
ReflectionFunction::export ( string $name [, string $return ] ) : string
ReflectionFunction::getClosure ( void ) : Closure
ReflectionFunction::getClosureScopeClass ( void ) : ReflectionClass
ReflectionFunction::getClosureThis ( void ) : object
ReflectionFunction::getDocComment ( void ) : string
ReflectionFunction::getEndLine ( void ) : int
ReflectionFunction::getExtension ( void ) : ReflectionExtension
ReflectionFunction::getExtensionName ( void ) : string
ReflectionFunction::getFileName ( void ) : string
ReflectionFunction::getName ( void ) : string
ReflectionFunction::getNamespaceName ( void ) : string
ReflectionFunction::getNumberOfParameters ( void ) : int
ReflectionFunction::getNumberOfRequiredParameters ( void ) : int
ReflectionFunction::getParameters ( void ) : array
ReflectionFunction::getReturnType ( void ) : ReflectionType
ReflectionFunction::getShortName ( void ) : string
ReflectionFunction::getStartLine ( void ) : int
ReflectionFunction::getStaticVariables ( void ) : array
ReflectionFunction::hasReturnType ( void ) : bool
ReflectionFunction::inNamespace ( void ) : bool
ReflectionFunction::invoke ([ mixed $... ] ) : mixed
ReflectionFunction::invokeArgs ( array $args ) : mixed
ReflectionFunction::isClosure ( void ) : bool
ReflectionFunction::isDeprecated ( void ) : bool
ReflectionFunction::isDisabled ( void ) : bool
ReflectionFunction::isGenerator ( void ) : bool
ReflectionFunction::isInternal ( void ) : bool
ReflectionFunction::isUserDefined ( void ) : bool
ReflectionFunction::isVariadic ( void ) : bool
ReflectionFunction::returnsReference ( void ) : bool
ReflectionFunction::__clone ( void ) : void
ReflectionFunction::__construct ( mixed $name )
ReflectionFunction::__toString ( void ) : string
ReflectionFunctionAbstract::getClosureScopeClass ( void ) : ReflectionClass
ReflectionFunctionAbstract::getClosureThis ( void ) : object
ReflectionFunctionAbstract::getDocComment ( void ) : string
ReflectionFunctionAbstract::getEndLine ( void ) : int
ReflectionFunctionAbstract::getExtension ( void ) : ReflectionExtension
ReflectionFunctionAbstract::getExtensionName ( void ) : string
ReflectionFunctionAbstract::getFileName ( void ) : string
ReflectionFunctionAbstract::getName ( void ) : string
ReflectionFunctionAbstract::getNamespaceName ( void ) : string
ReflectionFunctionAbstract::getNumberOfParameters ( void ) : int
ReflectionFunctionAbstract::getNumberOfRequiredParameters ( void ) : int
ReflectionFunctionAbstract::getParameters ( void ) : array
ReflectionFunctionAbstract::getReturnType ( void ) : ReflectionType
ReflectionFunctionAbstract::getShortName ( void ) : string
ReflectionFunctionAbstract::getStartLine ( void ) : int
ReflectionFunctionAbstract::getStaticVariables ( void ) : array
ReflectionFunctionAbstract::hasReturnType ( void ) : bool
ReflectionFunctionAbstract::inNamespace ( void ) : bool
ReflectionFunctionAbstract::isClosure ( void ) : bool
ReflectionFunctionAbstract::isDeprecated ( void ) : bool
ReflectionFunctionAbstract::isGenerator ( void ) : bool
ReflectionFunctionAbstract::isInternal ( void ) : bool
ReflectionFunctionAbstract::isUserDefined ( void ) : bool
ReflectionFunctionAbstract::isVariadic ( void ) : bool
ReflectionFunctionAbstract::returnsReference ( void ) : bool
ReflectionFunctionAbstract::__clone ( void ) : void
ReflectionFunctionAbstract::__toString ( void ) : void
ReflectionGenerator::getExecutingFile ( void ) : string
ReflectionGenerator::getExecutingGenerator ( void ) : Generator
ReflectionGenerator::getExecutingLine ( void ) : int
ReflectionGenerator::getFunction ( void ) : ReflectionFunctionAbstract
ReflectionGenerator::getThis ( void ) : object
ReflectionGenerator::getTrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT ] ) : array
ReflectionGenerator::__construct ( Generator $generator )
ReflectionMethod::export ( string $class , string $name [, bool $return = FALSE ] ) : string
ReflectionMethod::getClosure ( object $object ) : Closure
ReflectionMethod::getClosureScopeClass ( void ) : ReflectionClass
ReflectionMethod::getClosureThis ( void ) : object
ReflectionMethod::getDeclaringClass ( void ) : ReflectionClass
ReflectionMethod::getDocComment ( void ) : string
ReflectionMethod::getEndLine ( void ) : int
ReflectionMethod::getExtension ( void ) : ReflectionExtension
ReflectionMethod::getExtensionName ( void ) : string
ReflectionMethod::getFileName ( void ) : string
ReflectionMethod::getModifiers ( void ) : int
ReflectionMethod::getName ( void ) : string
ReflectionMethod::getNamespaceName ( void ) : string
ReflectionMethod::getNumberOfParameters ( void ) : int
ReflectionMethod::getNumberOfRequiredParameters ( void ) : int
ReflectionMethod::getParameters ( void ) : array
ReflectionMethod::getPrototype ( void ) : ReflectionMethod
ReflectionMethod::getReturnType ( void ) : ReflectionType
ReflectionMethod::getShortName ( void ) : string
ReflectionMethod::getStartLine ( void ) : int
ReflectionMethod::getStaticVariables ( void ) : array
ReflectionMethod::hasReturnType ( void ) : bool
ReflectionMethod::inNamespace ( void ) : bool
ReflectionMethod::invoke ( object $object [, mixed $... ] ) : mixed
ReflectionMethod::invokeArgs ( object $object , array $args ) : mixed
ReflectionMethod::isAbstract ( void ) : bool
ReflectionMethod::isClosure ( void ) : bool
ReflectionMethod::isConstructor ( void ) : bool
ReflectionMethod::isDeprecated ( void ) : bool
ReflectionMethod::isDestructor ( void ) : bool
ReflectionMethod::isFinal ( void ) : bool
ReflectionMethod::isGenerator ( void ) : bool
ReflectionMethod::isInternal ( void ) : bool
ReflectionMethod::isPrivate ( void ) : bool
ReflectionMethod::isProtected ( void ) : bool
ReflectionMethod::isPublic ( void ) : bool
ReflectionMethod::isStatic ( void ) : bool
ReflectionMethod::isUserDefined ( void ) : bool
ReflectionMethod::isVariadic ( void ) : bool
ReflectionMethod::returnsReference ( void ) : bool
ReflectionMethod::setAccessible ( bool $accessible ) : void
ReflectionMethod::__clone ( void ) : void
ReflectionMethod::__construct ( mixed $class , string $name )
ReflectionMethod::__toString ( void ) : string
ReflectionNamedType::allowsNull ( void ) : bool
ReflectionNamedType::getName ( void ) : string
ReflectionNamedType::isBuiltin ( void ) : bool
ReflectionNamedType::__toString ( void ) : string
ReflectionObject::export ( string $argument [, bool $return ] ) : string
ReflectionObject::getConstant ( string $name ) : mixed
ReflectionObject::getConstants ( void ) : array
ReflectionObject::getConstructor ( void ) : ReflectionMethod
ReflectionObject::getDefaultProperties ( void ) : array
ReflectionObject::getDocComment ( void ) : string
ReflectionObject::getEndLine ( void ) : int
ReflectionObject::getExtension ( void ) : ReflectionExtension
ReflectionObject::getExtensionName ( void ) : string
ReflectionObject::getFileName ( void ) : string
ReflectionObject::getInterfaceNames ( void ) : array
ReflectionObject::getInterfaces ( void ) : array
ReflectionObject::getMethod ( string $name ) : ReflectionMethod
ReflectionObject::getMethods ([ int $filter ] ) : array
ReflectionObject::getModifiers ( void ) : int
ReflectionObject::getName ( void ) : string
ReflectionObject::getNamespaceName ( void ) : string
ReflectionObject::getParentClass ( void ) : ReflectionClass
ReflectionObject::getProperties ([ int $filter ] ) : array
ReflectionObject::getProperty ( string $name ) : ReflectionProperty
ReflectionObject::getReflectionConstant ( string $name ) : ReflectionClassConstant
ReflectionObject::getReflectionConstants ( void ) : array
ReflectionObject::getShortName ( void ) : string
ReflectionObject::getStartLine ( void ) : int
ReflectionObject::getStaticProperties ( void ) : array
ReflectionObject::getStaticPropertyValue ( string $name [, mixed &$def_value ] ) : mixed
ReflectionObject::getTraitAliases ( void ) : array
ReflectionObject::getTraitNames ( void ) : array
ReflectionObject::getTraits ( void ) : array
ReflectionObject::hasConstant ( string $name ) : bool
ReflectionObject::hasMethod ( string $name ) : bool
ReflectionObject::hasProperty ( string $name ) : bool
ReflectionObject::implementsInterface ( string $interface ) : bool
ReflectionObject::inNamespace ( void ) : bool
ReflectionObject::isAbstract ( void ) : bool
ReflectionObject::isAnonymous ( void ) : bool
ReflectionObject::isCloneable ( void ) : bool
ReflectionObject::isFinal ( void ) : bool
ReflectionObject::isInstance ( object $object ) : bool
ReflectionObject::isInstantiable ( void ) : bool
ReflectionObject::isInterface ( void ) : bool
ReflectionObject::isInternal ( void ) : bool
ReflectionObject::isIterable ( void ) : bool
ReflectionObject::isSubclassOf ( mixed $class ) : bool
ReflectionObject::isTrait ( void ) : bool
ReflectionObject::isUserDefined ( void ) : bool
ReflectionObject::newInstance ([ mixed $... ] ) : object
ReflectionObject::newInstanceArgs ([ array $args ] ) : object
ReflectionObject::newInstanceWithoutConstructor ( void ) : object
ReflectionObject::setStaticPropertyValue ( string $name , mixed $value ) : void
ReflectionObject::__construct ( object $argument )
ReflectionObject::__toString ( void ) : string
ReflectionParameter::allowsNull ( void ) : bool
ReflectionParameter::canBePassedByValue ( void ) : bool
ReflectionParameter::export ( string $function , string $parameter [, bool $return ] ) : string
ReflectionParameter::getClass ( void ) : ReflectionClass
ReflectionParameter::getDeclaringClass ( void ) : ReflectionClass
ReflectionParameter::getDeclaringFunction ( void ) : ReflectionFunctionAbstract
ReflectionParameter::getDefaultValue ( void ) : mixed
ReflectionParameter::getDefaultValueConstantName ( void ) : string
ReflectionParameter::getName ( void ) : string
ReflectionParameter::getPosition ( void ) : int
ReflectionParameter::getType ( void ) : ReflectionType
ReflectionParameter::hasType ( void ) : bool
ReflectionParameter::isArray ( void ) : bool
ReflectionParameter::isCallable ( void ) : bool
ReflectionParameter::isDefaultValueAvailable ( void ) : bool
ReflectionParameter::isDefaultValueConstant ( void ) : bool
ReflectionParameter::isOptional ( void ) : bool
ReflectionParameter::isPassedByReference ( void ) : bool
ReflectionParameter::isVariadic ( void ) : bool
ReflectionParameter::__clone ( void ) : void
ReflectionParameter::__construct ( string $function , string $parameter )
ReflectionParameter::__toString ( void ) : string
ReflectionProperty::export ( mixed $class , string $name [, bool $return ] ) : string
ReflectionProperty::getDeclaringClass ( void ) : ReflectionClass
ReflectionProperty::getDocComment ( void ) : string
ReflectionProperty::getModifiers ( void ) : int
ReflectionProperty::getName ( void ) : string
ReflectionProperty::getValue ([ object $object ] ) : mixed
ReflectionProperty::isDefault ( void ) : bool
ReflectionProperty::isPrivate ( void ) : bool
ReflectionProperty::isProtected ( void ) : bool
ReflectionProperty::isPublic ( void ) : bool
ReflectionProperty::isStatic ( void ) : bool
ReflectionProperty::setAccessible ( bool $accessible ) : void
ReflectionProperty::setValue ( object $object , mixed $value ) : void [:OR:] ( mixed $value ) : void
ReflectionProperty::__clone ( void ) : void
ReflectionProperty::__construct ( mixed $class , string $name )
ReflectionProperty::__toString ( void ) : string
ReflectionType::allowsNull ( void ) : bool
ReflectionType::isBuiltin ( void ) : bool
ReflectionType::__toString ( void ) : string
ReflectionZendExtension::export ( string $name [, bool $return ] ) : string
ReflectionZendExtension::getAuthor ( void ) : string
ReflectionZendExtension::getCopyright ( void ) : string
ReflectionZendExtension::getName ( void ) : string
ReflectionZendExtension::getURL ( void ) : string
ReflectionZendExtension::getVersion ( void ) : string
ReflectionZendExtension::__clone ( void ) : void
ReflectionZendExtension::__construct ( string $name )
ReflectionZendExtension::__toString ( void ) : string
Reflector::export ( void ) : string
Reflector::__toString ( void ) : string
RegexIterator::accept ( void ) : bool
RegexIterator::current ( void ) : mixed
RegexIterator::getFlags ( void ) : int
RegexIterator::getInnerIterator ( void ) : Iterator
RegexIterator::getMode ( void ) : int
RegexIterator::getPregFlags ( void ) : int
RegexIterator::getRegex ( void ) : string
RegexIterator::key ( void ) : mixed
RegexIterator::next ( void ) : void
RegexIterator::rewind ( void ) : void
RegexIterator::setFlags ( int $flags ) : void
RegexIterator::setMode ( int $mode ) : void
RegexIterator::setPregFlags ( int $preg_flags ) : void
RegexIterator::valid ( void ) : bool
RegexIterator::__construct ( Iterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
ResourceBundle::count ( void ) : int
ResourceBundle::create ( string $locale , string $bundlename [, bool $fallback ] ) : ResourceBundle
ResourceBundle::get ( string|int $index [, bool $fallback = TRUE ] ) : mixed
ResourceBundle::getErrorCode ( void ) : int
ResourceBundle::getErrorMessage ( void ) : string
ResourceBundle::getLocales ( string $bundlename ) : array
ResourceBundle::__construct ( string $locale , string $bundlename [, bool $fallback ] )
RRDCreator::addArchive ( string $description ) : void
RRDCreator::addDataSource ( string $description ) : void
RRDCreator::save ( void ) : bool
RRDCreator::__construct ( string $path [, string $startTime [, int $step = 0 ]] )
RRDGraph::save ( void ) : array
RRDGraph::saveVerbose ( void ) : array
RRDGraph::setOptions ( array $options ) : void
RRDGraph::__construct ( string $path )
RRDUpdater::update ( array $values [, string $time = time() ] ) : bool
RRDUpdater::__construct ( string $path )
RuntimeException::getCode ( void ) : mixed
RuntimeException::getFile ( void ) : string
RuntimeException::getLine ( void ) : int
RuntimeException::getMessage ( void ) : string
RuntimeException::getPrevious ( void ) : Throwable
RuntimeException::getTrace ( void ) : array
RuntimeException::getTraceAsString ( void ) : string
RuntimeException::__clone ( void ) : void
RuntimeException::__toString ( void ) : string
SeasLog::alert ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::analyzerCount ( string $level [, string $log_path [, string $key_word ]] ) : mixed
SeasLog::analyzerDetail ( string $level [, string $log_path [, string $key_word [, int $start [, int $limit [, int $order ]]]]] ) : mixed
SeasLog::closeLoggerStream ( int $model , string $logger ) : bool
SeasLog::critical ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::debug ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::emergency ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::error ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::flushBuffer ( void ) : bool
SeasLog::getBasePath ( void ) : string
SeasLog::getBuffer ( void ) : array
SeasLog::getBufferEnabled ( void ) : bool
SeasLog::getDatetimeFormat ( void ) : string
SeasLog::getLastLogger ( void ) : string
SeasLog::getRequestID ( void ) : string
SeasLog::getRequestVariable ( int $key ) : bool
SeasLog::info ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::log ( string $level [, string $message [, array $content [, string $logger ]]] ) : bool
SeasLog::notice ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::setBasePath ( string $base_path ) : bool
SeasLog::setDatetimeFormat ( string $format ) : bool
SeasLog::setLogger ( string $logger ) : bool
SeasLog::setRequestID ( string $request_id ) : bool
SeasLog::setRequestVariable ( int $key , string $value ) : bool
SeasLog::warning ( string $message [, array $content [, string $logger ]] ) : bool
SeasLog::__destruct ( void )
SeekableIterator::current ( void ) : mixed
SeekableIterator::key ( void ) : scalar
SeekableIterator::next ( void ) : void
SeekableIterator::rewind ( void ) : void
SeekableIterator::seek ( int $position ) : void
SeekableIterator::valid ( void ) : bool
Serializable::serialize ( void ) : string
Serializable::unserialize ( string $serialized ) : void
SessionHandler::close ( void ) : bool
SessionHandler::create_sid ( void ) : string
SessionHandler::destroy ( string $session_id ) : bool
SessionHandler::gc ( int $maxlifetime ) : int
SessionHandler::open ( string $save_path , string $session_name ) : bool
SessionHandler::read ( string $session_id ) : string
SessionHandler::write ( string $session_id , string $session_data ) : bool
SessionHandlerInterface::close ( void ) : bool
SessionHandlerInterface::destroy ( string $session_id ) : bool
SessionHandlerInterface::gc ( int $maxlifetime ) : int
SessionHandlerInterface::open ( string $save_path , string $session_name ) : bool
SessionHandlerInterface::read ( string $session_id ) : string
SessionHandlerInterface::write ( string $session_id , string $session_data ) : bool
SessionIdInterface::create_sid ( void ) : string
SessionUpdateTimestampHandlerInterface::updateTimestamp ( string $key , string $val ) : bool
SessionUpdateTimestampHandlerInterface::validateId ( string $key ) : bool
SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] ) : void
SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] ) : SimpleXMLElement
SimpleXMLElement::asXML ([ string $filename ] ) : mixed
SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = FALSE ]] ) : SimpleXMLElement
SimpleXMLElement::children ([ string $ns [, bool $is_prefix = FALSE ]] ) : SimpleXMLElement
SimpleXMLElement::count ( void ) : int
SimpleXMLElement::getDocNamespaces ([ bool $recursive = FALSE [, bool $from_root = TRUE ]] ) : array
SimpleXMLElement::getName ( void ) : string
SimpleXMLElement::getNamespaces ([ bool $recursive = FALSE ] ) : array
SimpleXMLElement::registerXPathNamespace ( string $prefix , string $ns ) : bool
SimpleXMLElement::xpath ( string $path ) : array
SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
SimpleXMLElement::__toString ( void ) : string
SimpleXMLIterator::addAttribute ( string $name [, string $value [, string $namespace ]] ) : void
SimpleXMLIterator::addChild ( string $name [, string $value [, string $namespace ]] ) : SimpleXMLElement
SimpleXMLIterator::asXML ([ string $filename ] ) : mixed
SimpleXMLIterator::attributes ([ string $ns = NULL [, bool $is_prefix = FALSE ]] ) : SimpleXMLElement
SimpleXMLIterator::children ([ string $ns [, bool $is_prefix = FALSE ]] ) : SimpleXMLElement
SimpleXMLIterator::count ( void ) : int
SimpleXMLIterator::current ( void ) : mixed
SimpleXMLIterator::getChildren ( void ) : SimpleXMLIterator
SimpleXMLIterator::getDocNamespaces ([ bool $recursive = FALSE [, bool $from_root = TRUE ]] ) : array
SimpleXMLIterator::getName ( void ) : string
SimpleXMLIterator::getNamespaces ([ bool $recursive = FALSE ] ) : array
SimpleXMLIterator::hasChildren ( void ) : bool
SimpleXMLIterator::key ( void ) : mixed
SimpleXMLIterator::next ( void ) : void
SimpleXMLIterator::registerXPathNamespace ( string $prefix , string $ns ) : bool
SimpleXMLIterator::rewind ( void ) : void
SimpleXMLIterator::valid ( void ) : bool
SimpleXMLIterator::xpath ( string $path ) : array
SimpleXMLIterator::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
SimpleXMLIterator::__toString ( void ) : string
SNMP::close ( void ) : bool
SNMP::get ( mixed $object_id [, bool $preserve_keys = FALSE ] ) : mixed
SNMP::getErrno ( void ) : int
SNMP::getError ( void ) : string
SNMP::getnext ( mixed $object_id ) : mixed
SNMP::set ( mixed $object_id , mixed $type , mixed $value ) : bool
SNMP::setSecurity ( string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID = ]]]]]] ) : bool
SNMP::walk ( string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters ]]] ) : array
SNMP::__construct ( int $version , string $hostname , string $community [, int $timeout = 1000000 [, int $retries = 5 ]] )
SNMPException::getCode ( void ) : mixed
SNMPException::getFile ( void ) : string
SNMPException::getLine ( void ) : int
SNMPException::getMessage ( void ) : string
SNMPException::getPrevious ( void ) : Throwable
SNMPException::getTrace ( void ) : array
SNMPException::getTraceAsString ( void ) : string
SNMPException::__clone ( void ) : void
SNMPException::__toString ( void ) : string
SoapClient::SoapClient ( mixed $wsdl [, array $options ] )
SoapClient::__call ( string $function_name , array $arguments ) : mixed
SoapClient::__construct ( mixed $wsdl [, array $options ] )
SoapClient::__doRequest ( string $request , string $location , string $action , int $version [, int $one_way = 0 ] ) : string
SoapClient::__getCookies ( void ) : array
SoapClient::__getFunctions ( void ) : array
SoapClient::__getLastRequest ( void ) : string
SoapClient::__getLastRequestHeaders ( void ) : string
SoapClient::__getLastResponse ( void ) : string
SoapClient::__getLastResponseHeaders ( void ) : string
SoapClient::__getTypes ( void ) : array
SoapClient::__setCookie ( string $name [, string $value ] ) : void
SoapClient::__setLocation ([ string $new_location ] ) : string
SoapClient::__setSoapHeaders ([ mixed $soapheaders ] ) : bool
SoapClient::__soapCall ( string $function_name , array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]] ) : mixed
SoapFault::getCode ( void ) : mixed
SoapFault::getFile ( void ) : string
SoapFault::getLine ( void ) : int
SoapFault::getMessage ( void ) : string
SoapFault::getPrevious ( void ) : Throwable
SoapFault::getTrace ( void ) : array
SoapFault::getTraceAsString ( void ) : string
SoapFault::SoapFault ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )
SoapFault::__clone ( void ) : void
SoapFault::__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )
SoapFault::__toString ( void ) : string
SoapHeader::SoapHeader ( string $namespace , string $name [, mixed $data [, bool $mustunderstand = FALSE [, string $actor ]]] )
SoapHeader::__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )
SoapParam::SoapParam ( mixed $data , string $name )
SoapParam::__construct ( mixed $data , string $name )
SoapServer::addFunction ( mixed $functions ) : void
SoapServer::addSoapHeader ( SoapHeader $object ) : void
SoapServer::fault ( string $code , string $string [, string $actor [, string $details [, string $name ]]] ) : void
SoapServer::getFunctions ( void ) : array
SoapServer::handle ([ string $soap_request ] ) : void
SoapServer::setClass ( string $class_name [, mixed $... ] ) : void
SoapServer::setObject ( object $object ) : void
SoapServer::setPersistence ( int $mode ) : void
SoapServer::SoapServer ( mixed $wsdl [, array $options ] )
SoapServer::__construct ( mixed $wsdl [, array $options ] )
SoapVar::SoapVar ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )
SoapVar::__construct ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )
SolrClient::addDocument ( SolrInputDocument $doc [, bool $overwrite = TRUE [, int $commitWithin = 0 ]] ) : SolrUpdateResponse
SolrClient::addDocuments ( array $docs [, bool $overwrite = TRUE [, int $commitWithin = 0 ]] ) : void
SolrClient::commit ([ bool $softCommit = FALSE [, bool $waitSearcher = TRUE [, bool $expungeDeletes = FALSE ]]] ) : SolrUpdateResponse
SolrClient::deleteById ( string $id ) : SolrUpdateResponse
SolrClient::deleteByIds ( array $ids ) : SolrUpdateResponse
SolrClient::deleteByQueries ( array $queries ) : SolrUpdateResponse
SolrClient::deleteByQuery ( string $query ) : SolrUpdateResponse
SolrClient::getById ( string $id ) : SolrQueryResponse
SolrClient::getByIds ( array $ids ) : SolrQueryResponse
SolrClient::getDebug ( void ) : string
SolrClient::getOptions ( void ) : array
SolrClient::optimize ([ int $maxSegments = 1 [, bool $softCommit = TRUE [, bool $waitSearcher = TRUE ]]] ) : SolrUpdateResponse
SolrClient::ping ( void ) : SolrPingResponse
SolrClient::query ( SolrParams $query ) : SolrQueryResponse
SolrClient::request ( string $raw_request ) : SolrUpdateResponse
SolrClient::rollback ( void ) : SolrUpdateResponse
SolrClient::setResponseWriter ( string $responseWriter ) : void
SolrClient::setServlet ( int $type , string $value ) : bool
SolrClient::system ( void ) : void
SolrClient::threads ( void ) : void
SolrClient::__construct ( array $clientOptions )
SolrClient::__destruct ( void ) : void
SolrClientException::getCode ( void ) : mixed
SolrClientException::getFile ( void ) : string
SolrClientException::getInternalInfo ( void ) : array
SolrClientException::getLine ( void ) : int
SolrClientException::getMessage ( void ) : string
SolrClientException::getPrevious ( void ) : Throwable
SolrClientException::getTrace ( void ) : array
SolrClientException::getTraceAsString ( void ) : string
SolrClientException::__clone ( void ) : void
SolrClientException::__toString ( void ) : string
SolrCollapseFunction::getField ( void ) : string
SolrCollapseFunction::getHint ( void ) : string
SolrCollapseFunction::getMax ( void ) : string
SolrCollapseFunction::getMin ( void ) : string
SolrCollapseFunction::getNullPolicy ( void ) : string
SolrCollapseFunction::getSize ( void ) : int
SolrCollapseFunction::setField ( string $fieldName ) : SolrCollapseFunction
SolrCollapseFunction::setHint ( string $hint ) : SolrCollapseFunction
SolrCollapseFunction::setMax ( string $max ) : SolrCollapseFunction
SolrCollapseFunction::setMin ( string $min ) : SolrCollapseFunction
SolrCollapseFunction::setNullPolicy ( string $nullPolicy ) : SolrCollapseFunction
SolrCollapseFunction::setSize ( int $size ) : SolrCollapseFunction
SolrCollapseFunction::__construct ([ string $field ] )
SolrCollapseFunction::__toString ( void ) : string
SolrDisMaxQuery::addBigramPhraseField ( string $field , string $boost [, string $slop ] ) : SolrDisMaxQuery
SolrDisMaxQuery::addBoostQuery ( string $field , string $value [, string $boost ] ) : SolrDisMaxQuery
SolrDisMaxQuery::addExpandFilterQuery ( string $fq ) : SolrQuery
SolrDisMaxQuery::addExpandSortField ( string $field [, string $order ] ) : SolrQuery
SolrDisMaxQuery::addFacetDateField ( string $dateField ) : SolrQuery
SolrDisMaxQuery::addFacetDateOther ( string $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::addFacetField ( string $field ) : SolrQuery
SolrDisMaxQuery::addFacetQuery ( string $facetQuery ) : SolrQuery
SolrDisMaxQuery::addField ( string $field ) : SolrQuery
SolrDisMaxQuery::addFilterQuery ( string $fq ) : SolrQuery
SolrDisMaxQuery::addGroupField ( string $value ) : SolrQuery
SolrDisMaxQuery::addGroupFunction ( string $value ) : SolrQuery
SolrDisMaxQuery::addGroupQuery ( string $value ) : SolrQuery
SolrDisMaxQuery::addGroupSortField ( string $field [, int $order ] ) : SolrQuery
SolrDisMaxQuery::addHighlightField ( string $field ) : SolrQuery
SolrDisMaxQuery::addMltField ( string $field ) : SolrQuery
SolrDisMaxQuery::addMltQueryField ( string $field , float $boost ) : SolrQuery
SolrDisMaxQuery::addPhraseField ( string $field , string $boost [, string $slop ] ) : SolrDisMaxQuery
SolrDisMaxQuery::addQueryField ( string $field [, string $boost ] ) : SolrDisMaxQuery
SolrDisMaxQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] ) : SolrQuery
SolrDisMaxQuery::addStatsFacet ( string $field ) : SolrQuery
SolrDisMaxQuery::addStatsField ( string $field ) : SolrQuery
SolrDisMaxQuery::addTrigramPhraseField ( string $field , string $boost [, string $slop ] ) : SolrDisMaxQuery
SolrDisMaxQuery::addUserField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::collapse ( SolrCollapseFunction $collapseFunction ) : SolrQuery
SolrDisMaxQuery::getExpand ( void ) : bool
SolrDisMaxQuery::getExpandFilterQueries ( void ) : array
SolrDisMaxQuery::getExpandQuery ( void ) : array
SolrDisMaxQuery::getExpandRows ( void ) : int
SolrDisMaxQuery::getExpandSortFields ( void ) : array
SolrDisMaxQuery::getFacet ( void ) : bool
SolrDisMaxQuery::getFacetDateEnd ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetDateFields ( void ) : array
SolrDisMaxQuery::getFacetDateGap ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetDateHardEnd ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetDateOther ([ string $field_override ] ) : array
SolrDisMaxQuery::getFacetDateStart ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetFields ( void ) : array
SolrDisMaxQuery::getFacetLimit ([ string $field_override ] ) : int
SolrDisMaxQuery::getFacetMethod ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetMinCount ([ string $field_override ] ) : int
SolrDisMaxQuery::getFacetMissing ([ string $field_override ] ) : bool
SolrDisMaxQuery::getFacetOffset ([ string $field_override ] ) : int
SolrDisMaxQuery::getFacetPrefix ([ string $field_override ] ) : string
SolrDisMaxQuery::getFacetQueries ( void ) : array
SolrDisMaxQuery::getFacetSort ([ string $field_override ] ) : int
SolrDisMaxQuery::getFields ( void ) : array
SolrDisMaxQuery::getFilterQueries ( void ) : array
SolrDisMaxQuery::getGroup ( void ) : bool
SolrDisMaxQuery::getGroupCachePercent ( void ) : int
SolrDisMaxQuery::getGroupFacet ( void ) : bool
SolrDisMaxQuery::getGroupFields ( void ) : array
SolrDisMaxQuery::getGroupFormat ( void ) : string
SolrDisMaxQuery::getGroupFunctions ( void ) : array
SolrDisMaxQuery::getGroupLimit ( void ) : int
SolrDisMaxQuery::getGroupMain ( void ) : bool
SolrDisMaxQuery::getGroupNGroups ( void ) : bool
SolrDisMaxQuery::getGroupOffset ( void ) : int
SolrDisMaxQuery::getGroupQueries ( void ) : array
SolrDisMaxQuery::getGroupSortFields ( void ) : array
SolrDisMaxQuery::getGroupTruncate ( void ) : bool
SolrDisMaxQuery::getHighlight ( void ) : bool
SolrDisMaxQuery::getHighlightAlternateField ([ string $field_override ] ) : string
SolrDisMaxQuery::getHighlightFields ( void ) : array
SolrDisMaxQuery::getHighlightFormatter ([ string $field_override ] ) : string
SolrDisMaxQuery::getHighlightFragmenter ([ string $field_override ] ) : string
SolrDisMaxQuery::getHighlightFragsize ([ string $field_override ] ) : int
SolrDisMaxQuery::getHighlightHighlightMultiTerm ( void ) : bool
SolrDisMaxQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] ) : int
SolrDisMaxQuery::getHighlightMaxAnalyzedChars ( void ) : int
SolrDisMaxQuery::getHighlightMergeContiguous ([ string $field_override ] ) : bool
SolrDisMaxQuery::getHighlightRegexMaxAnalyzedChars ( void ) : int
SolrDisMaxQuery::getHighlightRegexPattern ( void ) : string
SolrDisMaxQuery::getHighlightRegexSlop ( void ) : float
SolrDisMaxQuery::getHighlightRequireFieldMatch ( void ) : bool
SolrDisMaxQuery::getHighlightSimplePost ([ string $field_override ] ) : string
SolrDisMaxQuery::getHighlightSimplePre ([ string $field_override ] ) : string
SolrDisMaxQuery::getHighlightSnippets ([ string $field_override ] ) : int
SolrDisMaxQuery::getHighlightUsePhraseHighlighter ( void ) : bool
SolrDisMaxQuery::getMlt ( void ) : bool
SolrDisMaxQuery::getMltBoost ( void ) : bool
SolrDisMaxQuery::getMltCount ( void ) : int
SolrDisMaxQuery::getMltFields ( void ) : array
SolrDisMaxQuery::getMltMaxNumQueryTerms ( void ) : int
SolrDisMaxQuery::getMltMaxNumTokens ( void ) : int
SolrDisMaxQuery::getMltMaxWordLength ( void ) : int
SolrDisMaxQuery::getMltMinDocFrequency ( void ) : int
SolrDisMaxQuery::getMltMinTermFrequency ( void ) : int
SolrDisMaxQuery::getMltMinWordLength ( void ) : int
SolrDisMaxQuery::getMltQueryFields ( void ) : array
SolrDisMaxQuery::getQuery ( void ) : string
SolrDisMaxQuery::getRows ( void ) : int
SolrDisMaxQuery::getSortFields ( void ) : array
SolrDisMaxQuery::getStart ( void ) : int
SolrDisMaxQuery::getStats ( void ) : bool
SolrDisMaxQuery::getStatsFacets ( void ) : array
SolrDisMaxQuery::getStatsFields ( void ) : array
SolrDisMaxQuery::getTerms ( void ) : bool
SolrDisMaxQuery::getTermsField ( void ) : string
SolrDisMaxQuery::getTermsIncludeLowerBound ( void ) : bool
SolrDisMaxQuery::getTermsIncludeUpperBound ( void ) : bool
SolrDisMaxQuery::getTermsLimit ( void ) : int
SolrDisMaxQuery::getTermsLowerBound ( void ) : string
SolrDisMaxQuery::getTermsMaxCount ( void ) : int
SolrDisMaxQuery::getTermsMinCount ( void ) : int
SolrDisMaxQuery::getTermsPrefix ( void ) : string
SolrDisMaxQuery::getTermsReturnRaw ( void ) : bool
SolrDisMaxQuery::getTermsSort ( void ) : int
SolrDisMaxQuery::getTermsUpperBound ( void ) : string
SolrDisMaxQuery::getTimeAllowed ( void ) : int
SolrDisMaxQuery::removeBigramPhraseField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::removeBoostQuery ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::removeExpandFilterQuery ( string $fq ) : SolrQuery
SolrDisMaxQuery::removeExpandSortField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeFacetDateField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeFacetDateOther ( string $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::removeFacetField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeFacetQuery ( string $value ) : SolrQuery
SolrDisMaxQuery::removeField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeFilterQuery ( string $fq ) : SolrQuery
SolrDisMaxQuery::removeHighlightField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeMltField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeMltQueryField ( string $queryField ) : SolrQuery
SolrDisMaxQuery::removePhraseField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::removeQueryField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::removeSortField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeStatsFacet ( string $value ) : SolrQuery
SolrDisMaxQuery::removeStatsField ( string $field ) : SolrQuery
SolrDisMaxQuery::removeTrigramPhraseField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::removeUserField ( string $field ) : SolrDisMaxQuery
SolrDisMaxQuery::setBigramPhraseFields ( string $fields ) : SolrDisMaxQuery
SolrDisMaxQuery::setBigramPhraseSlop ( string $slop ) : SolrDisMaxQuery
SolrDisMaxQuery::setBoostFunction ( string $function ) : SolrDisMaxQuery
SolrDisMaxQuery::setBoostQuery ( string $q ) : SolrDisMaxQuery
SolrDisMaxQuery::setEchoHandler ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setEchoParams ( string $type ) : SolrQuery
SolrDisMaxQuery::setExpand ( bool $value ) : SolrQuery
SolrDisMaxQuery::setExpandQuery ( string $q ) : SolrQuery
SolrDisMaxQuery::setExpandRows ( int $value ) : SolrQuery
SolrDisMaxQuery::setExplainOther ( string $query ) : SolrQuery
SolrDisMaxQuery::setFacet ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setFacetDateEnd ( string $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetDateGap ( string $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetDateStart ( string $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetLimit ( int $limit [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetMethod ( string $method [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetMinCount ( int $mincount [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetMissing ( bool $flag [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetOffset ( int $offset [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetPrefix ( string $prefix [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setFacetSort ( int $facetSort [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setGroup ( bool $value ) : SolrQuery
SolrDisMaxQuery::setGroupCachePercent ( int $percent ) : SolrQuery
SolrDisMaxQuery::setGroupFacet ( bool $value ) : SolrQuery
SolrDisMaxQuery::setGroupFormat ( string $value ) : SolrQuery
SolrDisMaxQuery::setGroupLimit ( int $value ) : SolrQuery
SolrDisMaxQuery::setGroupMain ( string $value ) : SolrQuery
SolrDisMaxQuery::setGroupNGroups ( bool $value ) : SolrQuery
SolrDisMaxQuery::setGroupOffset ( int $value ) : SolrQuery
SolrDisMaxQuery::setGroupTruncate ( bool $value ) : SolrQuery
SolrDisMaxQuery::setHighlight ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setHighlightAlternateField ( string $field [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightFormatter ( string $formatter [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightFragsize ( int $size [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightHighlightMultiTerm ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightMaxAnalyzedChars ( int $value ) : SolrQuery
SolrDisMaxQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars ) : SolrQuery
SolrDisMaxQuery::setHighlightRegexPattern ( string $value ) : SolrQuery
SolrDisMaxQuery::setHighlightRegexSlop ( float $factor ) : SolrQuery
SolrDisMaxQuery::setHighlightRequireFieldMatch ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightSnippets ( int $value [, string $field_override ] ) : SolrQuery
SolrDisMaxQuery::setHighlightUsePhraseHighlighter ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setMinimumMatch ( string $value ) : SolrDisMaxQuery
SolrDisMaxQuery::setMlt ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setMltBoost ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setMltCount ( int $count ) : SolrQuery
SolrDisMaxQuery::setMltMaxNumQueryTerms ( int $value ) : SolrQuery
SolrDisMaxQuery::setMltMaxNumTokens ( int $value ) : SolrQuery
SolrDisMaxQuery::setMltMaxWordLength ( int $maxWordLength ) : SolrQuery
SolrDisMaxQuery::setMltMinDocFrequency ( int $minDocFrequency ) : SolrQuery
SolrDisMaxQuery::setMltMinTermFrequency ( int $minTermFrequency ) : SolrQuery
SolrDisMaxQuery::setMltMinWordLength ( int $minWordLength ) : SolrQuery
SolrDisMaxQuery::setOmitHeader ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setPhraseFields ( string $fields ) : SolrDisMaxQuery
SolrDisMaxQuery::setPhraseSlop ( string $slop ) : SolrDisMaxQuery
SolrDisMaxQuery::setQuery ( string $query ) : SolrQuery
SolrDisMaxQuery::setQueryAlt ( string $q ) : SolrDisMaxQuery
SolrDisMaxQuery::setQueryPhraseSlop ( string $slop ) : SolrDisMaxQuery
SolrDisMaxQuery::setRows ( int $rows ) : SolrQuery
SolrDisMaxQuery::setShowDebugInfo ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setStart ( int $start ) : SolrQuery
SolrDisMaxQuery::setStats ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setTerms ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setTermsField ( string $fieldname ) : SolrQuery
SolrDisMaxQuery::setTermsIncludeLowerBound ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setTermsIncludeUpperBound ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setTermsLimit ( int $limit ) : SolrQuery
SolrDisMaxQuery::setTermsLowerBound ( string $lowerBound ) : SolrQuery
SolrDisMaxQuery::setTermsMaxCount ( int $frequency ) : SolrQuery
SolrDisMaxQuery::setTermsMinCount ( int $frequency ) : SolrQuery
SolrDisMaxQuery::setTermsPrefix ( string $prefix ) : SolrQuery
SolrDisMaxQuery::setTermsReturnRaw ( bool $flag ) : SolrQuery
SolrDisMaxQuery::setTermsSort ( int $sortType ) : SolrQuery
SolrDisMaxQuery::setTermsUpperBound ( string $upperBound ) : SolrQuery
SolrDisMaxQuery::setTieBreaker ( string $tieBreaker ) : SolrDisMaxQuery
SolrDisMaxQuery::setTimeAllowed ( int $timeAllowed ) : SolrQuery
SolrDisMaxQuery::setTrigramPhraseFields ( string $fields ) : SolrDisMaxQuery
SolrDisMaxQuery::setTrigramPhraseSlop ( string $slop ) : SolrDisMaxQuery
SolrDisMaxQuery::setUserFields ( string $fields ) : SolrDisMaxQuery
SolrDisMaxQuery::useDisMaxQueryParser ( void ) : SolrDisMaxQuery
SolrDisMaxQuery::useEDisMaxQueryParser ( void ) : SolrDisMaxQuery
SolrDisMaxQuery::__construct ([ string $q ] )
SolrDisMaxQuery::__destruct ( void ) : void
SolrDocument::addField ( string $fieldName , string $fieldValue ) : bool
SolrDocument::clear ( void ) : bool
SolrDocument::current ( void ) : SolrDocumentField
SolrDocument::deleteField ( string $fieldName ) : bool
SolrDocument::fieldExists ( string $fieldName ) : bool
SolrDocument::getChildDocuments ( void ) : array
SolrDocument::getChildDocumentsCount ( void ) : int
SolrDocument::getField ( string $fieldName ) : SolrDocumentField
SolrDocument::getFieldCount ( void ) : int
SolrDocument::getFieldNames ( void ) : array
SolrDocument::getInputDocument ( void ) : SolrInputDocument
SolrDocument::hasChildDocuments ( void ) : bool
SolrDocument::key ( void ) : string
SolrDocument::merge ( SolrDocument $sourceDoc [, bool $overwrite = TRUE ] ) : bool
SolrDocument::next ( void ) : void
SolrDocument::offsetExists ( string $fieldName ) : bool
SolrDocument::offsetGet ( string $fieldName ) : SolrDocumentField
SolrDocument::offsetSet ( string $fieldName , string $fieldValue ) : void
SolrDocument::offsetUnset ( string $fieldName ) : void
SolrDocument::reset ( void ) : bool
SolrDocument::rewind ( void ) : void
SolrDocument::serialize ( void ) : string
SolrDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC ] ) : bool
SolrDocument::toArray ( void ) : array
SolrDocument::unserialize ( string $serialized ) : void
SolrDocument::valid ( void ) : bool
SolrDocument::__clone ( void ) : void
SolrDocument::__construct ( void )
SolrDocument::__destruct ( void ) : void
SolrDocument::__get ( string $fieldName ) : SolrDocumentField
SolrDocument::__isset ( string $fieldName ) : bool
SolrDocument::__set ( string $fieldName , string $fieldValue ) : bool
SolrDocument::__unset ( string $fieldName ) : bool
SolrDocumentField::__construct ( void )
SolrDocumentField::__destruct ( void ) : void
SolrException::getCode ( void ) : mixed
SolrException::getFile ( void ) : string
SolrException::getInternalInfo ( void ) : array
SolrException::getLine ( void ) : int
SolrException::getMessage ( void ) : string
SolrException::getPrevious ( void ) : Throwable
SolrException::getTrace ( void ) : array
SolrException::getTraceAsString ( void ) : string
SolrException::__clone ( void ) : void
SolrException::__toString ( void ) : string
SolrGenericResponse::getDigestedResponse ( void ) : string
SolrGenericResponse::getHttpStatus ( void ) : int
SolrGenericResponse::getHttpStatusMessage ( void ) : string
SolrGenericResponse::getRawRequest ( void ) : string
SolrGenericResponse::getRawRequestHeaders ( void ) : string
SolrGenericResponse::getRawResponse ( void ) : string
SolrGenericResponse::getRawResponseHeaders ( void ) : string
SolrGenericResponse::getRequestUrl ( void ) : string
SolrGenericResponse::getResponse ( void ) : SolrObject
SolrGenericResponse::setParseMode ([ int $parser_mode = 0 ] ) : bool
SolrGenericResponse::success ( void ) : bool
SolrGenericResponse::__construct ( void )
SolrGenericResponse::__destruct ( void ) : void
SolrIllegalArgumentException::getCode ( void ) : mixed
SolrIllegalArgumentException::getFile ( void ) : string
SolrIllegalArgumentException::getInternalInfo ( void ) : array
SolrIllegalArgumentException::getLine ( void ) : int
SolrIllegalArgumentException::getMessage ( void ) : string
SolrIllegalArgumentException::getPrevious ( void ) : Throwable
SolrIllegalArgumentException::getTrace ( void ) : array
SolrIllegalArgumentException::getTraceAsString ( void ) : string
SolrIllegalArgumentException::__clone ( void ) : void
SolrIllegalArgumentException::__toString ( void ) : string
SolrIllegalOperationException::getCode ( void ) : mixed
SolrIllegalOperationException::getFile ( void ) : string
SolrIllegalOperationException::getInternalInfo ( void ) : array
SolrIllegalOperationException::getLine ( void ) : int
SolrIllegalOperationException::getMessage ( void ) : string
SolrIllegalOperationException::getPrevious ( void ) : Throwable
SolrIllegalOperationException::getTrace ( void ) : array
SolrIllegalOperationException::getTraceAsString ( void ) : string
SolrIllegalOperationException::__clone ( void ) : void
SolrIllegalOperationException::__toString ( void ) : string
SolrInputDocument::addChildDocument ( SolrInputDocument $child ) : void
SolrInputDocument::addChildDocuments ( array &$docs ) : void
SolrInputDocument::addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] ) : bool
SolrInputDocument::clear ( void ) : bool
SolrInputDocument::deleteField ( string $fieldName ) : bool
SolrInputDocument::fieldExists ( string $fieldName ) : bool
SolrInputDocument::getBoost ( void ) : float
SolrInputDocument::getChildDocuments ( void ) : array
SolrInputDocument::getChildDocumentsCount ( void ) : int
SolrInputDocument::getField ( string $fieldName ) : SolrDocumentField
SolrInputDocument::getFieldBoost ( string $fieldName ) : float
SolrInputDocument::getFieldCount ( void ) : int
SolrInputDocument::getFieldNames ( void ) : array
SolrInputDocument::hasChildDocuments ( void ) : bool
SolrInputDocument::merge ( SolrInputDocument $sourceDoc [, bool $overwrite = TRUE ] ) : bool
SolrInputDocument::reset ( void ) : bool
SolrInputDocument::setBoost ( float $documentBoostValue ) : bool
SolrInputDocument::setFieldBoost ( string $fieldName , float $fieldBoostValue ) : bool
SolrInputDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC ] ) : bool
SolrInputDocument::toArray ( void ) : array
SolrInputDocument::__clone ( void ) : void
SolrInputDocument::__construct ( void )
SolrInputDocument::__destruct ( void ) : void
SolrMissingMandatoryParameterException::getCode ( void ) : mixed
SolrMissingMandatoryParameterException::getFile ( void ) : string
SolrMissingMandatoryParameterException::getInternalInfo ( void ) : array
SolrMissingMandatoryParameterException::getLine ( void ) : int
SolrMissingMandatoryParameterException::getMessage ( void ) : string
SolrMissingMandatoryParameterException::getPrevious ( void ) : Throwable
SolrMissingMandatoryParameterException::getTrace ( void ) : array
SolrMissingMandatoryParameterException::getTraceAsString ( void ) : string
SolrMissingMandatoryParameterException::__clone ( void ) : void
SolrMissingMandatoryParameterException::__toString ( void ) : string
SolrModifiableParams::add ( string $name , string $value ) : SolrParams
SolrModifiableParams::addParam ( string $name , string $value ) : SolrParams
SolrModifiableParams::get ( string $param_name ) : mixed
SolrModifiableParams::getParam ([ string $param_name ] ) : mixed
SolrModifiableParams::getParams ( void ) : array
SolrModifiableParams::getPreparedParams ( void ) : array
SolrModifiableParams::serialize ( void ) : string
SolrModifiableParams::set ( string $name , string $value ) : void
SolrModifiableParams::setParam ( string $name , string $value ) : SolrParams
SolrModifiableParams::toString ([ bool $url_encode = FALSE ] ) : string
SolrModifiableParams::unserialize ( string $serialized ) : void
SolrModifiableParams::__construct ( void )
SolrModifiableParams::__destruct ( void ) : void
SolrObject::getPropertyNames ( void ) : array
SolrObject::offsetExists ( string $property_name ) : bool
SolrObject::offsetGet ( string $property_name ) : mixed
SolrObject::offsetSet ( string $property_name , string $property_value ) : void
SolrObject::offsetUnset ( string $property_name ) : void
SolrObject::__construct ( void )
SolrObject::__destruct ( void ) : void
SolrParams::add ( string $name , string $value ) : SolrParams
SolrParams::addParam ( string $name , string $value ) : SolrParams
SolrParams::get ( string $param_name ) : mixed
SolrParams::getParam ([ string $param_name ] ) : mixed
SolrParams::getParams ( void ) : array
SolrParams::getPreparedParams ( void ) : array
SolrParams::serialize ( void ) : string
SolrParams::set ( string $name , string $value ) : void
SolrParams::setParam ( string $name , string $value ) : SolrParams
SolrParams::toString ([ bool $url_encode = FALSE ] ) : string
SolrParams::unserialize ( string $serialized ) : void
SolrPingResponse::getDigestedResponse ( void ) : string
SolrPingResponse::getHttpStatus ( void ) : int
SolrPingResponse::getHttpStatusMessage ( void ) : string
SolrPingResponse::getRawRequest ( void ) : string
SolrPingResponse::getRawRequestHeaders ( void ) : string
SolrPingResponse::getRawResponse ( void ) : string
SolrPingResponse::getRawResponseHeaders ( void ) : string
SolrPingResponse::getRequestUrl ( void ) : string
SolrPingResponse::getResponse ( void ) : string
SolrPingResponse::setParseMode ([ int $parser_mode = 0 ] ) : bool
SolrPingResponse::success ( void ) : bool
SolrPingResponse::__construct ( void )
SolrPingResponse::__destruct ( void ) : void
SolrQuery::addExpandFilterQuery ( string $fq ) : SolrQuery
SolrQuery::addExpandSortField ( string $field [, string $order ] ) : SolrQuery
SolrQuery::addFacetDateField ( string $dateField ) : SolrQuery
SolrQuery::addFacetDateOther ( string $value [, string $field_override ] ) : SolrQuery
SolrQuery::addFacetField ( string $field ) : SolrQuery
SolrQuery::addFacetQuery ( string $facetQuery ) : SolrQuery
SolrQuery::addField ( string $field ) : SolrQuery
SolrQuery::addFilterQuery ( string $fq ) : SolrQuery
SolrQuery::addGroupField ( string $value ) : SolrQuery
SolrQuery::addGroupFunction ( string $value ) : SolrQuery
SolrQuery::addGroupQuery ( string $value ) : SolrQuery
SolrQuery::addGroupSortField ( string $field [, int $order ] ) : SolrQuery
SolrQuery::addHighlightField ( string $field ) : SolrQuery
SolrQuery::addMltField ( string $field ) : SolrQuery
SolrQuery::addMltQueryField ( string $field , float $boost ) : SolrQuery
SolrQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] ) : SolrQuery
SolrQuery::addStatsFacet ( string $field ) : SolrQuery
SolrQuery::addStatsField ( string $field ) : SolrQuery
SolrQuery::collapse ( SolrCollapseFunction $collapseFunction ) : SolrQuery
SolrQuery::getExpand ( void ) : bool
SolrQuery::getExpandFilterQueries ( void ) : array
SolrQuery::getExpandQuery ( void ) : array
SolrQuery::getExpandRows ( void ) : int
SolrQuery::getExpandSortFields ( void ) : array
SolrQuery::getFacet ( void ) : bool
SolrQuery::getFacetDateEnd ([ string $field_override ] ) : string
SolrQuery::getFacetDateFields ( void ) : array
SolrQuery::getFacetDateGap ([ string $field_override ] ) : string
SolrQuery::getFacetDateHardEnd ([ string $field_override ] ) : string
SolrQuery::getFacetDateOther ([ string $field_override ] ) : array
SolrQuery::getFacetDateStart ([ string $field_override ] ) : string
SolrQuery::getFacetFields ( void ) : array
SolrQuery::getFacetLimit ([ string $field_override ] ) : int
SolrQuery::getFacetMethod ([ string $field_override ] ) : string
SolrQuery::getFacetMinCount ([ string $field_override ] ) : int
SolrQuery::getFacetMissing ([ string $field_override ] ) : bool
SolrQuery::getFacetOffset ([ string $field_override ] ) : int
SolrQuery::getFacetPrefix ([ string $field_override ] ) : string
SolrQuery::getFacetQueries ( void ) : array
SolrQuery::getFacetSort ([ string $field_override ] ) : int
SolrQuery::getFields ( void ) : array
SolrQuery::getFilterQueries ( void ) : array
SolrQuery::getGroup ( void ) : bool
SolrQuery::getGroupCachePercent ( void ) : int
SolrQuery::getGroupFacet ( void ) : bool
SolrQuery::getGroupFields ( void ) : array
SolrQuery::getGroupFormat ( void ) : string
SolrQuery::getGroupFunctions ( void ) : array
SolrQuery::getGroupLimit ( void ) : int
SolrQuery::getGroupMain ( void ) : bool
SolrQuery::getGroupNGroups ( void ) : bool
SolrQuery::getGroupOffset ( void ) : int
SolrQuery::getGroupQueries ( void ) : array
SolrQuery::getGroupSortFields ( void ) : array
SolrQuery::getGroupTruncate ( void ) : bool
SolrQuery::getHighlight ( void ) : bool
SolrQuery::getHighlightAlternateField ([ string $field_override ] ) : string
SolrQuery::getHighlightFields ( void ) : array
SolrQuery::getHighlightFormatter ([ string $field_override ] ) : string
SolrQuery::getHighlightFragmenter ([ string $field_override ] ) : string
SolrQuery::getHighlightFragsize ([ string $field_override ] ) : int
SolrQuery::getHighlightHighlightMultiTerm ( void ) : bool
SolrQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] ) : int
SolrQuery::getHighlightMaxAnalyzedChars ( void ) : int
SolrQuery::getHighlightMergeContiguous ([ string $field_override ] ) : bool
SolrQuery::getHighlightRegexMaxAnalyzedChars ( void ) : int
SolrQuery::getHighlightRegexPattern ( void ) : string
SolrQuery::getHighlightRegexSlop ( void ) : float
SolrQuery::getHighlightRequireFieldMatch ( void ) : bool
SolrQuery::getHighlightSimplePost ([ string $field_override ] ) : string
SolrQuery::getHighlightSimplePre ([ string $field_override ] ) : string
SolrQuery::getHighlightSnippets ([ string $field_override ] ) : int
SolrQuery::getHighlightUsePhraseHighlighter ( void ) : bool
SolrQuery::getMlt ( void ) : bool
SolrQuery::getMltBoost ( void ) : bool
SolrQuery::getMltCount ( void ) : int
SolrQuery::getMltFields ( void ) : array
SolrQuery::getMltMaxNumQueryTerms ( void ) : int
SolrQuery::getMltMaxNumTokens ( void ) : int
SolrQuery::getMltMaxWordLength ( void ) : int
SolrQuery::getMltMinDocFrequency ( void ) : int
SolrQuery::getMltMinTermFrequency ( void ) : int
SolrQuery::getMltMinWordLength ( void ) : int
SolrQuery::getMltQueryFields ( void ) : array
SolrQuery::getQuery ( void ) : string
SolrQuery::getRows ( void ) : int
SolrQuery::getSortFields ( void ) : array
SolrQuery::getStart ( void ) : int
SolrQuery::getStats ( void ) : bool
SolrQuery::getStatsFacets ( void ) : array
SolrQuery::getStatsFields ( void ) : array
SolrQuery::getTerms ( void ) : bool
SolrQuery::getTermsField ( void ) : string
SolrQuery::getTermsIncludeLowerBound ( void ) : bool
SolrQuery::getTermsIncludeUpperBound ( void ) : bool
SolrQuery::getTermsLimit ( void ) : int
SolrQuery::getTermsLowerBound ( void ) : string
SolrQuery::getTermsMaxCount ( void ) : int
SolrQuery::getTermsMinCount ( void ) : int
SolrQuery::getTermsPrefix ( void ) : string
SolrQuery::getTermsReturnRaw ( void ) : bool
SolrQuery::getTermsSort ( void ) : int
SolrQuery::getTermsUpperBound ( void ) : string
SolrQuery::getTimeAllowed ( void ) : int
SolrQuery::removeExpandFilterQuery ( string $fq ) : SolrQuery
SolrQuery::removeExpandSortField ( string $field ) : SolrQuery
SolrQuery::removeFacetDateField ( string $field ) : SolrQuery
SolrQuery::removeFacetDateOther ( string $value [, string $field_override ] ) : SolrQuery
SolrQuery::removeFacetField ( string $field ) : SolrQuery
SolrQuery::removeFacetQuery ( string $value ) : SolrQuery
SolrQuery::removeField ( string $field ) : SolrQuery
SolrQuery::removeFilterQuery ( string $fq ) : SolrQuery
SolrQuery::removeHighlightField ( string $field ) : SolrQuery
SolrQuery::removeMltField ( string $field ) : SolrQuery
SolrQuery::removeMltQueryField ( string $queryField ) : SolrQuery
SolrQuery::removeSortField ( string $field ) : SolrQuery
SolrQuery::removeStatsFacet ( string $value ) : SolrQuery
SolrQuery::removeStatsField ( string $field ) : SolrQuery
SolrQuery::setEchoHandler ( bool $flag ) : SolrQuery
SolrQuery::setEchoParams ( string $type ) : SolrQuery
SolrQuery::setExpand ( bool $value ) : SolrQuery
SolrQuery::setExpandQuery ( string $q ) : SolrQuery
SolrQuery::setExpandRows ( int $value ) : SolrQuery
SolrQuery::setExplainOther ( string $query ) : SolrQuery
SolrQuery::setFacet ( bool $flag ) : SolrQuery
SolrQuery::setFacetDateEnd ( string $value [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetDateGap ( string $value [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetDateStart ( string $value [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetLimit ( int $limit [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetMethod ( string $method [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetMinCount ( int $mincount [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetMissing ( bool $flag [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetOffset ( int $offset [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetPrefix ( string $prefix [, string $field_override ] ) : SolrQuery
SolrQuery::setFacetSort ( int $facetSort [, string $field_override ] ) : SolrQuery
SolrQuery::setGroup ( bool $value ) : SolrQuery
SolrQuery::setGroupCachePercent ( int $percent ) : SolrQuery
SolrQuery::setGroupFacet ( bool $value ) : SolrQuery
SolrQuery::setGroupFormat ( string $value ) : SolrQuery
SolrQuery::setGroupLimit ( int $value ) : SolrQuery
SolrQuery::setGroupMain ( string $value ) : SolrQuery
SolrQuery::setGroupNGroups ( bool $value ) : SolrQuery
SolrQuery::setGroupOffset ( int $value ) : SolrQuery
SolrQuery::setGroupTruncate ( bool $value ) : SolrQuery
SolrQuery::setHighlight ( bool $flag ) : SolrQuery
SolrQuery::setHighlightAlternateField ( string $field [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightFormatter ( string $formatter [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightFragsize ( int $size [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightHighlightMultiTerm ( bool $flag ) : SolrQuery
SolrQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightMaxAnalyzedChars ( int $value ) : SolrQuery
SolrQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars ) : SolrQuery
SolrQuery::setHighlightRegexPattern ( string $value ) : SolrQuery
SolrQuery::setHighlightRegexSlop ( float $factor ) : SolrQuery
SolrQuery::setHighlightRequireFieldMatch ( bool $flag ) : SolrQuery
SolrQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightSnippets ( int $value [, string $field_override ] ) : SolrQuery
SolrQuery::setHighlightUsePhraseHighlighter ( bool $flag ) : SolrQuery
SolrQuery::setMlt ( bool $flag ) : SolrQuery
SolrQuery::setMltBoost ( bool $flag ) : SolrQuery
SolrQuery::setMltCount ( int $count ) : SolrQuery
SolrQuery::setMltMaxNumQueryTerms ( int $value ) : SolrQuery
SolrQuery::setMltMaxNumTokens ( int $value ) : SolrQuery
SolrQuery::setMltMaxWordLength ( int $maxWordLength ) : SolrQuery
SolrQuery::setMltMinDocFrequency ( int $minDocFrequency ) : SolrQuery
SolrQuery::setMltMinTermFrequency ( int $minTermFrequency ) : SolrQuery
SolrQuery::setMltMinWordLength ( int $minWordLength ) : SolrQuery
SolrQuery::setOmitHeader ( bool $flag ) : SolrQuery
SolrQuery::setQuery ( string $query ) : SolrQuery
SolrQuery::setRows ( int $rows ) : SolrQuery
SolrQuery::setShowDebugInfo ( bool $flag ) : SolrQuery
SolrQuery::setStart ( int $start ) : SolrQuery
SolrQuery::setStats ( bool $flag ) : SolrQuery
SolrQuery::setTerms ( bool $flag ) : SolrQuery
SolrQuery::setTermsField ( string $fieldname ) : SolrQuery
SolrQuery::setTermsIncludeLowerBound ( bool $flag ) : SolrQuery
SolrQuery::setTermsIncludeUpperBound ( bool $flag ) : SolrQuery
SolrQuery::setTermsLimit ( int $limit ) : SolrQuery
SolrQuery::setTermsLowerBound ( string $lowerBound ) : SolrQuery
SolrQuery::setTermsMaxCount ( int $frequency ) : SolrQuery
SolrQuery::setTermsMinCount ( int $frequency ) : SolrQuery
SolrQuery::setTermsPrefix ( string $prefix ) : SolrQuery
SolrQuery::setTermsReturnRaw ( bool $flag ) : SolrQuery
SolrQuery::setTermsSort ( int $sortType ) : SolrQuery
SolrQuery::setTermsUpperBound ( string $upperBound ) : SolrQuery
SolrQuery::setTimeAllowed ( int $timeAllowed ) : SolrQuery
SolrQuery::__construct ([ string $q ] )
SolrQuery::__destruct ( void ) : void
SolrQueryResponse::getDigestedResponse ( void ) : string
SolrQueryResponse::getHttpStatus ( void ) : int
SolrQueryResponse::getHttpStatusMessage ( void ) : string
SolrQueryResponse::getRawRequest ( void ) : string
SolrQueryResponse::getRawRequestHeaders ( void ) : string
SolrQueryResponse::getRawResponse ( void ) : string
SolrQueryResponse::getRawResponseHeaders ( void ) : string
SolrQueryResponse::getRequestUrl ( void ) : string
SolrQueryResponse::getResponse ( void ) : SolrObject
SolrQueryResponse::setParseMode ([ int $parser_mode = 0 ] ) : bool
SolrQueryResponse::success ( void ) : bool
SolrQueryResponse::__construct ( void )
SolrQueryResponse::__destruct ( void ) : void
SolrResponse::getDigestedResponse ( void ) : string
SolrResponse::getHttpStatus ( void ) : int
SolrResponse::getHttpStatusMessage ( void ) : string
SolrResponse::getRawRequest ( void ) : string
SolrResponse::getRawRequestHeaders ( void ) : string
SolrResponse::getRawResponse ( void ) : string
SolrResponse::getRawResponseHeaders ( void ) : string
SolrResponse::getRequestUrl ( void ) : string
SolrResponse::getResponse ( void ) : SolrObject
SolrResponse::setParseMode ([ int $parser_mode = 0 ] ) : bool
SolrResponse::success ( void ) : bool
SolrServerException::getCode ( void ) : mixed
SolrServerException::getFile ( void ) : string
SolrServerException::getInternalInfo ( void ) : array
SolrServerException::getLine ( void ) : int
SolrServerException::getMessage ( void ) : string
SolrServerException::getPrevious ( void ) : Throwable
SolrServerException::getTrace ( void ) : array
SolrServerException::getTraceAsString ( void ) : string
SolrServerException::__clone ( void ) : void
SolrServerException::__toString ( void ) : string
SolrUpdateResponse::getDigestedResponse ( void ) : string
SolrUpdateResponse::getHttpStatus ( void ) : int
SolrUpdateResponse::getHttpStatusMessage ( void ) : string
SolrUpdateResponse::getRawRequest ( void ) : string
SolrUpdateResponse::getRawRequestHeaders ( void ) : string
SolrUpdateResponse::getRawResponse ( void ) : string
SolrUpdateResponse::getRawResponseHeaders ( void ) : string
SolrUpdateResponse::getRequestUrl ( void ) : string
SolrUpdateResponse::getResponse ( void ) : SolrObject
SolrUpdateResponse::setParseMode ([ int $parser_mode = 0 ] ) : bool
SolrUpdateResponse::success ( void ) : bool
SolrUpdateResponse::__construct ( void )
SolrUpdateResponse::__destruct ( void ) : void
SolrUtils::digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] ) : SolrObject
SolrUtils::escapeQueryChars ( string $str ) : string
SolrUtils::getSolrVersion ( void ) : string
SolrUtils::queryPhrase ( string $str ) : string
SphinxClient::addQuery ( string $query [, string $index = "*" [, string $comment = "" ]] ) : int
SphinxClient::buildExcerpts ( array $docs , string $index , string $words [, array $opts ] ) : array
SphinxClient::buildKeywords ( string $query , string $index , bool $hits ) : array
SphinxClient::close ( void ) : bool
SphinxClient::escapeString ( string $string ) : string
SphinxClient::getLastError ( void ) : string
SphinxClient::getLastWarning ( void ) : string
SphinxClient::open ( void ) : bool
SphinxClient::query ( string $query [, string $index = "*" [, string $comment = "" ]] ) : array
SphinxClient::resetFilters ( void ) : void
SphinxClient::resetGroupBy ( void ) : void
SphinxClient::runQueries ( void ) : array
SphinxClient::setArrayResult ( bool $array_result = FALSE ) : bool
SphinxClient::setConnectTimeout ( float $timeout ) : bool
SphinxClient::setFieldWeights ( array $weights ) : bool
SphinxClient::setFilter ( string $attribute , array $values [, bool $exclude = FALSE ] ) : bool
SphinxClient::setFilterFloatRange ( string $attribute , float $min , float $max [, bool $exclude = FALSE ] ) : bool
SphinxClient::setFilterRange ( string $attribute , int $min , int $max [, bool $exclude = FALSE ] ) : bool
SphinxClient::setGeoAnchor ( string $attrlat , string $attrlong , float $latitude , float $longitude ) : bool
SphinxClient::setGroupBy ( string $attribute , int $func [, string $groupsort = "@group desc" ] ) : bool
SphinxClient::setGroupDistinct ( string $attribute ) : bool
SphinxClient::setIDRange ( int $min , int $max ) : bool
SphinxClient::setIndexWeights ( array $weights ) : bool
SphinxClient::setLimits ( int $offset , int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]] ) : bool
SphinxClient::setMatchMode ( int $mode ) : bool
SphinxClient::setMaxQueryTime ( int $qtime ) : bool
SphinxClient::setOverride ( string $attribute , int $type , array $values ) : bool
SphinxClient::setRankingMode ( int $ranker ) : bool
SphinxClient::setRetries ( int $count [, int $delay = 0 ] ) : bool
SphinxClient::setSelect ( string $clause ) : bool
SphinxClient::setServer ( string $server , int $port ) : bool
SphinxClient::setSortMode ( int $mode [, string $sortby ] ) : bool
SphinxClient::status ( void ) : array
SphinxClient::updateAttributes ( string $index , array $attributes , array $values [, bool $mva = FALSE ] ) : int
SphinxClient::__construct ( void )
SplBool::getConstList ([ bool $include_default = FALSE ] ) : array
SplDoublyLinkedList::add ( mixed $index , mixed $newval ) : void
SplDoublyLinkedList::bottom ( void ) : mixed
SplDoublyLinkedList::count ( void ) : int
SplDoublyLinkedList::current ( void ) : mixed
SplDoublyLinkedList::getIteratorMode ( void ) : int
SplDoublyLinkedList::isEmpty ( void ) : bool
SplDoublyLinkedList::key ( void ) : mixed
SplDoublyLinkedList::next ( void ) : void
SplDoublyLinkedList::offsetExists ( mixed $index ) : bool
SplDoublyLinkedList::offsetGet ( mixed $index ) : mixed
SplDoublyLinkedList::offsetSet ( mixed $index , mixed $newval ) : void
SplDoublyLinkedList::offsetUnset ( mixed $index ) : void
SplDoublyLinkedList::pop ( void ) : mixed
SplDoublyLinkedList::prev ( void ) : void
SplDoublyLinkedList::push ( mixed $value ) : void
SplDoublyLinkedList::rewind ( void ) : void
SplDoublyLinkedList::serialize ( void ) : string
SplDoublyLinkedList::setIteratorMode ( int $mode ) : void
SplDoublyLinkedList::shift ( void ) : mixed
SplDoublyLinkedList::top ( void ) : mixed
SplDoublyLinkedList::unserialize ( string $serialized ) : void
SplDoublyLinkedList::unshift ( mixed $value ) : void
SplDoublyLinkedList::valid ( void ) : bool
SplDoublyLinkedList::__construct ( void )
SplEnum::getConstList ([ bool $include_default = FALSE ] ) : array
SplEnum::__construct ([ mixed $initial_value [, bool $strict ]] )
SplFileInfo::getATime ( void ) : int
SplFileInfo::getBasename ([ string $suffix ] ) : string
SplFileInfo::getCTime ( void ) : int
SplFileInfo::getExtension ( void ) : string
SplFileInfo::getFileInfo ([ string $class_name ] ) : SplFileInfo
SplFileInfo::getFilename ( void ) : string
SplFileInfo::getGroup ( void ) : int
SplFileInfo::getInode ( void ) : int
SplFileInfo::getLinkTarget ( void ) : string
SplFileInfo::getMTime ( void ) : int
SplFileInfo::getOwner ( void ) : int
SplFileInfo::getPath ( void ) : string
SplFileInfo::getPathInfo ([ string $class_name ] ) : SplFileInfo
SplFileInfo::getPathname ( void ) : string
SplFileInfo::getPerms ( void ) : int
SplFileInfo::getRealPath ( void ) : string
SplFileInfo::getSize ( void ) : int
SplFileInfo::getType ( void ) : string
SplFileInfo::isDir ( void ) : bool
SplFileInfo::isExecutable ( void ) : bool
SplFileInfo::isFile ( void ) : bool
SplFileInfo::isLink ( void ) : bool
SplFileInfo::isReadable ( void ) : bool
SplFileInfo::isWritable ( void ) : bool
SplFileInfo::openFile ([ string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL ]]] ) : SplFileObject
SplFileInfo::setFileClass ([ string $class_name = "SplFileObject" ] ) : void
SplFileInfo::setInfoClass ([ string $class_name = "SplFileInfo" ] ) : void
SplFileInfo::__construct ( string $file_name )
SplFileInfo::__toString ( void ) : string
SplFileObject::current ( void ) : string
SplFileObject::eof ( void ) : bool
SplFileObject::fflush ( void ) : bool
SplFileObject::fgetc ( void ) : string
SplFileObject::fgetcsv ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] ) : array
SplFileObject::fgets ( void ) : string
SplFileObject::fgetss ([ string $allowable_tags ] ) : string
SplFileObject::flock ( int $operation [, int &$wouldblock ] ) : bool
SplFileObject::fpassthru ( void ) : int
SplFileObject::fputcsv ( array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] ) : int
SplFileObject::fread ( int $length ) : string
SplFileObject::fscanf ( string $format [, mixed &$... ] ) : mixed
SplFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] ) : int
SplFileObject::fstat ( void ) : array
SplFileObject::ftell ( void ) : int
SplFileObject::ftruncate ( int $size ) : bool
SplFileObject::fwrite ( string $str [, int $length ] ) : int
SplFileObject::getATime ( void ) : int
SplFileObject::getBasename ([ string $suffix ] ) : string
SplFileObject::getChildren ( void ) : void
SplFileObject::getCsvControl ( void ) : array
SplFileObject::getCTime ( void ) : int
SplFileObject::getExtension ( void ) : string
SplFileObject::getFileInfo ([ string $class_name ] ) : SplFileInfo
SplFileObject::getFilename ( void ) : string
SplFileObject::getFlags ( void ) : int
SplFileObject::getGroup ( void ) : int
SplFileObject::getInode ( void ) : int
SplFileObject::getLinkTarget ( void ) : string
SplFileObject::getMaxLineLen ( void ) : int
SplFileObject::getMTime ( void ) : int
SplFileObject::getOwner ( void ) : int
SplFileObject::getPath ( void ) : string
SplFileObject::getPathInfo ([ string $class_name ] ) : SplFileInfo
SplFileObject::getPathname ( void ) : string
SplFileObject::getPerms ( void ) : int
SplFileObject::getRealPath ( void ) : string
SplFileObject::getSize ( void ) : int
SplFileObject::getType ( void ) : string
SplFileObject::hasChildren ( void ) : bool
SplFileObject::isDir ( void ) : bool
SplFileObject::isExecutable ( void ) : bool
SplFileObject::isFile ( void ) : bool
SplFileObject::isLink ( void ) : bool
SplFileObject::isReadable ( void ) : bool
SplFileObject::isWritable ( void ) : bool
SplFileObject::key ( void ) : int
SplFileObject::next ( void ) : void
SplFileObject::openFile ([ string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL ]]] ) : SplFileObject
SplFileObject::rewind ( void ) : void
SplFileObject::seek ( int $line_pos ) : void
SplFileObject::setCsvControl ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] ) : void
SplFileObject::setFileClass ([ string $class_name = "SplFileObject" ] ) : void
SplFileObject::setFlags ( int $flags ) : void
SplFileObject::setInfoClass ([ string $class_name = "SplFileInfo" ] ) : void
SplFileObject::setMaxLineLen ( int $max_len ) : void
SplFileObject::valid ( void ) : bool
SplFileObject::__construct ( string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context ]]] )
SplFileObject::__toString ( void ) : string
SplFixedArray::count ( void ) : int
SplFixedArray::current ( void ) : mixed
SplFixedArray::fromArray ( array $array [, bool $save_indexes = TRUE ] ) : SplFixedArray
SplFixedArray::getSize ( void ) : int
SplFixedArray::key ( void ) : int
SplFixedArray::next ( void ) : void
SplFixedArray::offsetExists ( int $index ) : bool
SplFixedArray::offsetGet ( int $index ) : mixed
SplFixedArray::offsetSet ( int $index , mixed $newval ) : void
SplFixedArray::offsetUnset ( int $index ) : void
SplFixedArray::rewind ( void ) : void
SplFixedArray::setSize ( int $size ) : bool
SplFixedArray::toArray ( void ) : array
SplFixedArray::valid ( void ) : bool
SplFixedArray::__construct ([ int $size = 0 ] )
SplFixedArray::__wakeup ( void ) : void
SplFloat::__construct ([ mixed $initial_value [, bool $strict ]] )
SplHeap::compare ( mixed $value1 , mixed $value2 ) : int
SplHeap::count ( void ) : int
SplHeap::current ( void ) : mixed
SplHeap::extract ( void ) : mixed
SplHeap::insert ( mixed $value ) : void
SplHeap::isCorrupted ( void ) : bool
SplHeap::isEmpty ( void ) : bool
SplHeap::key ( void ) : mixed
SplHeap::next ( void ) : void
SplHeap::recoverFromCorruption ( void ) : void
SplHeap::rewind ( void ) : void
SplHeap::top ( void ) : mixed
SplHeap::valid ( void ) : bool
SplHeap::__construct ( void )
SplInt::__construct ([ mixed $initial_value [, bool $strict ]] )
SplMaxHeap::compare ( mixed $value1 , mixed $value2 ) : int
SplMaxHeap::count ( void ) : int
SplMaxHeap::current ( void ) : mixed
SplMaxHeap::extract ( void ) : mixed
SplMaxHeap::insert ( mixed $value ) : void
SplMaxHeap::isCorrupted ( void ) : bool
SplMaxHeap::isEmpty ( void ) : bool
SplMaxHeap::key ( void ) : mixed
SplMaxHeap::next ( void ) : void
SplMaxHeap::recoverFromCorruption ( void ) : void
SplMaxHeap::rewind ( void ) : void
SplMaxHeap::top ( void ) : mixed
SplMaxHeap::valid ( void ) : bool
SplMinHeap::compare ( mixed $value1 , mixed $value2 ) : int
SplMinHeap::count ( void ) : int
SplMinHeap::current ( void ) : mixed
SplMinHeap::extract ( void ) : mixed
SplMinHeap::insert ( mixed $value ) : void
SplMinHeap::isCorrupted ( void ) : bool
SplMinHeap::isEmpty ( void ) : bool
SplMinHeap::key ( void ) : mixed
SplMinHeap::next ( void ) : void
SplMinHeap::recoverFromCorruption ( void ) : void
SplMinHeap::rewind ( void ) : void
SplMinHeap::top ( void ) : mixed
SplMinHeap::valid ( void ) : bool
SplObjectStorage::addAll ( SplObjectStorage $storage ) : void
SplObjectStorage::attach ( object $object [, mixed $data = NULL ] ) : void
SplObjectStorage::contains ( object $object ) : bool
SplObjectStorage::count ( void ) : int
SplObjectStorage::current ( void ) : object
SplObjectStorage::detach ( object $object ) : void
SplObjectStorage::getHash ( object $object ) : string
SplObjectStorage::getInfo ( void ) : mixed
SplObjectStorage::key ( void ) : int
SplObjectStorage::next ( void ) : void
SplObjectStorage::offsetExists ( object $object ) : bool
SplObjectStorage::offsetGet ( object $object ) : mixed
SplObjectStorage::offsetSet ( object $object [, mixed $data = NULL ] ) : void
SplObjectStorage::offsetUnset ( object $object ) : void
SplObjectStorage::removeAll ( SplObjectStorage $storage ) : void
SplObjectStorage::removeAllExcept ( SplObjectStorage $storage ) : void
SplObjectStorage::rewind ( void ) : void
SplObjectStorage::serialize ( void ) : string
SplObjectStorage::setInfo ( mixed $data ) : void
SplObjectStorage::unserialize ( string $serialized ) : void
SplObjectStorage::valid ( void ) : bool
SplObserver::update ( SplSubject $subject ) : void
SplPriorityQueue::compare ( mixed $priority1 , mixed $priority2 ) : int
SplPriorityQueue::count ( void ) : int
SplPriorityQueue::current ( void ) : mixed
SplPriorityQueue::extract ( void ) : mixed
SplPriorityQueue::getExtractFlags ( void ) : int
SplPriorityQueue::insert ( mixed $value , mixed $priority ) : bool
SplPriorityQueue::isCorrupted ( void ) : bool
SplPriorityQueue::isEmpty ( void ) : bool
SplPriorityQueue::key ( void ) : mixed
SplPriorityQueue::next ( void ) : void
SplPriorityQueue::recoverFromCorruption ( void ) : void
SplPriorityQueue::rewind ( void ) : void
SplPriorityQueue::setExtractFlags ( int $flags ) : void
SplPriorityQueue::top ( void ) : mixed
SplPriorityQueue::valid ( void ) : bool
SplPriorityQueue::__construct ( void )
SplQueue::add ( mixed $index , mixed $newval ) : void
SplQueue::bottom ( void ) : mixed
SplQueue::count ( void ) : int
SplQueue::current ( void ) : mixed
SplQueue::dequeue ( void ) : mixed
SplQueue::enqueue ( mixed $value ) : void
SplQueue::getIteratorMode ( void ) : int
SplQueue::isEmpty ( void ) : bool
SplQueue::key ( void ) : mixed
SplQueue::next ( void ) : void
SplQueue::offsetExists ( mixed $index ) : bool
SplQueue::offsetGet ( mixed $index ) : mixed
SplQueue::offsetSet ( mixed $index , mixed $newval ) : void
SplQueue::offsetUnset ( mixed $index ) : void
SplQueue::pop ( void ) : mixed
SplQueue::prev ( void ) : void
SplQueue::push ( mixed $value ) : void
SplQueue::rewind ( void ) : void
SplQueue::serialize ( void ) : string
SplQueue::setIteratorMode ( int $mode ) : void
SplQueue::shift ( void ) : mixed
SplQueue::top ( void ) : mixed
SplQueue::unserialize ( string $serialized ) : void
SplQueue::unshift ( mixed $value ) : void
SplQueue::valid ( void ) : bool
SplQueue::__construct ( void )
SplStack::add ( mixed $index , mixed $newval ) : void
SplStack::bottom ( void ) : mixed
SplStack::count ( void ) : int
SplStack::current ( void ) : mixed
SplStack::getIteratorMode ( void ) : int
SplStack::isEmpty ( void ) : bool
SplStack::key ( void ) : mixed
SplStack::next ( void ) : void
SplStack::offsetExists ( mixed $index ) : bool
SplStack::offsetGet ( mixed $index ) : mixed
SplStack::offsetSet ( mixed $index , mixed $newval ) : void
SplStack::offsetUnset ( mixed $index ) : void
SplStack::pop ( void ) : mixed
SplStack::prev ( void ) : void
SplStack::push ( mixed $value ) : void
SplStack::rewind ( void ) : void
SplStack::serialize ( void ) : string
SplStack::setIteratorMode ( int $mode ) : void
SplStack::shift ( void ) : mixed
SplStack::top ( void ) : mixed
SplStack::unserialize ( string $serialized ) : void
SplStack::unshift ( mixed $value ) : void
SplStack::valid ( void ) : bool
SplStack::__construct ( void )
SplString::__construct ([ mixed $initial_value [, bool $strict ]] )
SplSubject::attach ( SplObserver $observer ) : void
SplSubject::detach ( SplObserver $observer ) : void
SplSubject::notify ( void ) : void
SplTempFileObject::current ( void ) : string
SplTempFileObject::eof ( void ) : bool
SplTempFileObject::fflush ( void ) : bool
SplTempFileObject::fgetc ( void ) : string
SplTempFileObject::fgetcsv ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] ) : array
SplTempFileObject::fgets ( void ) : string
SplTempFileObject::fgetss ([ string $allowable_tags ] ) : string
SplTempFileObject::flock ( int $operation [, int &$wouldblock ] ) : bool
SplTempFileObject::fpassthru ( void ) : int
SplTempFileObject::fputcsv ( array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] ) : int
SplTempFileObject::fread ( int $length ) : string
SplTempFileObject::fscanf ( string $format [, mixed &$... ] ) : mixed
SplTempFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] ) : int
SplTempFileObject::fstat ( void ) : array
SplTempFileObject::ftell ( void ) : int
SplTempFileObject::ftruncate ( int $size ) : bool
SplTempFileObject::fwrite ( string $str [, int $length ] ) : int
SplTempFileObject::getChildren ( void ) : void
SplTempFileObject::getCsvControl ( void ) : array
SplTempFileObject::getFlags ( void ) : int
SplTempFileObject::getMaxLineLen ( void ) : int
SplTempFileObject::hasChildren ( void ) : bool
SplTempFileObject::key ( void ) : int
SplTempFileObject::next ( void ) : void
SplTempFileObject::rewind ( void ) : void
SplTempFileObject::seek ( int $line_pos ) : void
SplTempFileObject::setCsvControl ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] ) : void
SplTempFileObject::setFlags ( int $flags ) : void
SplTempFileObject::setMaxLineLen ( int $max_len ) : void
SplTempFileObject::valid ( void ) : bool
SplTempFileObject::__construct ([ int $max_memory ] )
SplType::__construct ([ mixed $initial_value [, bool $strict ]] )
Spoofchecker::areConfusable ( string $str1 , string $str2 [, string &$error ] ) : bool
Spoofchecker::isSuspicious ( string $text [, string &$error ] ) : bool
Spoofchecker::setAllowedLocales ( string $locale_list ) : void
Spoofchecker::setChecks ( int $checks ) : void
Spoofchecker::__construct ( void )
SQLite3::busyTimeout ( int $msecs ) : bool
SQLite3::changes ( void ) : int
SQLite3::close ( void ) : bool
SQLite3::createAggregate ( string $name , mixed $step_callback , mixed $final_callback [, int $argument_count = -1 ] ) : bool
SQLite3::createCollation ( string $name , callable $callback ) : bool
SQLite3::createFunction ( string $name , mixed $callback [, int $argument_count = -1 [, int $flags = 0 ]] ) : bool
SQLite3::enableExceptions ([ bool $enableExceptions = FALSE ] ) : bool
SQLite3::escapeString ( string $value ) : string
SQLite3::exec ( string $query ) : bool
SQLite3::lastErrorCode ( void ) : int
SQLite3::lastErrorMsg ( void ) : string
SQLite3::lastInsertRowID ( void ) : int
SQLite3::loadExtension ( string $shared_library ) : bool
SQLite3::open ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL ]] ) : void
SQLite3::openBlob ( string $table , string $column , int $rowid [, string $dbname = "main" [, int $flags = SQLITE3_OPEN_READONLY ]] ) : resource
SQLite3::prepare ( string $query ) : SQLite3Stmt
SQLite3::query ( string $query ) : SQLite3Result
SQLite3::querySingle ( string $query [, bool $entire_row = FALSE ] ) : mixed
SQLite3::version ( void ) : array
SQLite3::__construct ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL ]] )
SQLite3Result::columnName ( int $column_number ) : string
SQLite3Result::columnType ( int $column_number ) : int
SQLite3Result::fetchArray ([ int $mode = SQLITE3_BOTH ] ) : array
SQLite3Result::finalize ( void ) : bool
SQLite3Result::numColumns ( void ) : int
SQLite3Result::reset ( void ) : bool
SQLite3Stmt::bindParam ( mixed $sql_param , mixed &$param [, int $type ] ) : bool
SQLite3Stmt::bindValue ( mixed $sql_param , mixed $value [, int $type ] ) : bool
SQLite3Stmt::clear ( void ) : bool
SQLite3Stmt::close ( void ) : bool
SQLite3Stmt::execute ( void ) : SQLite3Result
SQLite3Stmt::getSQL ([ bool $expanded = FALSE ] ) : string
SQLite3Stmt::paramCount ( void ) : int
SQLite3Stmt::readOnly ( void ) : bool
SQLite3Stmt::reset ( void ) : bool
Stomp::abort ( string $transaction_id [, array $headers ] ) : bool
Stomp::ack ( mixed $msg [, array $headers ] ) : bool
Stomp::begin ( string $transaction_id [, array $headers ] ) : bool
Stomp::commit ( string $transaction_id [, array $headers ] ) : bool
Stomp::error ( void ) : string
Stomp::getReadTimeout ( void ) : array
Stomp::getSessionId ( void ) : string
Stomp::hasFrame ( void ) : bool
Stomp::readFrame ([ string $class_name = "stompFrame" ] ) : stompframe
Stomp::send ( string $destination , mixed $msg [, array $headers ] ) : bool
Stomp::setReadTimeout ( int $seconds [, int $microseconds ] ) : void
Stomp::subscribe ( string $destination [, array $headers ] ) : bool
Stomp::unsubscribe ( string $destination [, array $headers ] ) : bool
Stomp::__construct ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
Stomp::__destruct ( void ) : bool
StompException::getCode ( void ) : mixed
StompException::getDetails ( void ) : string
StompException::getFile ( void ) : string
StompException::getLine ( void ) : int
StompException::getMessage ( void ) : string
StompException::getPrevious ( void ) : Throwable
StompException::getTrace ( void ) : array
StompException::getTraceAsString ( void ) : string
StompException::__clone ( void ) : void
StompException::__toString ( void ) : string
StompFrame::__construct ([ string $command [, array $headers [, string $body ]]] )
streamWrapper::dir_closedir ( void ) : bool
streamWrapper::dir_opendir ( string $path , int $options ) : bool
streamWrapper::dir_readdir ( void ) : string
streamWrapper::dir_rewinddir ( void ) : bool
streamWrapper::mkdir ( string $path , int $mode , int $options ) : bool
streamWrapper::rename ( string $path_from , string $path_to ) : bool
streamWrapper::rmdir ( string $path , int $options ) : bool
streamWrapper::stream_cast ( int $cast_as ) : resource
streamWrapper::stream_close ( void ) : void
streamWrapper::stream_eof ( void ) : bool
streamWrapper::stream_flush ( void ) : bool
streamWrapper::stream_lock ( int $operation ) : bool
streamWrapper::stream_metadata ( string $path , int $option , mixed $value ) : bool
streamWrapper::stream_open ( string $path , string $mode , int $options , string &$opened_path ) : bool
streamWrapper::stream_read ( int $count ) : string
streamWrapper::stream_seek ( int $offset , int $whence = SEEK_SET ) : bool
streamWrapper::stream_set_option ( int $option , int $arg1 , int $arg2 ) : bool
streamWrapper::stream_stat ( void ) : array
streamWrapper::stream_tell ( void ) : int
streamWrapper::stream_truncate ( int $new_size ) : bool
streamWrapper::stream_write ( string $data ) : int
streamWrapper::unlink ( string $path ) : bool
streamWrapper::url_stat ( string $path , int $flags ) : array
streamWrapper::__construct ( void )
streamWrapper::__destruct ( void )
SVM::crossvalidate ( array $problem , int $number_of_folds ) : float
SVM::getOptions ( void ) : array
SVM::setOptions ( array $params ) : bool
SVM::train ( array $problem [, array $weights ] ) : SVMModel
SVM::__construct ( void )
SVMModel::checkProbabilityModel ( void ) : bool
SVMModel::getLabels ( void ) : array
SVMModel::getNrClass ( void ) : int
SVMModel::getSvmType ( void ) : int
SVMModel::getSvrProbability ( void ) : float
SVMModel::load ( string $filename ) : bool
SVMModel::predict ( array $data ) : float
SVMModel::predict_probability ( array $data ) : float
SVMModel::save ( string $filename ) : bool
SVMModel::__construct ([ string $filename ] )
SWFAction::__construct ( string $script )
SWFBitmap::getHeight ( void ) : float
SWFBitmap::getWidth ( void ) : float
SWFBitmap::__construct ( mixed $file [, mixed $alphafile ] )
SWFButton::addAction ( SWFAction $action , int $flags ) : void
SWFButton::addASound ( SWFSound $sound , int $flags ) : SWFSoundInstance
SWFButton::addShape ( SWFShape $shape , int $flags ) : void
SWFButton::setAction ( SWFAction $action ) : void
SWFButton::setDown ( SWFShape $shape ) : void
SWFButton::setHit ( SWFShape $shape ) : void
SWFButton::setMenu ( int $flag ) : void
SWFButton::setOver ( SWFShape $shape ) : void
SWFButton::setUp ( SWFShape $shape ) : void
SWFButton::__construct ( void )
SWFDisplayItem::addAction ( SWFAction $action , int $flags ) : void
SWFDisplayItem::addColor ( int $red , int $green , int $blue [, int $a ] ) : void
SWFDisplayItem::endMask ( void ) : void
SWFDisplayItem::getRot ( void ) : float
SWFDisplayItem::getX ( void ) : float
SWFDisplayItem::getXScale ( void ) : float
SWFDisplayItem::getXSkew ( void ) : float
SWFDisplayItem::getY ( void ) : float
SWFDisplayItem::getYScale ( void ) : float
SWFDisplayItem::getYSkew ( void ) : float
SWFDisplayItem::move ( float $dx , float $dy ) : void
SWFDisplayItem::moveTo ( float $x , float $y ) : void
SWFDisplayItem::multColor ( float $red , float $green , float $blue [, float $a ] ) : void
SWFDisplayItem::remove ( void ) : void
SWFDisplayItem::rotate ( float $angle ) : void
SWFDisplayItem::rotateTo ( float $angle ) : void
SWFDisplayItem::scale ( float $dx , float $dy ) : void
SWFDisplayItem::scaleTo ( float $x [, float $y ] ) : void
SWFDisplayItem::setDepth ( int $depth ) : void
SWFDisplayItem::setMaskLevel ( int $level ) : void
SWFDisplayItem::setMatrix ( float $a , float $b , float $c , float $d , float $x , float $y ) : void
SWFDisplayItem::setName ( string $name ) : void
SWFDisplayItem::setRatio ( float $ratio ) : void
SWFDisplayItem::skewX ( float $ddegrees ) : void
SWFDisplayItem::skewXTo ( float $degrees ) : void
SWFDisplayItem::skewY ( float $ddegrees ) : void
SWFDisplayItem::skewYTo ( float $degrees ) : void
SWFFill::moveTo ( float $x , float $y ) : void
SWFFill::rotateTo ( float $angle ) : void
SWFFill::scaleTo ( float $x [, float $y ] ) : void
SWFFill::skewXTo ( float $x ) : void
SWFFill::skewYTo ( float $y ) : void
SWFFont::getAscent ( void ) : float
SWFFont::getDescent ( void ) : float
SWFFont::getLeading ( void ) : float
SWFFont::getShape ( int $code ) : string
SWFFont::getUTF8Width ( string $string ) : float
SWFFont::getWidth ( string $string ) : float
SWFFont::__construct ( string $filename )
SWFFontChar::addChars ( string $char ) : void
SWFFontChar::addUTF8Chars ( string $char ) : void
SWFGradient::addEntry ( float $ratio , int $red , int $green , int $blue [, int $alpha = 255 ] ) : void
SWFGradient::__construct ( void )
SWFMorph::getShape1 ( void ) : SWFShape
SWFMorph::getShape2 ( void ) : SWFShape
SWFMorph::__construct ( void )
SWFMovie::add ( object $instance ) : mixed
SWFMovie::addExport ( SWFCharacter $char , string $name ) : void
SWFMovie::addFont ( SWFFont $font ) : mixed
SWFMovie::importChar ( string $libswf , string $name ) : SWFSprite
SWFMovie::importFont ( string $libswf , string $name ) : SWFFontChar
SWFMovie::labelFrame ( string $label ) : void
SWFMovie::nextFrame ( void ) : void
SWFMovie::output ([ int $compression ] ) : int
SWFMovie::remove ( object $instance ) : void
SWFMovie::save ( string $filename [, int $compression = -1 ] ) : int
SWFMovie::saveToFile ( resource $x [, int $compression = -1 ] ) : int
SWFMovie::setbackground ( int $red , int $green , int $blue ) : void
SWFMovie::setDimension ( float $width , float $height ) : void
SWFMovie::setFrames ( int $number ) : void
SWFMovie::setRate ( float $rate ) : void
SWFMovie::startSound ( SWFSound $sound ) : SWFSoundInstance
SWFMovie::stopSound ( SWFSound $sound ) : void
SWFMovie::streamMP3 ( mixed $mp3file [, float $skip = 0 ] ) : int
SWFMovie::writeExports ( void ) : void
SWFMovie::__construct ([ int $version ] )
SWFPrebuiltClip::__construct ( mixed $file )
SWFShape::addFill ( int $red , int $green , int $blue [, int $alpha = 255 ] ) : SWFFill
SWFShape::drawArc ( float $r , float $startAngle , float $endAngle ) : void
SWFShape::drawCircle ( float $r ) : void
SWFShape::drawCubic ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy ) : int
SWFShape::drawCubicTo ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy ) : int
SWFShape::drawCurve ( float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy ) : int
SWFShape::drawCurveTo ( float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety ) : int
SWFShape::drawGlyph ( SWFFont $font , string $character [, int $size ] ) : void
SWFShape::drawLine ( float $dx , float $dy ) : void
SWFShape::drawLineTo ( float $x , float $y ) : void
SWFShape::movePen ( float $dx , float $dy ) : void
SWFShape::movePenTo ( float $x , float $y ) : void
SWFShape::setLeftFill ( SWFGradient $fill ) : void
SWFShape::setLine ( SWFShape $shape ) : void
SWFShape::setRightFill ( SWFGradient $fill ) : void
SWFShape::__construct ( void )
SWFSound::__construct ( string $filename [, int $flags = 0 ] )
SWFSoundInstance::loopCount ( int $point ) : void
SWFSoundInstance::loopInPoint ( int $point ) : void
SWFSoundInstance::loopOutPoint ( int $point ) : void
SWFSoundInstance::noMultiple ( void ) : void
SWFSprite::add ( object $object ) : void
SWFSprite::labelFrame ( string $label ) : void
SWFSprite::nextFrame ( void ) : void
SWFSprite::remove ( object $object ) : void
SWFSprite::setFrames ( int $number ) : void
SWFSprite::startSound ( SWFSound $sount ) : SWFSoundInstance
SWFSprite::stopSound ( SWFSound $sount ) : void
SWFSprite::__construct ( void )
SWFText::addString ( string $string ) : void
SWFText::addUTF8String ( string $text ) : void
SWFText::getAscent ( void ) : float
SWFText::getDescent ( void ) : float
SWFText::getLeading ( void ) : float
SWFText::getUTF8Width ( string $string ) : float
SWFText::getWidth ( string $string ) : float
SWFText::moveTo ( float $x , float $y ) : void
SWFText::setColor ( int $red , int $green , int $blue [, int $a = 255 ] ) : void
SWFText::setFont ( SWFFont $font ) : void
SWFText::setHeight ( float $height ) : void
SWFText::setSpacing ( float $spacing ) : void
SWFText::__construct ( void )
SWFTextField::addChars ( string $chars ) : void
SWFTextField::addString ( string $string ) : void
SWFTextField::align ( int $alignement ) : void
SWFTextField::setBounds ( float $width , float $height ) : void
SWFTextField::setColor ( int $red , int $green , int $blue [, int $a = 255 ] ) : void
SWFTextField::setFont ( SWFFont $font ) : void
SWFTextField::setHeight ( float $height ) : void
SWFTextField::setIndentation ( float $width ) : void
SWFTextField::setLeftMargin ( float $width ) : void
SWFTextField::setLineSpacing ( float $height ) : void
SWFTextField::setMargins ( float $left , float $right ) : void
SWFTextField::setName ( string $name ) : void
SWFTextField::setPadding ( float $padding ) : void
SWFTextField::setRightMargin ( float $width ) : void
SWFTextField::__construct ([ int $flags ] )
SWFVideoStream::getNumFrames ( void ) : int
SWFVideoStream::setDimension ( int $x , int $y ) : void
SWFVideoStream::__construct ([ string $file ] )
Swoole\Async::dnsLookup ( string $hostname , callable $callback ) : void
Swoole\Async::read ( string $filename , callable $callback [, integer $chunk_size [, integer $offset ]] ) : bool
Swoole\Async::readFile ( string $filename , callable $callback ) : void
Swoole\Async::set ( array $settings ) : void
Swoole\Async::write ( string $filename , string $content [, integer $offset [, callable $callback ]] ) : void
Swoole\Async::writeFile ( string $filename , string $content [, callable $callback [, string $flags ]] ) : void
Swoole\Atomic::add ([ integer $add_value ] ) : integer
Swoole\Atomic::cmpset ( integer $cmp_value , integer $new_value ) : integer
Swoole\Atomic::get ( void ) : integer
Swoole\Atomic::set ( integer $value ) : integer
Swoole\Atomic::sub ([ integer $sub_value ] ) : integer
Swoole\Buffer::append ( string $data ) : integer
Swoole\Buffer::clear ( void ) : void
Swoole\Buffer::expand ( integer $size ) : integer
Swoole\Buffer::read ( integer $offset , integer $length ) : string
Swoole\Buffer::recycle ( void ) : void
Swoole\Buffer::substr ( integer $offset [, integer $length [, bool $remove ]] ) : string
Swoole\Buffer::write ( integer $offset , string $data ) : void
Swoole\Buffer::__destruct ( void ) : void
Swoole\Buffer::__toString ( void ) : string
Swoole\Channel::pop ( void ) : mixed
Swoole\Channel::push ( string $data ) : bool
Swoole\Channel::stats ( void ) : array
Swoole\Channel::__destruct ( void ) : void
Swoole\Client::close ([ bool $force ] ) : bool
Swoole\Client::connect ( string $host [, integer $port [, integer $timeout [, integer $flag ]]] ) : bool
Swoole\Client::getpeername ( void ) : array
Swoole\Client::getsockname ( void ) : array
Swoole\Client::isConnected ( void ) : bool
Swoole\Client::on ( string $event , callable $callback ) : void
Swoole\Client::pause ( void ) : void
Swoole\Client::pipe ( string $socket ) : void
Swoole\Client::recv ([ string $size [, string $flag ]] ) : void
Swoole\Client::resume ( void ) : void
Swoole\Client::send ( string $data [, string $flag ] ) : integer
Swoole\Client::sendfile ( string $filename [, int $offset ] ) : boolean
Swoole\Client::sendto ( string $ip , integer $port , string $data ) : boolean
Swoole\Client::set ( array $settings ) : void
Swoole\Client::sleep ( void ) : void
Swoole\Client::wakeup ( void ) : void
Swoole\Client::__destruct ( void ) : void
Swoole\Connection\Iterator::count ( void ) : int
Swoole\Connection\Iterator::current ( void ) : Connection
Swoole\Connection\Iterator::key ( void ) : int
Swoole\Connection\Iterator::next ( void ) : Connection
Swoole\Connection\Iterator::offsetExists ( int $index ) : boolean
Swoole\Connection\Iterator::offsetGet ( string $index ) : Connection
Swoole\Connection\Iterator::offsetSet ( int $offset , mixed $connection ) : void
Swoole\Connection\Iterator::offsetUnset ( int $offset ) : void
Swoole\Connection\Iterator::rewind ( void ) : void
Swoole\Connection\Iterator::valid ( void ) : boolean
Swoole\Coroutine::addFile ( void ) : ReturnType
Swoole\Coroutine::call_user_func ( callable $callback [, mixed $... ] ) : mixed
Swoole\Coroutine::call_user_func_array ( callable $callback , array $param_array ) : mixed
Swoole\Coroutine::cli_wait ( void ) : ReturnType
Swoole\Coroutine::close ( void ) : ReturnType
Swoole\Coroutine::connect ( void ) : ReturnType
Swoole\Coroutine::create ( void ) : ReturnType
Swoole\Coroutine::execute ( void ) : ReturnType
Swoole\Coroutine::get ( void ) : ReturnType
Swoole\Coroutine::getDefer ( void ) : ReturnType
Swoole\Coroutine::getpeername ( void ) : ReturnType
Swoole\Coroutine::getsockname ( void ) : ReturnType
Swoole\Coroutine::getuid ( void ) : ReturnType
Swoole\Coroutine::isConnected ( void ) : ReturnType
Swoole\Coroutine::post ( void ) : ReturnType
Swoole\Coroutine::query ( void ) : ReturnType
Swoole\Coroutine::recv ( void ) : ReturnType
Swoole\Coroutine::resume ( void ) : ReturnType
Swoole\Coroutine::send ( void ) : ReturnType
Swoole\Coroutine::sendfile ( void ) : ReturnType
Swoole\Coroutine::sendto ( void ) : ReturnType
Swoole\Coroutine::set ( void ) : ReturnType
Swoole\Coroutine::setCookies ( void ) : ReturnType
Swoole\Coroutine::setData ( void ) : ReturnType
Swoole\Coroutine::setDefer ( void ) : ReturnType
Swoole\Coroutine::setHeaders ( void ) : ReturnType
Swoole\Coroutine::setMethod ( void ) : ReturnType
Swoole\Coroutine::suspend ( void ) : ReturnType
Swoole\Coroutine::__destruct ( void ) : ReturnType
Swoole\Event::add ( int $fd , callable $read_callback [, callable $write_callback [, string $events ]] ) : boolean
Swoole\Event::defer ( mixed $callback ) : void
Swoole\Event::del ( string $fd ) : boolean
Swoole\Event::exit ( void ) : void
Swoole\Event::set ( int $fd [, string $read_callback [, string $write_callback [, string $events ]]] ) : boolean
Swoole\Event::wait ( void ) : void
Swoole\Event::write ( string $fd , string $data ) : void
Swoole\Http\Client::addFile ( string $path , string $name [, string $type [, string $filename [, string $offset ]]] ) : void
Swoole\Http\Client::close ( void ) : void
Swoole\Http\Client::download ( string $path , string $file , callable $callback [, integer $offset ] ) : void
Swoole\Http\Client::execute ( string $path , string $callback ) : void
Swoole\Http\Client::get ( string $path , callable $callback ) : void
Swoole\Http\Client::isConnected ( void ) : boolean
Swoole\Http\Client::on ( string $event_name , callable $callback ) : void
Swoole\Http\Client::post ( string $path , string $data , callable $callback ) : void
Swoole\Http\Client::push ( string $data [, string $opcode [, string $finish ]] ) : void
Swoole\Http\Client::set ( array $settings ) : void
Swoole\Http\Client::setCookies ( array $cookies ) : void
Swoole\Http\Client::setData ( string $data ) : ReturnType
Swoole\Http\Client::setHeaders ( array $headers ) : void
Swoole\Http\Client::setMethod ( string $method ) : void
Swoole\Http\Client::upgrade ( string $path , string $callback ) : void
Swoole\Http\Client::__destruct ( void ) : void
Swoole\Http\Request::rawcontent ( void ) : string
Swoole\Http\Request::__destruct ( void ) : void
Swoole\Http\Response::cookie ( string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly ]]]]]] ) : string
Swoole\Http\Response::end ([ string $content ] ) : void
Swoole\Http\Response::gzip ([ string $compress_level ] ) : ReturnType
Swoole\Http\Response::header ( string $key , string $value [, string $ucwords ] ) : void
Swoole\Http\Response::initHeader ( void ) : ReturnType
Swoole\Http\Response::rawcookie ( string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly ]]]]]] ) : ReturnType
Swoole\Http\Response::sendfile ( string $filename [, int $offset ] ) : ReturnType
Swoole\Http\Response::status ( string $http_code ) : ReturnType
Swoole\Http\Response::write ( string $content ) : void
Swoole\Http\Response::__destruct ( void ) : void
Swoole\Http\Server::addlistener ( string $host , integer $port , string $socket_type ) : void
Swoole\Http\Server::addProcess ( swoole_process $process ) : boolean
Swoole\Http\Server::after ( integer $after_time_ms , callable $callback [, string $param ] ) : ReturnType
Swoole\Http\Server::bind ( integer $fd , integer $uid ) : boolean
Swoole\Http\Server::clearTimer ( integer $timer_id ) : void
Swoole\Http\Server::close ( integer $fd [, boolean $reset ] ) : boolean
Swoole\Http\Server::confirm ( integer $fd ) : boolean
Swoole\Http\Server::connection_info ( integer $fd [, integer $reactor_id ] ) : array
Swoole\Http\Server::connection_list ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Http\Server::defer ( callable $callback ) : void
Swoole\Http\Server::exist ( integer $fd ) : boolean
Swoole\Http\Server::finish ( string $data ) : void
Swoole\Http\Server::getClientInfo ( integer $fd [, integer $reactor_id ] ) : ReturnType
Swoole\Http\Server::getClientList ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Http\Server::getLastError ( void ) : integer
Swoole\Http\Server::heartbeat ( boolean $if_close_connection ) : mixed
Swoole\Http\Server::listen ( string $host , integer $port , string $socket_type ) : boolean
Swoole\Http\Server::on ( string $event_name , callable $callback ) : void
Swoole\Http\Server::pause ( integer $fd ) : void
Swoole\Http\Server::protect ( integer $fd [, boolean $is_protected ] ) : void
Swoole\Http\Server::reload ( void ) : boolean
Swoole\Http\Server::resume ( integer $fd ) : void
Swoole\Http\Server::send ( integer $fd , string $data [, integer $reactor_id ] ) : boolean
Swoole\Http\Server::sendfile ( integer $fd , string $filename [, integer $offset ] ) : boolean
Swoole\Http\Server::sendMessage ( integer $worker_id , string $data ) : boolean
Swoole\Http\Server::sendto ( string $ip , integer $port , string $data [, string $server_socket ] ) : boolean
Swoole\Http\Server::sendwait ( integer $fd , string $data ) : boolean
Swoole\Http\Server::set ( array $settings ) : void
Swoole\Http\Server::shutdown ( void ) : void
Swoole\Http\Server::start ( void ) : void
Swoole\Http\Server::stats ( void ) : array
Swoole\Http\Server::stop ([ integer $worker_id ] ) : boolean
Swoole\Http\Server::swoole_timer_clear ( integer $timer_id ) : void
Swoole\Http\Server::task ( string $data [, integer $dst_worker_id [, callable $callback ]] ) : mixed
Swoole\Http\Server::taskwait ( string $data [, float $timeout [, integer $worker_id ]] ) : void
Swoole\Http\Server::taskWaitMulti ( array $tasks [, double $timeout_ms ] ) : void
Swoole\Http\Server::tick ( integer $interval_ms , callable $callback ) : void
Swoole\Http\Server::__destruct ( void ) : void
Swoole\Lock::lock ( void ) : void
Swoole\Lock::lock_read ( void ) : void
Swoole\Lock::trylock ( void ) : void
Swoole\Lock::trylock_read ( void ) : void
Swoole\Lock::unlock ( void ) : void
Swoole\Lock::__destruct ( void ) : void
Swoole\Mmap::open ( string $filename [, string $size [, string $offset ]] ) : ReturnType
Swoole\MySQL::close ( void ) : void
Swoole\MySQL::connect ( array $server_config , callable $callback ) : void
Swoole\MySQL::getBuffer ( void ) : ReturnType
Swoole\MySQL::on ( string $event_name , callable $callback ) : void
Swoole\MySQL::query ( string $sql , callable $callback ) : ReturnType
Swoole\MySQL::__destruct ( void ) : void
Swoole\Process::alarm ( integer $interval_usec ) : void
Swoole\Process::close ( void ) : void
Swoole\Process::daemon ([ boolean $nochdir [, boolean $noclose ]] ) : void
Swoole\Process::exec ( string $exec_file , string $args ) : ReturnType
Swoole\Process::exit ([ string $exit_code ] ) : void
Swoole\Process::freeQueue ( void ) : void
Swoole\Process::kill ( integer $pid [, string $signal_no ] ) : void
Swoole\Process::name ( string $process_name ) : void
Swoole\Process::pop ([ integer $maxsize ] ) : mixed
Swoole\Process::push ( string $data ) : boolean
Swoole\Process::read ([ integer $maxsize ] ) : string
Swoole\Process::signal ( string $signal_no , callable $callback ) : void
Swoole\Process::start ( void ) : void
Swoole\Process::statQueue ( void ) : array
Swoole\Process::useQueue ( integer $key [, integer $mode ] ) : boolean
Swoole\Process::wait ([ boolean $blocking ] ) : array
Swoole\Process::write ( string $data ) : integer
Swoole\Process::__destruct ( void ) : void
Swoole\Redis\Server::addlistener ( string $host , integer $port , string $socket_type ) : void
Swoole\Redis\Server::addProcess ( swoole_process $process ) : boolean
Swoole\Redis\Server::after ( integer $after_time_ms , callable $callback [, string $param ] ) : ReturnType
Swoole\Redis\Server::bind ( integer $fd , integer $uid ) : boolean
Swoole\Redis\Server::clearTimer ( integer $timer_id ) : void
Swoole\Redis\Server::close ( integer $fd [, boolean $reset ] ) : boolean
Swoole\Redis\Server::confirm ( integer $fd ) : boolean
Swoole\Redis\Server::connection_info ( integer $fd [, integer $reactor_id ] ) : array
Swoole\Redis\Server::connection_list ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Redis\Server::defer ( callable $callback ) : void
Swoole\Redis\Server::exist ( integer $fd ) : boolean
Swoole\Redis\Server::finish ( string $data ) : void
Swoole\Redis\Server::format ( string $type [, string $value ] ) : ReturnType
Swoole\Redis\Server::getClientInfo ( integer $fd [, integer $reactor_id ] ) : ReturnType
Swoole\Redis\Server::getClientList ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Redis\Server::getLastError ( void ) : integer
Swoole\Redis\Server::heartbeat ( boolean $if_close_connection ) : mixed
Swoole\Redis\Server::listen ( string $host , integer $port , string $socket_type ) : boolean
Swoole\Redis\Server::on ( string $event_name , callable $callback ) : ReturnType
Swoole\Redis\Server::pause ( integer $fd ) : void
Swoole\Redis\Server::protect ( integer $fd [, boolean $is_protected ] ) : void
Swoole\Redis\Server::reload ( void ) : boolean
Swoole\Redis\Server::resume ( integer $fd ) : void
Swoole\Redis\Server::send ( integer $fd , string $data [, integer $reactor_id ] ) : boolean
Swoole\Redis\Server::sendfile ( integer $fd , string $filename [, integer $offset ] ) : boolean
Swoole\Redis\Server::sendMessage ( integer $worker_id , string $data ) : boolean
Swoole\Redis\Server::sendto ( string $ip , integer $port , string $data [, string $server_socket ] ) : boolean
Swoole\Redis\Server::sendwait ( integer $fd , string $data ) : boolean
Swoole\Redis\Server::set ( array $settings ) : void
Swoole\Redis\Server::setHandler ( string $command , string $callback [, string $number_of_string_param [, string $type_of_array_param ]] ) : ReturnType
Swoole\Redis\Server::shutdown ( void ) : void
Swoole\Redis\Server::start ( void ) : ReturnType
Swoole\Redis\Server::stats ( void ) : array
Swoole\Redis\Server::stop ([ integer $worker_id ] ) : boolean
Swoole\Redis\Server::swoole_timer_clear ( integer $timer_id ) : void
Swoole\Redis\Server::task ( string $data [, integer $dst_worker_id [, callable $callback ]] ) : mixed
Swoole\Redis\Server::taskwait ( string $data [, float $timeout [, integer $worker_id ]] ) : void
Swoole\Redis\Server::taskWaitMulti ( array $tasks [, double $timeout_ms ] ) : void
Swoole\Redis\Server::tick ( integer $interval_ms , callable $callback ) : void
Swoole\Redis\Server::__destruct ( void ) : void
Swoole\Serialize::pack ( string $data [, int $is_fast ] ) : ReturnType
Swoole\Serialize::unpack ( string $data [, string $args ] ) : ReturnType
Swoole\Server::addlistener ( string $host , integer $port , string $socket_type ) : void
Swoole\Server::addProcess ( swoole_process $process ) : boolean
Swoole\Server::after ( integer $after_time_ms , callable $callback [, string $param ] ) : ReturnType
Swoole\Server::bind ( integer $fd , integer $uid ) : boolean
Swoole\Server::clearTimer ( integer $timer_id ) : void
Swoole\Server::close ( integer $fd [, boolean $reset ] ) : boolean
Swoole\Server::confirm ( integer $fd ) : boolean
Swoole\Server::connection_info ( integer $fd [, integer $reactor_id ] ) : array
Swoole\Server::connection_list ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Server::defer ( callable $callback ) : void
Swoole\Server::exist ( integer $fd ) : boolean
Swoole\Server::finish ( string $data ) : void
Swoole\Server::getClientInfo ( integer $fd [, integer $reactor_id ] ) : ReturnType
Swoole\Server::getClientList ( integer $start_fd [, integer $pagesize ] ) : array
Swoole\Server::getLastError ( void ) : integer
Swoole\Server::heartbeat ( boolean $if_close_connection ) : mixed
Swoole\Server::listen ( string $host , integer $port , string $socket_type ) : boolean
Swoole\Server::on ( string $event_name , callable $callback ) : ReturnType
Swoole\Server::pause ( integer $fd ) : void
Swoole\Server::protect ( integer $fd [, boolean $is_protected ] ) : void
Swoole\Server::reload ( void ) : boolean
Swoole\Server::resume ( integer $fd ) : void
Swoole\Server::send ( integer $fd , string $data [, integer $reactor_id ] ) : boolean
Swoole\Server::sendfile ( integer $fd , string $filename [, integer $offset ] ) : boolean
Swoole\Server::sendMessage ( integer $worker_id , string $data ) : boolean
Swoole\Server::sendto ( string $ip , integer $port , string $data [, string $server_socket ] ) : boolean
Swoole\Server::sendwait ( integer $fd , string $data ) : boolean
Swoole\Server::set ( array $settings ) : void
Swoole\Server::shutdown ( void ) : void
Swoole\Server::start ( void ) : void
Swoole\Server::stats ( void ) : array
Swoole\Server::stop ([ integer $worker_id ] ) : boolean
Swoole\Server::swoole_timer_clear ( integer $timer_id ) : void
Swoole\Server::task ( string $data [, integer $dst_worker_id [, callable $callback ]] ) : mixed
Swoole\Server::taskwait ( string $data [, float $timeout [, integer $worker_id ]] ) : void
Swoole\Server::taskWaitMulti ( array $tasks [, double $timeout_ms ] ) : void
Swoole\Server::tick ( integer $interval_ms , callable $callback ) : void
Swoole\Server::__destruct ( void ) : void
Swoole\Table::column ( string $name , string $type [, integer $size ] ) : ReturnType
Swoole\Table::count ( void ) : integer
Swoole\Table::create ( void ) : void
Swoole\Table::current ( void ) : array
Swoole\Table::decr ( string $key , string $column [, integer $decrby ] ) : ReturnType
Swoole\Table::del ( string $key ) : void
Swoole\Table::destroy ( void ) : void
Swoole\Table::exist ( string $key ) : boolean
Swoole\Table::get ( string $row_key , string $column_key ) : integer
Swoole\Table::incr ( string $key , string $column [, integer $incrby ] ) : void
Swoole\Table::key ( void ) : string
Swoole\Table::next ( void ) : ReturnType
Swoole\Table::rewind ( void ) : void
Swoole\Table::set ( string $key , array $value ) : VOID
Swoole\Table::valid ( void ) : boolean
Swoole\Timer::after ( int $after_time_ms , callable $callback ) : void
Swoole\Timer::clear ( integer $timer_id ) : void
Swoole\Timer::exists ( integer $timer_id ) : boolean
Swoole\Timer::tick ( integer $interval_ms , callable $callback [, string $param ] ) : void
Swoole\WebSocket\Server::exist ( integer $fd ) : boolean
Swoole\WebSocket\Server::on ( string $event_name , callable $callback ) : ReturnType
Swoole\WebSocket\Server::pack ( string $data [, string $opcode [, string $finish [, string $mask ]]] ) : binary
Swoole\WebSocket\Server::push ( string $fd , string $data [, string $opcode [, string $finish ]] ) : void
Swoole\WebSocket\Server::start ( void ) : void
Swoole\WebSocket\Server::unpack ( binary $data ) : string
SyncEvent::fire ( void ) : bool
SyncEvent::reset ( void ) : bool
SyncEvent::wait ([ int $wait = -1 ] ) : bool
SyncEvent::__construct ([ string $name [, bool $manual = FALSE [, bool $prefire = FALSE ]]] )
SyncMutex::lock ([ int $wait = -1 ] ) : bool
SyncMutex::unlock ([ bool $all = FALSE ] ) : bool
SyncMutex::__construct ([ string $name ] )
SyncReaderWriter::readlock ([ int $wait = -1 ] ) : bool
SyncReaderWriter::readunlock ( void ) : bool
SyncReaderWriter::writelock ([ int $wait = -1 ] ) : bool
SyncReaderWriter::writeunlock ( void ) : bool
SyncReaderWriter::__construct ([ string $name [, bool $autounlock = TRUE ]] )
SyncSemaphore::lock ([ int $wait = -1 ] ) : bool
SyncSemaphore::unlock ([ int &$prevcount ] ) : bool
SyncSemaphore::__construct ([ string $name [, int $initialval = 1 [, bool $autounlock = TRUE ]]] )
SyncSharedMemory::first ( void ) : bool
SyncSharedMemory::read ([ int $start = 0 [, int $length ]] )
SyncSharedMemory::size ( void ) : bool
SyncSharedMemory::write ([ string $string [, int $start = 0 ]] )
SyncSharedMemory::__construct ( string $name , int $size )
Thread::chunk ( int $size , bool $preserve ) : array
Thread::count ( void ) : int
Thread::detach ( void ) : void
Thread::extend ( string $class ) : bool
Thread::from ( Closure $run [, Closure $construct [, array $args ]] ) : Threaded
Thread::getCreatorId ( void ) : int
Thread::getCurrentThread ( void ) : Thread
Thread::getCurrentThreadId ( void ) : int
Thread::getTerminationInfo ( void ) : array
Thread::getThreadId ( void ) : int
Thread::globally ( void ) : mixed
Thread::isJoined ( void ) : bool
Thread::isRunning ( void ) : bool
Thread::isStarted ( void ) : bool
Thread::isTerminated ( void ) : bool
Thread::isWaiting ( void ) : bool
Thread::join ( void ) : bool
Thread::kill ( void ) : void
Thread::lock ( void ) : bool
Thread::merge ( mixed $from [, bool $overwrite ] ) : bool
Thread::notify ( void ) : bool
Thread::notifyOne ( void ) : bool
Thread::pop ( void ) : bool
Thread::run ( void ) : void
Thread::shift ( void ) : mixed
Thread::start ([ int $options ] ) : bool
Thread::synchronized ( Closure $block [, mixed $... ] ) : mixed
Thread::unlock ( void ) : bool
Thread::wait ([ int $timeout ] ) : bool
Threaded::chunk ( int $size , bool $preserve ) : array
Threaded::count ( void ) : int
Threaded::extend ( string $class ) : bool
Threaded::from ( Closure $run [, Closure $construct [, array $args ]] ) : Threaded
Threaded::getTerminationInfo ( void ) : array
Threaded::isRunning ( void ) : bool
Threaded::isTerminated ( void ) : bool
Threaded::isWaiting ( void ) : bool
Threaded::lock ( void ) : bool
Threaded::merge ( mixed $from [, bool $overwrite ] ) : bool
Threaded::notify ( void ) : bool
Threaded::notifyOne ( void ) : bool
Threaded::pop ( void ) : bool
Threaded::run ( void ) : void
Threaded::shift ( void ) : mixed
Threaded::synchronized ( Closure $block [, mixed $... ] ) : mixed
Threaded::unlock ( void ) : bool
Threaded::wait ([ int $timeout ] ) : bool
Throwable::getCode ( void ) : int
Throwable::getFile ( void ) : string
Throwable::getLine ( void ) : int
Throwable::getMessage ( void ) : string
Throwable::getPrevious ( void ) : Throwable
Throwable::getTrace ( void ) : array
Throwable::getTraceAsString ( void ) : string
Throwable::__toString ( void ) : string
tidy::body ( void ) : tidyNode
tidy::cleanRepair ( void ) : bool
tidy::diagnose ( void ) : bool
tidy::getConfig ( void ) : array
tidy::getHtmlVer ( void ) : int
tidy::getOpt ( string $option ) : mixed
tidy::getOptDoc ( string $optname ) : string
tidy::getRelease ( void ) : string
tidy::getStatus ( void ) : int
tidy::head ( void ) : tidyNode
tidy::html ( void ) : tidyNode
tidy::isXhtml ( void ) : bool
tidy::isXml ( void ) : bool
tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] ) : bool
tidy::parseString ( string $input [, mixed $config [, string $encoding ]] ) : bool
tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] ) : string
tidy::repairString ( string $data [, mixed $config [, string $encoding ]] ) : string
tidy::root ( void ) : tidyNode
tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )
tidyNode::getParent ( void ) : tidyNode
tidyNode::hasChildren ( void ) : bool
tidyNode::hasSiblings ( void ) : bool
tidyNode::isAsp ( void ) : bool
tidyNode::isComment ( void ) : bool
tidyNode::isHtml ( void ) : bool
tidyNode::isJste ( void ) : bool
tidyNode::isPhp ( void ) : bool
tidyNode::isText ( void ) : bool
tidyNode::__construct ( void )
TokyoTyrant::add ( string $key , number $increment [, int $type = 0 ] ) : number
TokyoTyrant::connect ( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]] ) : TokyoTyrant
TokyoTyrant::connectUri ( string $uri ) : TokyoTyrant
TokyoTyrant::copy ( string $path ) : TokyoTyrant
TokyoTyrant::ext ( string $name , int $options , string $key , string $value ) : string
TokyoTyrant::fwmKeys ( string $prefix , int $max_recs ) : array
TokyoTyrant::get ( mixed $keys ) : mixed
TokyoTyrant::getIterator ( void ) : TokyoTyrantIterator
TokyoTyrant::num ( void ) : int
TokyoTyrant::out ( mixed $keys ) : TokyoTyrant
TokyoTyrant::put ( mixed $keys [, string $value = NULL ] ) : TokyoTyrant
TokyoTyrant::putCat ( mixed $keys [, string $value ] ) : TokyoTyrant
TokyoTyrant::putKeep ( mixed $keys [, string $value ] ) : TokyoTyrant
TokyoTyrant::putNr ( mixed $keys [, string $value = NULL ] ) : TokyoTyrant
TokyoTyrant::putShl ( string $key , string $value , int $width ) : mixed
TokyoTyrant::restore ( string $log_dir , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrant::setMaster ( string $host , int $port , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrant::size ( string $key ) : int
TokyoTyrant::stat ( void ) : array
TokyoTyrant::sync ( void ) : mixed
TokyoTyrant::tune ( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ] ) : TokyoTyrant
TokyoTyrant::vanish ( void ) : mixed
TokyoTyrant::__construct ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )
tokyotyrantexception::getCode ( void ) : mixed
tokyotyrantexception::getFile ( void ) : string
tokyotyrantexception::getLine ( void ) : int
tokyotyrantexception::getMessage ( void ) : string
tokyotyrantexception::getPrevious ( void ) : Throwable
tokyotyrantexception::getTrace ( void ) : array
tokyotyrantexception::getTraceAsString ( void ) : string
tokyotyrantexception::__clone ( void ) : void
tokyotyrantexception::__toString ( void ) : string
TokyoTyrantIterator::add ( string $key , number $increment [, int $type = 0 ] ) : number
TokyoTyrantIterator::connect ( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]] ) : TokyoTyrant
TokyoTyrantIterator::connectUri ( string $uri ) : TokyoTyrant
TokyoTyrantIterator::copy ( string $path ) : TokyoTyrant
TokyoTyrantIterator::current ( void ) : mixed
TokyoTyrantIterator::ext ( string $name , int $options , string $key , string $value ) : string
TokyoTyrantIterator::fwmKeys ( string $prefix , int $max_recs ) : array
TokyoTyrantIterator::get ( mixed $keys ) : mixed
TokyoTyrantIterator::getIterator ( void ) : TokyoTyrantIterator
TokyoTyrantIterator::key ( void ) : mixed
TokyoTyrantIterator::next ( void ) : mixed
TokyoTyrantIterator::num ( void ) : int
TokyoTyrantIterator::out ( mixed $keys ) : TokyoTyrant
TokyoTyrantIterator::put ( mixed $keys [, string $value = NULL ] ) : TokyoTyrant
TokyoTyrantIterator::putCat ( mixed $keys [, string $value ] ) : TokyoTyrant
TokyoTyrantIterator::putKeep ( mixed $keys [, string $value ] ) : TokyoTyrant
TokyoTyrantIterator::putNr ( mixed $keys [, string $value = NULL ] ) : TokyoTyrant
TokyoTyrantIterator::putShl ( string $key , string $value , int $width ) : mixed
TokyoTyrantIterator::restore ( string $log_dir , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrantIterator::rewind ( void ) : void
TokyoTyrantIterator::setMaster ( string $host , int $port , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrantIterator::size ( string $key ) : int
TokyoTyrantIterator::stat ( void ) : array
TokyoTyrantIterator::sync ( void ) : mixed
TokyoTyrantIterator::tune ( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ] ) : TokyoTyrant
TokyoTyrantIterator::valid ( void ) : bool
TokyoTyrantIterator::vanish ( void ) : mixed
TokyoTyrantIterator::__construct ( mixed $object )
TokyoTyrantQuery::addCond ( string $name , int $op , string $expr ) : mixed
TokyoTyrantQuery::count ( void ) : int
TokyoTyrantQuery::current ( void ) : array
TokyoTyrantQuery::hint ( void ) : string
TokyoTyrantQuery::key ( void ) : string
TokyoTyrantQuery::metaSearch ( array $queries , int $type ) : array
TokyoTyrantQuery::next ( void ) : array
TokyoTyrantQuery::out ( void ) : TokyoTyrantQuery
TokyoTyrantQuery::rewind ( void ) : bool
TokyoTyrantQuery::search ( void ) : array
TokyoTyrantQuery::setLimit ([ int $max [, int $skip ]] ) : mixed
TokyoTyrantQuery::setOrder ( string $name , int $type ) : mixed
TokyoTyrantQuery::valid ( void ) : bool
TokyoTyrantQuery::__construct ( TokyoTyrantTable $table )
TokyoTyrantTable::add ( string $key , mixed $increment [, string $type ] ) : void
TokyoTyrantTable::connect ( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]] ) : TokyoTyrant
TokyoTyrantTable::connectUri ( string $uri ) : TokyoTyrant
TokyoTyrantTable::copy ( string $path ) : TokyoTyrant
TokyoTyrantTable::ext ( string $name , int $options , string $key , string $value ) : string
TokyoTyrantTable::fwmKeys ( string $prefix , int $max_recs ) : array
TokyoTyrantTable::genUid ( void ) : int
TokyoTyrantTable::get ( mixed $keys ) : array
TokyoTyrantTable::getIterator ( void ) : TokyoTyrantIterator
TokyoTyrantTable::getQuery ( void ) : TokyoTyrantQuery
TokyoTyrantTable::num ( void ) : int
TokyoTyrantTable::out ( mixed $keys ) : void
TokyoTyrantTable::put ( string $key , array $columns ) : int
TokyoTyrantTable::putCat ( string $key , array $columns ) : void
TokyoTyrantTable::putKeep ( string $key , array $columns ) : void
TokyoTyrantTable::putNr ( mixed $keys [, string $value ] ) : void
TokyoTyrantTable::putShl ( string $key , string $value , int $width ) : void
TokyoTyrantTable::restore ( string $log_dir , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrantTable::setIndex ( string $column , int $type ) : mixed
TokyoTyrantTable::setMaster ( string $host , int $port , int $timestamp [, bool $check_consistency = TRUE ] ) : mixed
TokyoTyrantTable::size ( string $key ) : int
TokyoTyrantTable::stat ( void ) : array
TokyoTyrantTable::sync ( void ) : mixed
TokyoTyrantTable::tune ( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ] ) : TokyoTyrant
TokyoTyrantTable::vanish ( void ) : mixed
TokyoTyrantTable::__construct ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )
Transliterator::create ( string $id [, int $direction ] ) : Transliterator
Transliterator::createFromRules ( string $rules [, string $direction ] ) : Transliterator
Transliterator::createInverse ( void ) : Transliterator
Transliterator::getErrorCode ( void ) : int
Transliterator::getErrorMessage ( void ) : string
Transliterator::listIDs ( void ) : array
Transliterator::transliterate ( string $subject [, int $start [, int $end ]] ) : string
Transliterator::__construct ( void )
TypeError::getCode ( void ) : mixed
TypeError::getFile ( void ) : string
TypeError::getLine ( void ) : int
TypeError::getMessage ( void ) : string
TypeError::getPrevious ( void ) : Throwable
TypeError::getTrace ( void ) : array
TypeError::getTraceAsString ( void ) : string
TypeError::__clone ( void ) : void
TypeError::__toString ( void ) : string
UConverter::convert ( string $str [, bool $reverse ] ) : string
UConverter::fromUCallback ( int $reason , string $source , string $codePoint , int &$error ) : mixed
UConverter::getAliases ( string $name ) : array
UConverter::getAvailable ( void ) : array
UConverter::getDestinationEncoding ( void ) : string
UConverter::getDestinationType ( void ) : int
UConverter::getErrorCode ( void ) : int
UConverter::getErrorMessage ( void ) : string
UConverter::getSourceEncoding ( void ) : string
UConverter::getSourceType ( void ) : int
UConverter::getStandards ( void ) : array
UConverter::getSubstChars ( void ) : string
UConverter::reasonText ([ int $reason ] ) : string
UConverter::setDestinationEncoding ( string $encoding ) : void
UConverter::setSourceEncoding ( string $encoding ) : void
UConverter::setSubstChars ( string $chars ) : void
UConverter::toUCallback ( int $reason , string $source , string $codeUnits , int &$error ) : mixed
UConverter::transcode ( string $str , string $toEncoding , string $fromEncoding [, array $options ] ) : string
UConverter::__construct ([ string $destination_encoding [, string $source_encoding ]] )
UI\Area::destroy ( void )
UI\Area::disable ( void )
UI\Area::enable ( void )
UI\Area::getParent ( void ) : UI\Control
UI\Area::getTopLevel ( void ) : int
UI\Area::hide ( void )
UI\Area::isEnabled ( void ) : bool
UI\Area::isVisible ( void ) : bool
UI\Area::onDraw ( UI\Draw\Pen $pen , UI\Size $areaSize , UI\Point $clipPoint , UI\Size $clipSize )
UI\Area::onKey ( string $key , int $ext , int $flags )
UI\Area::onMouse ( UI\Point $areaPoint , UI\Size $areaSize , int $flags )
UI\Area::redraw ( void )
UI\Area::scrollTo ( UI\Point $point , UI\Size $size )
UI\Area::setParent ( UI\Control $parent )
UI\Area::setSize ( UI\Size $size )
UI\Area::show ( void )
UI\Control::destroy ( void )
UI\Control::disable ( void )
UI\Control::enable ( void )
UI\Control::getParent ( void ) : UI\Control
UI\Control::getTopLevel ( void ) : int
UI\Control::hide ( void )
UI\Control::isEnabled ( void ) : bool
UI\Control::isVisible ( void ) : bool
UI\Control::setParent ( UI\Control $parent )
UI\Control::show ( void )
UI\Controls\Box::append ( Control $control [, bool $stretchy = FALSE ] ) : int
UI\Controls\Box::delete ( int $index ) : bool
UI\Controls\Box::destroy ( void )
UI\Controls\Box::disable ( void )
UI\Controls\Box::enable ( void )
UI\Controls\Box::getOrientation ( void ) : int
UI\Controls\Box::getParent ( void ) : UI\Control
UI\Controls\Box::getTopLevel ( void ) : int
UI\Controls\Box::hide ( void )
UI\Controls\Box::isEnabled ( void ) : bool
UI\Controls\Box::isPadded ( void ) : bool
UI\Controls\Box::isVisible ( void ) : bool
UI\Controls\Box::setPadded ( bool $padded )
UI\Controls\Box::setParent ( UI\Control $parent )
UI\Controls\Box::show ( void )
UI\Controls\Box::__construct ([ int $orientation = UI\Controls\Box::Horizontal ] )
UI\Controls\Button::destroy ( void )
UI\Controls\Button::disable ( void )
UI\Controls\Button::enable ( void )
UI\Controls\Button::getParent ( void ) : UI\Control
UI\Controls\Button::getText ( void ) : string
UI\Controls\Button::getTopLevel ( void ) : int
UI\Controls\Button::hide ( void )
UI\Controls\Button::isEnabled ( void ) : bool
UI\Controls\Button::isVisible ( void ) : bool
UI\Controls\Button::onClick ( void )
UI\Controls\Button::setParent ( UI\Control $parent )
UI\Controls\Button::setText ( string $text )
UI\Controls\Button::show ( void )
UI\Controls\Button::__construct ( string $text )
UI\Controls\Check::destroy ( void )
UI\Controls\Check::disable ( void )
UI\Controls\Check::enable ( void )
UI\Controls\Check::getParent ( void ) : UI\Control
UI\Controls\Check::getText ( void ) : string
UI\Controls\Check::getTopLevel ( void ) : int
UI\Controls\Check::hide ( void )
UI\Controls\Check::isChecked ( void ) : bool
UI\Controls\Check::isEnabled ( void ) : bool
UI\Controls\Check::isVisible ( void ) : bool
UI\Controls\Check::onToggle ( void )
UI\Controls\Check::setChecked ( bool $checked )
UI\Controls\Check::setParent ( UI\Control $parent )
UI\Controls\Check::setText ( string $text )
UI\Controls\Check::show ( void )
UI\Controls\Check::__construct ( string $text )
UI\Controls\ColorButton::destroy ( void )
UI\Controls\ColorButton::disable ( void )
UI\Controls\ColorButton::enable ( void )
UI\Controls\ColorButton::getColor ( void ) : UI\Color
UI\Controls\ColorButton::getParent ( void ) : UI\Control
UI\Controls\ColorButton::getTopLevel ( void ) : int
UI\Controls\ColorButton::hide ( void )
UI\Controls\ColorButton::isEnabled ( void ) : bool
UI\Controls\ColorButton::isVisible ( void ) : bool
UI\Controls\ColorButton::onChange ( void )
UI\Controls\ColorButton::setColor ( UI\Draw\Color $color ) [:OR:] ( int $color )
UI\Controls\ColorButton::setParent ( UI\Control $parent )
UI\Controls\ColorButton::show ( void )
UI\Controls\Combo::append ( string $text )
UI\Controls\Combo::destroy ( void )
UI\Controls\Combo::disable ( void )
UI\Controls\Combo::enable ( void )
UI\Controls\Combo::getParent ( void ) : UI\Control
UI\Controls\Combo::getSelected ( void ) : int
UI\Controls\Combo::getTopLevel ( void ) : int
UI\Controls\Combo::hide ( void )
UI\Controls\Combo::isEnabled ( void ) : bool
UI\Controls\Combo::isVisible ( void ) : bool
UI\Controls\Combo::onSelected ( void )
UI\Controls\Combo::setParent ( UI\Control $parent )
UI\Controls\Combo::setSelected ( int $index )
UI\Controls\Combo::show ( void )
UI\Controls\EditableCombo::append ( string $text )
UI\Controls\EditableCombo::destroy ( void )
UI\Controls\EditableCombo::disable ( void )
UI\Controls\EditableCombo::enable ( void )
UI\Controls\EditableCombo::getParent ( void ) : UI\Control
UI\Controls\EditableCombo::getText ( void ) : string
UI\Controls\EditableCombo::getTopLevel ( void ) : int
UI\Controls\EditableCombo::hide ( void )
UI\Controls\EditableCombo::isEnabled ( void ) : bool
UI\Controls\EditableCombo::isVisible ( void ) : bool
UI\Controls\EditableCombo::onChange ( void )
UI\Controls\EditableCombo::setParent ( UI\Control $parent )
UI\Controls\EditableCombo::setText ( string $text )
UI\Controls\EditableCombo::show ( void )
UI\Controls\Entry::destroy ( void )
UI\Controls\Entry::disable ( void )
UI\Controls\Entry::enable ( void )
UI\Controls\Entry::getParent ( void ) : UI\Control
UI\Controls\Entry::getText ( void ) : string
UI\Controls\Entry::getTopLevel ( void ) : int
UI\Controls\Entry::hide ( void )
UI\Controls\Entry::isEnabled ( void ) : bool
UI\Controls\Entry::isReadOnly ( void ) : bool
UI\Controls\Entry::isVisible ( void ) : bool
UI\Controls\Entry::onChange ( void )
UI\Controls\Entry::setParent ( UI\Control $parent )
UI\Controls\Entry::setReadOnly ( bool $readOnly )
UI\Controls\Entry::setText ( string $text )
UI\Controls\Entry::show ( void )
UI\Controls\Entry::__construct ([ int $type = UI\Controls\Entry::Normal ] )
UI\Controls\Form::append ( string $label , UI\Control $control [, bool $stretchy = FALSE ] ) : int
UI\Controls\Form::delete ( int $index ) : bool
UI\Controls\Form::destroy ( void )
UI\Controls\Form::disable ( void )
UI\Controls\Form::enable ( void )
UI\Controls\Form::getParent ( void ) : UI\Control
UI\Controls\Form::getTopLevel ( void ) : int
UI\Controls\Form::hide ( void )
UI\Controls\Form::isEnabled ( void ) : bool
UI\Controls\Form::isPadded ( void ) : bool
UI\Controls\Form::isVisible ( void ) : bool
UI\Controls\Form::setPadded ( bool $padded )
UI\Controls\Form::setParent ( UI\Control $parent )
UI\Controls\Form::show ( void )
UI\Controls\Grid::append ( UI\Control $control , int $left , int $top , int $xspan , int $yspan , bool $hexpand , int $halign , bool $vexpand , int $valign )
UI\Controls\Grid::destroy ( void )
UI\Controls\Grid::disable ( void )
UI\Controls\Grid::enable ( void )
UI\Controls\Grid::getParent ( void ) : UI\Control
UI\Controls\Grid::getTopLevel ( void ) : int
UI\Controls\Grid::hide ( void )
UI\Controls\Grid::isEnabled ( void ) : bool
UI\Controls\Grid::isPadded ( void ) : bool
UI\Controls\Grid::isVisible ( void ) : bool
UI\Controls\Grid::setPadded ( bool $padding )
UI\Controls\Grid::setParent ( UI\Control $parent )
UI\Controls\Grid::show ( void )
UI\Controls\Group::append ( UI\Control $control )
UI\Controls\Group::destroy ( void )
UI\Controls\Group::disable ( void )
UI\Controls\Group::enable ( void )
UI\Controls\Group::getParent ( void ) : UI\Control
UI\Controls\Group::getTitle ( void ) : string
UI\Controls\Group::getTopLevel ( void ) : int
UI\Controls\Group::hasMargin ( void ) : bool
UI\Controls\Group::hide ( void )
UI\Controls\Group::isEnabled ( void ) : bool
UI\Controls\Group::isVisible ( void ) : bool
UI\Controls\Group::setMargin ( bool $margin )
UI\Controls\Group::setParent ( UI\Control $parent )
UI\Controls\Group::setTitle ( string $title )
UI\Controls\Group::show ( void )
UI\Controls\Group::__construct ( string $title )
UI\Controls\Label::destroy ( void )
UI\Controls\Label::disable ( void )
UI\Controls\Label::enable ( void )
UI\Controls\Label::getParent ( void ) : UI\Control
UI\Controls\Label::getText ( void ) : string
UI\Controls\Label::getTopLevel ( void ) : int
UI\Controls\Label::hide ( void )
UI\Controls\Label::isEnabled ( void ) : bool
UI\Controls\Label::isVisible ( void ) : bool
UI\Controls\Label::setParent ( UI\Control $parent )
UI\Controls\Label::setText ( string $text )
UI\Controls\Label::show ( void )
UI\Controls\Label::__construct ( string $text )
UI\Controls\MultilineEntry::append ( string $text )
UI\Controls\MultilineEntry::destroy ( void )
UI\Controls\MultilineEntry::disable ( void )
UI\Controls\MultilineEntry::enable ( void )
UI\Controls\MultilineEntry::getParent ( void ) : UI\Control
UI\Controls\MultilineEntry::getText ( void ) : string
UI\Controls\MultilineEntry::getTopLevel ( void ) : int
UI\Controls\MultilineEntry::hide ( void )
UI\Controls\MultilineEntry::isEnabled ( void ) : bool
UI\Controls\MultilineEntry::isReadOnly ( void ) : bool
UI\Controls\MultilineEntry::isVisible ( void ) : bool
UI\Controls\MultilineEntry::onChange ( void )
UI\Controls\MultilineEntry::setParent ( UI\Control $parent )
UI\Controls\MultilineEntry::setReadOnly ( bool $readOnly )
UI\Controls\MultilineEntry::setText ( string $text )
UI\Controls\MultilineEntry::show ( void )
UI\Controls\MultilineEntry::__construct ([ int $type ] )
UI\Controls\Picker::destroy ( void )
UI\Controls\Picker::disable ( void )
UI\Controls\Picker::enable ( void )
UI\Controls\Picker::getParent ( void ) : UI\Control
UI\Controls\Picker::getTopLevel ( void ) : int
UI\Controls\Picker::hide ( void )
UI\Controls\Picker::isEnabled ( void ) : bool
UI\Controls\Picker::isVisible ( void ) : bool
UI\Controls\Picker::setParent ( UI\Control $parent )
UI\Controls\Picker::show ( void )
UI\Controls\Picker::__construct ([ int $type = UI\Controls\Picker::Date ] )
UI\Controls\Progress::destroy ( void )
UI\Controls\Progress::disable ( void )
UI\Controls\Progress::enable ( void )
UI\Controls\Progress::getParent ( void ) : UI\Control
UI\Controls\Progress::getTopLevel ( void ) : int
UI\Controls\Progress::getValue ( void ) : int
UI\Controls\Progress::hide ( void )
UI\Controls\Progress::isEnabled ( void ) : bool
UI\Controls\Progress::isVisible ( void ) : bool
UI\Controls\Progress::setParent ( UI\Control $parent )
UI\Controls\Progress::setValue ( int $value )
UI\Controls\Progress::show ( void )
UI\Controls\Radio::append ( string $text )
UI\Controls\Radio::destroy ( void )
UI\Controls\Radio::disable ( void )
UI\Controls\Radio::enable ( void )
UI\Controls\Radio::getParent ( void ) : UI\Control
UI\Controls\Radio::getSelected ( void ) : int
UI\Controls\Radio::getTopLevel ( void ) : int
UI\Controls\Radio::hide ( void )
UI\Controls\Radio::isEnabled ( void ) : bool
UI\Controls\Radio::isVisible ( void ) : bool
UI\Controls\Radio::onSelected ( void )
UI\Controls\Radio::setParent ( UI\Control $parent )
UI\Controls\Radio::setSelected ( int $index )
UI\Controls\Radio::show ( void )
UI\Controls\Separator::destroy ( void )
UI\Controls\Separator::disable ( void )
UI\Controls\Separator::enable ( void )
UI\Controls\Separator::getParent ( void ) : UI\Control
UI\Controls\Separator::getTopLevel ( void ) : int
UI\Controls\Separator::hide ( void )
UI\Controls\Separator::isEnabled ( void ) : bool
UI\Controls\Separator::isVisible ( void ) : bool
UI\Controls\Separator::setParent ( UI\Control $parent )
UI\Controls\Separator::show ( void )
UI\Controls\Separator::__construct ([ int $type = UI\Controls\Separator::Horizontal ] )
UI\Controls\Slider::destroy ( void )
UI\Controls\Slider::disable ( void )
UI\Controls\Slider::enable ( void )
UI\Controls\Slider::getParent ( void ) : UI\Control
UI\Controls\Slider::getTopLevel ( void ) : int
UI\Controls\Slider::getValue ( void ) : int
UI\Controls\Slider::hide ( void )
UI\Controls\Slider::isEnabled ( void ) : bool
UI\Controls\Slider::isVisible ( void ) : bool
UI\Controls\Slider::onChange ( void )
UI\Controls\Slider::setParent ( UI\Control $parent )
UI\Controls\Slider::setValue ( int $value )
UI\Controls\Slider::show ( void )
UI\Controls\Slider::__construct ( int $min , int $max )
UI\Controls\Spin::destroy ( void )
UI\Controls\Spin::disable ( void )
UI\Controls\Spin::enable ( void )
UI\Controls\Spin::getParent ( void ) : UI\Control
UI\Controls\Spin::getTopLevel ( void ) : int
UI\Controls\Spin::getValue ( void ) : int
UI\Controls\Spin::hide ( void )
UI\Controls\Spin::isEnabled ( void ) : bool
UI\Controls\Spin::isVisible ( void ) : bool
UI\Controls\Spin::onChange ( void )
UI\Controls\Spin::setParent ( UI\Control $parent )
UI\Controls\Spin::setValue ( int $value )
UI\Controls\Spin::show ( void )
UI\Controls\Spin::__construct ( int $min , int $max )
UI\Controls\Tab::append ( string $name , UI\Control $control ) : int
UI\Controls\Tab::delete ( int $index ) : bool
UI\Controls\Tab::destroy ( void )
UI\Controls\Tab::disable ( void )
UI\Controls\Tab::enable ( void )
UI\Controls\Tab::getParent ( void ) : UI\Control
UI\Controls\Tab::getTopLevel ( void ) : int
UI\Controls\Tab::hasMargin ( int $page ) : bool
UI\Controls\Tab::hide ( void )
UI\Controls\Tab::insertAt ( string $name , int $page , UI\Control $control )
UI\Controls\Tab::isEnabled ( void ) : bool
UI\Controls\Tab::isVisible ( void ) : bool
UI\Controls\Tab::pages ( void ) : int
UI\Controls\Tab::setMargin ( int $page , bool $margin )
UI\Controls\Tab::setParent ( UI\Control $parent )
UI\Controls\Tab::show ( void )
UI\Draw\Brush::getColor ( void ) : UI\Draw\Color
UI\Draw\Brush::setColor ( UI\Draw\Color $color ) : void [:OR:] ( int $color ) : void
UI\Draw\Brush::__construct ( UI\Draw\Color $color )
UI\Draw\Brush\Gradient::addStop ( float $position , UI\Draw\Color $color ) : int [:OR:] ( float $position , int $color ) : int
UI\Draw\Brush\Gradient::delStop ( int $index ) : int
UI\Draw\Brush\Gradient::getColor ( void ) : UI\Draw\Color
UI\Draw\Brush\Gradient::setColor ( UI\Draw\Color $color ) : void
UI\Draw\Brush\Gradient::setStop ( int $index , float $position , UI\Draw\Color $color ) : bool [:OR:] ( int $index , float $position , int $color ) : bool
UI\Draw\Brush\LinearGradient::addStop ( float $position , UI\Draw\Color $color ) : int
UI\Draw\Brush\LinearGradient::delStop ( int $index ) : int
UI\Draw\Brush\LinearGradient::setStop ( int $index , float $position , UI\Draw\Color $color ) : bool
UI\Draw\Brush\LinearGradient::__construct ( UI\Point $start , UI\Point $end )
UI\Draw\Brush\RadialGradient::addStop ( float $position , UI\Draw\Color $color ) : int
UI\Draw\Brush\RadialGradient::delStop ( int $index ) : int
UI\Draw\Brush\RadialGradient::setStop ( int $index , float $position , UI\Draw\Color $color ) : bool
UI\Draw\Brush\RadialGradient::__construct ( UI\Point $start , UI\Point $outer , float $radius )
UI\Draw\Color::getChannel ( int $channel ) : float
UI\Draw\Color::setChannel ( int $channel , float $value ) : void
UI\Draw\Color::__construct ([ UI\Draw\Color $color ] )
UI\Draw\Matrix::invert ( void )
UI\Draw\Matrix::isInvertible ( void ) : bool
UI\Draw\Matrix::multiply ( UI\Draw\Matrix $matrix ) : UI\Draw\Matrix
UI\Draw\Matrix::rotate ( UI\Point $point , float $amount )
UI\Draw\Matrix::scale ( UI\Point $center , UI\Point $point )
UI\Draw\Matrix::skew ( UI\Point $point , UI\Point $amount )
UI\Draw\Matrix::translate ( UI\Point $point )
UI\Draw\Path::addRectangle ( UI\Point $point , UI\Size $size )
UI\Draw\Path::arcTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
UI\Draw\Path::bezierTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
UI\Draw\Path::closeFigure ( void )
UI\Draw\Path::end ( void )
UI\Draw\Path::lineTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
UI\Draw\Path::newFigure ( UI\Point $point )
UI\Draw\Path::newFigureWithArc ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
UI\Draw\Path::__construct ([ int $mode = UI\Draw\Path::Winding ] )
UI\Draw\Pen::clip ( UI\Draw\Path $path )
UI\Draw\Pen::fill ( UI\Draw\Path $path , UI\Draw\Brush $with ) [:OR:] ( UI\Draw\Path $path , UI\Draw\Color $with ) [:OR:] ( UI\Draw\Path $path , int $with )
UI\Draw\Pen::restore ( void )
UI\Draw\Pen::save ( void )
UI\Draw\Pen::stroke ( UI\Draw\Path $path , UI\Draw\Brush $with , UI\Draw\Stroke $stroke ) [:OR:] ( UI\Draw\Path $path , UI\Draw\Color $with , UI\Draw\Stroke $stroke ) [:OR:] ( UI\Draw\Path $path , int $with , UI\Draw\Stroke $stroke )
UI\Draw\Pen::transform ( UI\Draw\Matrix $matrix )
UI\Draw\Pen::write ( UI\Point $point , UI\Draw\Text\Layout $layout )
UI\Draw\Stroke::getCap ( void ) : int
UI\Draw\Stroke::getJoin ( void ) : int
UI\Draw\Stroke::getMiterLimit ( void ) : float
UI\Draw\Stroke::getThickness ( void ) : float
UI\Draw\Stroke::setCap ( int $cap )
UI\Draw\Stroke::setJoin ( int $join )
UI\Draw\Stroke::setMiterLimit ( float $limit )
UI\Draw\Stroke::setThickness ( float $thickness )
UI\Draw\Stroke::__construct ([ int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10 ]]]] )
UI\Draw\Text\Font::getAscent ( void ) : float
UI\Draw\Text\Font::getDescent ( void ) : float
UI\Draw\Text\Font::getLeading ( void ) : float
UI\Draw\Text\Font::getUnderlinePosition ( void ) : float
UI\Draw\Text\Font::getUnderlineThickness ( void ) : float
UI\Draw\Text\Font::__construct ( UI\Draw\Text\Font\Descriptor $descriptor )
UI\Draw\Text\Font\Descriptor::getFamily ( void ) : string
UI\Draw\Text\Font\Descriptor::getItalic ( void ) : int
UI\Draw\Text\Font\Descriptor::getSize ( void ) : float
UI\Draw\Text\Font\Descriptor::getStretch ( void ) : int
UI\Draw\Text\Font\Descriptor::getWeight ( void ) : int
UI\Draw\Text\Font\Descriptor::__construct ( string $family , float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal ]]] )
UI\Draw\Text\Layout::setColor ( UI\Draw\Color $color [, int $start = 0 [, int $end ]] ) [:OR:] ( int $color [, int $start = 0 [, int $end ]] )
UI\Draw\Text\Layout::setWidth ( float $width )
UI\Draw\Text\Layout::__construct ( string $text , UI\Draw\Text\Font $font , float $width )
UI\Exception\InvalidArgumentException::getCode ( void ) : mixed
UI\Exception\InvalidArgumentException::getFile ( void ) : string
UI\Exception\InvalidArgumentException::getLine ( void ) : int
UI\Exception\InvalidArgumentException::getMessage ( void ) : string
UI\Exception\InvalidArgumentException::getPrevious ( void ) : Throwable
UI\Exception\InvalidArgumentException::getTrace ( void ) : array
UI\Exception\InvalidArgumentException::getTraceAsString ( void ) : string
UI\Exception\InvalidArgumentException::__clone ( void ) : void
UI\Exception\InvalidArgumentException::__toString ( void ) : string
UI\Exception\RuntimeException::getCode ( void ) : mixed
UI\Exception\RuntimeException::getFile ( void ) : string
UI\Exception\RuntimeException::getLine ( void ) : int
UI\Exception\RuntimeException::getMessage ( void ) : string
UI\Exception\RuntimeException::getPrevious ( void ) : Throwable
UI\Exception\RuntimeException::getTrace ( void ) : array
UI\Exception\RuntimeException::getTraceAsString ( void ) : string
UI\Exception\RuntimeException::__clone ( void ) : void
UI\Exception\RuntimeException::__toString ( void ) : string
UI\Executor::kill ( void ) : void
UI\Executor::onExecute ( void ) : void
UI\Executor::setInterval ( int $microseconds ) : bool [:OR:] ( int $seconds , int $microseconds ) : bool
UI\Executor::__construct ( void )
UI\Menu::append ( string $name [, string $type = UI\MenuItem::class ] ) : UI\MenuItem
UI\Menu::appendAbout ([ string $type = UI\MenuItem::class ] ) : UI\MenuItem
UI\Menu::appendCheck ( string $name [, string $type = UI\MenuItem::class ] ) : UI\MenuItem
UI\Menu::appendPreferences ([ string $type = UI\MenuItem::class ] ) : UI\MenuItem
UI\Menu::appendQuit ([ string $type = UI\MenuItem::class ] ) : UI\MenuItem
UI\Menu::appendSeparator ( void )
UI\Menu::__construct ( string $name )
UI\MenuItem::disable ( void )
UI\MenuItem::enable ( void )
UI\MenuItem::isChecked ( void ) : bool
UI\MenuItem::onClick ( void )
UI\MenuItem::setChecked ( bool $checked )
UI\Point::at ( float $point ) : UI\Point [:OR:] ( UI\Size $size ) : UI\Point
UI\Point::getX ( void ) : float
UI\Point::getY ( void ) : float
UI\Point::setX ( float $point )
UI\Point::setY ( float $point )
UI\Point::__construct ( float $x , float $y )
UI\Size::getHeight ( void ) : float
UI\Size::getWidth ( void ) : float
UI\Size::of ( float $size ) : UI\Size [:OR:] ( UI\Point $point ) : UI\Size
UI\Size::setHeight ( float $size )
UI\Size::setWidth ( float $size )
UI\Size::__construct ( float $width , float $height )
UI\Window::add ( UI\Control $control )
UI\Window::destroy ( void )
UI\Window::disable ( void )
UI\Window::enable ( void )
UI\Window::error ( string $title , string $msg )
UI\Window::getParent ( void ) : UI\Control
UI\Window::getSize ( void ) : UI\Size
UI\Window::getTitle ( void ) : string
UI\Window::getTopLevel ( void ) : int
UI\Window::hasBorders ( void ) : bool
UI\Window::hasMargin ( void ) : bool
UI\Window::hide ( void )
UI\Window::isEnabled ( void ) : bool
UI\Window::isFullScreen ( void ) : bool
UI\Window::isVisible ( void ) : bool
UI\Window::msg ( string $title , string $msg )
UI\Window::onClosing ( void ) : int
UI\Window::open ( void ) : string
UI\Window::save ( void ) : string
UI\Window::setBorders ( bool $borders )
UI\Window::setFullScreen ( bool $full )
UI\Window::setMargin ( bool $margin )
UI\Window::setParent ( UI\Control $parent )
UI\Window::setSize ( UI\Size $size )
UI\Window::setTitle ( string $title )
UI\Window::show ( void )
UI\Window::__construct ( string $title , Size $size [, bool $menu = FALSE ] )
UnderflowException::getCode ( void ) : mixed
UnderflowException::getFile ( void ) : string
UnderflowException::getLine ( void ) : int
UnderflowException::getMessage ( void ) : string
UnderflowException::getPrevious ( void ) : Throwable
UnderflowException::getTrace ( void ) : array
UnderflowException::getTraceAsString ( void ) : string
UnderflowException::__clone ( void ) : void
UnderflowException::__toString ( void ) : string
UnexpectedValueException::getCode ( void ) : mixed
UnexpectedValueException::getFile ( void ) : string
UnexpectedValueException::getLine ( void ) : int
UnexpectedValueException::getMessage ( void ) : string
UnexpectedValueException::getPrevious ( void ) : Throwable
UnexpectedValueException::getTrace ( void ) : array
UnexpectedValueException::getTraceAsString ( void ) : string
UnexpectedValueException::__clone ( void ) : void
UnexpectedValueException::__toString ( void ) : string
V8Js::executeString ( string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE ]] ) : mixed
V8Js::getExtensions ( void ) : array
V8Js::getPendingException ( void ) : V8JsException
V8Js::registerExtension ( string $extension_name , string $script [, array $dependencies = array() [, bool $auto_enable = FALSE ]] ) : bool
V8Js::__construct ([ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE ]]]] )
V8JsException::getCode ( void ) : mixed
V8JsException::getFile ( void ) : string
V8JsException::getJsFileName ( void ) : string
V8JsException::getJsLineNumber ( void ) : int
V8JsException::getJsSourceLine ( void ) : string
V8JsException::getJsTrace ( void ) : string
V8JsException::getLine ( void ) : int
V8JsException::getMessage ( void ) : string
V8JsException::getPrevious ( void ) : Throwable
V8JsException::getTrace ( void ) : array
V8JsException::getTraceAsString ( void ) : string
V8JsException::__clone ( void ) : void
V8JsException::__toString ( void ) : string
VarnishAdmin::auth ( void ) : bool
VarnishAdmin::ban ( string $vcl_regex ) : int
VarnishAdmin::banUrl ( string $vcl_regex ) : int
VarnishAdmin::clearPanic ( void ) : int
VarnishAdmin::connect ( void ) : bool
VarnishAdmin::disconnect ( void ) : bool
VarnishAdmin::getPanic ( void ) : string
VarnishAdmin::getParams ( void ) : array
VarnishAdmin::isRunning ( void ) : bool
VarnishAdmin::setCompat ( int $compat ) : void
VarnishAdmin::setHost ( string $host ) : void
VarnishAdmin::setIdent ( string $ident ) : void
VarnishAdmin::setParam ( string $name , string|integer $value ) : int
VarnishAdmin::setPort ( int $port ) : void
VarnishAdmin::setSecret ( string $secret ) : void
VarnishAdmin::setTimeout ( int $timeout ) : void
VarnishAdmin::start ( void ) : int
VarnishAdmin::stop ( void ) : int
VarnishAdmin::__construct ([ array $args ] )
VarnishLog::getLine ( void ) : array
VarnishLog::getTagName ( int $index ) : string
VarnishLog::__construct ([ array $args ] )
VarnishStat::getSnapshot ( void ) : array
VarnishStat::__construct ([ array $args ] )
Volatile::chunk ( int $size , bool $preserve ) : array
Volatile::count ( void ) : int
Volatile::extend ( string $class ) : bool
Volatile::from ( Closure $run [, Closure $construct [, array $args ]] ) : Threaded
Volatile::getTerminationInfo ( void ) : array
Volatile::isRunning ( void ) : bool
Volatile::isTerminated ( void ) : bool
Volatile::isWaiting ( void ) : bool
Volatile::lock ( void ) : bool
Volatile::merge ( mixed $from [, bool $overwrite ] ) : bool
Volatile::notify ( void ) : bool
Volatile::notifyOne ( void ) : bool
Volatile::pop ( void ) : bool
Volatile::run ( void ) : void
Volatile::shift ( void ) : mixed
Volatile::synchronized ( Closure $block [, mixed $... ] ) : mixed
Volatile::unlock ( void ) : bool
Volatile::wait ([ int $timeout ] ) : bool
Vtiful\Kernel\Excel::addSheet ( string $sheetName )
Vtiful\Kernel\Excel::autoFilter ( string $scope )
Vtiful\Kernel\Excel::constMemory ( string $fileName [, string $sheetName ] )
Vtiful\Kernel\Excel::data ( array $data )
Vtiful\Kernel\Excel::fileName ( string $fileName [, string $sheetName ] )
Vtiful\Kernel\Excel::getHandle ( void )
Vtiful\Kernel\Excel::header ( array $headerData )
Vtiful\Kernel\Excel::insertFormula ( int $row , int $column , string $formula )
Vtiful\Kernel\Excel::insertImage ( int $row , int $column , string $localImagePath )
Vtiful\Kernel\Excel::insertText ( int $row , int $column , string int double $data [, string $format ] )
Vtiful\Kernel\Excel::mergeCells ( string $scope , string $data )
Vtiful\Kernel\Excel::output ( void )
Vtiful\Kernel\Excel::setColumn ( string $range , float $width [, resource $format ] )
Vtiful\Kernel\Excel::setRow ( string $range , float $height [, resource $format ] )
Vtiful\Kernel\Excel::__construct ( array $config )
Vtiful\Kernel\Format::align ( resource $handle , int $style )
Vtiful\Kernel\Format::bold ( resource $handle )
Vtiful\Kernel\Format::italic ( resource $handle )
Vtiful\Kernel\Format::underline ( resource $handle , int $style )
WeakMap::count ( void ) : int
WeakMap::current ( void ) : mixed
WeakMap::key ( void ) : object
WeakMap::next ( void ) : void
WeakMap::offsetExists ( object $object ) : bool
WeakMap::offsetGet ( object $object ) : mixed
WeakMap::offsetSet ( object $object , mixed $value ) : void
WeakMap::offsetUnset ( object $object ) : void
WeakMap::rewind ( void ) : void
WeakMap::valid ( void ) : bool
WeakMap::__construct ( void )
WeakRef::acquire ( void ) : bool
WeakRef::get ( void ) : object
WeakRef::release ( void ) : bool
WeakRef::valid ( void ) : bool
WeakRef::__construct ( object $object )
wkhtmltox\Image\Converter::convert ( void ) : string
wkhtmltox\Image\Converter::getVersion ( void ) : string
wkhtmltox\Image\Converter::__construct ([ string $buffer [, array $settings ]] )
wkhtmltox\PDF\Converter::add ( wkhtmltox\PDF\Object $object ) : void
wkhtmltox\PDF\Converter::convert ( void ) : string
wkhtmltox\PDF\Converter::getVersion ( void ) : string
wkhtmltox\PDF\Converter::__construct ([ array $settings ] )
wkhtmltox\PDF\Object::__construct ( string $buffer [, array $settings ] )
Worker::collect ([ Callable $collector ] ) : int
Worker::detach ( void ) : void
Worker::getCreatorId ( void ) : int
Worker::getCurrentThread ( void ) : Thread
Worker::getCurrentThreadId ( void ) : int
Worker::getStacked ( void ) : int
Worker::getThreadId ( void ) : int
Worker::globally ( void ) : mixed
Worker::isJoined ( void ) : bool
Worker::isShutdown ( void ) : bool
Worker::isStarted ( void ) : bool
Worker::isWorking ( void ) : bool
Worker::join ( void ) : bool
Worker::kill ( void ) : void
Worker::shutdown ( void ) : bool
Worker::stack ( Threaded &$work ) : int
Worker::start ([ int $options ] ) : bool
Worker::unstack ( void ) : int
XMLDiff\Base::diff ( mixed $from , mixed $to ) : mixed
XMLDiff\Base::merge ( mixed $src , mixed $diff ) : mixed
XMLDiff\Base::__construct ( string $nsname )
XMLDiff\DOM::diff ( DOMDocument $from , DOMDocument $to ) : DOMDocument
XMLDiff\DOM::merge ( DOMDocument $src , DOMDocument $diff ) : DOMDocument
XMLDiff\DOM::__construct ( string $nsname )
XMLDiff\File::diff ( string $from , string $to ) : string
XMLDiff\File::merge ( string $src , string $diff ) : string
XMLDiff\File::__construct ( string $nsname )
XMLDiff\Memory::diff ( string $from , string $to ) : string
XMLDiff\Memory::merge ( string $src , string $diff ) : string
XMLDiff\Memory::__construct ( string $nsname )
XMLReader::close ( void ) : bool
XMLReader::expand ([ DOMNode $basenode ] ) : DOMNode
XMLReader::getAttribute ( string $name ) : string
XMLReader::getAttributeNo ( int $index ) : string
XMLReader::getAttributeNs ( string $localName , string $namespaceURI ) : string
XMLReader::getParserProperty ( int $property ) : bool
XMLReader::isValid ( void ) : bool
XMLReader::lookupNamespace ( string $prefix ) : string
XMLReader::moveToAttribute ( string $name ) : bool
XMLReader::moveToAttributeNo ( int $index ) : bool
XMLReader::moveToAttributeNs ( string $localName , string $namespaceURI ) : bool
XMLReader::moveToElement ( void ) : bool
XMLReader::moveToFirstAttribute ( void ) : bool
XMLReader::moveToNextAttribute ( void ) : bool
XMLReader::next ([ string $localname ] ) : bool
XMLReader::open ( string $URI [, string $encoding [, int $options = 0 ]] ) : bool
XMLReader::read ( void ) : bool
XMLReader::readInnerXml ( void ) : string
XMLReader::readOuterXml ( void ) : string
XMLReader::readString ( void ) : string
XMLReader::setParserProperty ( int $property , bool $value ) : bool
XMLReader::setRelaxNGSchema ( string $filename ) : bool
XMLReader::setRelaxNGSchemaSource ( string $source ) : bool
XMLReader::setSchema ( string $filename ) : bool
XMLReader::xml ( string $source [, string $encoding [, int $options = 0 ]] ) : bool
XSLTProcessor::getParameter ( string $namespaceURI , string $localName ) : string
XSLTProcessor::getSecurityPrefs ( void ) : int
XSLTProcessor::hasExsltSupport ( void ) : bool
XSLTProcessor::importStylesheet ( object $stylesheet ) : bool
XSLTProcessor::registerPHPFunctions ([ mixed $restrict ] ) : void
XSLTProcessor::removeParameter ( string $namespaceURI , string $localName ) : bool
XSLTProcessor::setParameter ( string $namespace , string $name , string $value ) : bool [:OR:] ( string $namespace , array $options ) : bool
XSLTProcessor::setProfiling ( string $filename ) : bool
XSLTProcessor::setSecurityPrefs ( int $securityPrefs ) : int
XSLTProcessor::transformToDoc ( DOMNode $doc ) : DOMDocument
XSLTProcessor::transformToURI ( DOMDocument $doc , string $uri ) : int
XSLTProcessor::transformToXml ( object $doc ) : string
Yaconf::get ( string $name [, mixed $default_value = NULL ] ) : mixed
Yaconf::has ( string $name ) : bool
Yaf_Action_Abstract::display ( string $tpl [, array $parameters ] ) : bool
Yaf_Action_Abstract::execute ([ mixed $arg [, mixed $... ]] ) : mixed
Yaf_Action_Abstract::forward ( string $action [, array $paramters ] ) : void
Yaf_Action_Abstract::getController ( void ) : Yaf_Controller_Abstract
Yaf_Action_Abstract::getInvokeArg ( string $name ) : void
Yaf_Action_Abstract::getInvokeArgs ( void ) : void
Yaf_Action_Abstract::getModuleName ( void ) : string
Yaf_Action_Abstract::getRequest ( void ) : Yaf_Request_Abstract
Yaf_Action_Abstract::getResponse ( void ) : Yaf_Response_Abstract
Yaf_Action_Abstract::getView ( void ) : Yaf_View_Interface
Yaf_Action_Abstract::getViewpath ( void ) : string
Yaf_Action_Abstract::init ( void ) : void
Yaf_Action_Abstract::initView ([ array $options ] ) : void
Yaf_Action_Abstract::redirect ( string $url ) : bool
Yaf_Action_Abstract::render ( string $tpl [, array $parameters ] ) : string
Yaf_Action_Abstract::setViewpath ( string $view_directory ) : void
Yaf_Action_Abstract::__clone ( void ) : void
Yaf_Action_Abstract::__construct ( void )
Yaf_Application::app ( void ) : mixed
Yaf_Application::bootstrap ([ Yaf_Bootstrap_Abstract $bootstrap ] ) : void
Yaf_Application::clearLastError ( void ) : Yaf_Application
Yaf_Application::environ ( void ) : void
Yaf_Application::execute ( callable $entry , string $... ) : void
Yaf_Application::getAppDirectory ( void ) : Yaf_Application
Yaf_Application::getConfig ( void ) : Yaf_Config_Abstract
Yaf_Application::getDispatcher ( void ) : Yaf_Dispatcher
Yaf_Application::getLastErrorMsg ( void ) : string
Yaf_Application::getLastErrorNo ( void ) : int
Yaf_Application::getModules ( void ) : array
Yaf_Application::run ( void ) : void
Yaf_Application::setAppDirectory ( string $directory ) : Yaf_Application
Yaf_Application::__clone ( void ) : void
Yaf_Application::__construct ( mixed $config [, string $envrion ] )
Yaf_Application::__destruct ( void ) : void
Yaf_Application::__sleep ( void ) : void
Yaf_Application::__wakeup ( void ) : void
Yaf_Config_Abstract::get ( string $name , mixed $value ) : mixed
Yaf_Config_Abstract::readonly ( void ) : bool
Yaf_Config_Abstract::set ( void ) : Yaf_Config_Abstract
Yaf_Config_Abstract::toArray ( void ) : array
Yaf_Config_Ini::count ( void ) : void
Yaf_Config_Ini::current ( void ) : void
Yaf_Config_Ini::get ( string $name , mixed $value ) : mixed
Yaf_Config_Ini::key ( void ) : void
Yaf_Config_Ini::next ( void ) : void
Yaf_Config_Ini::offsetExists ( string $name ) : void
Yaf_Config_Ini::offsetGet ( string $name ) : void
Yaf_Config_Ini::offsetSet ( string $name , string $value ) : void
Yaf_Config_Ini::offsetUnset ( string $name ) : void
Yaf_Config_Ini::readonly ( void ) : void
Yaf_Config_Ini::rewind ( void ) : void
Yaf_Config_Ini::set ( void ) : Yaf_Config_Abstract
Yaf_Config_Ini::toArray ( void ) : array
Yaf_Config_Ini::valid ( void ) : void
Yaf_Config_Ini::__construct ( string $config_file [, string $section ] )
Yaf_Config_Ini::__get ([ string $name ] ) : void
Yaf_Config_Ini::__isset ( string $name ) : void
Yaf_Config_Ini::__set ( string $name , mixed $value ) : void
Yaf_Config_Simple::count ( void ) : void
Yaf_Config_Simple::current ( void ) : void
Yaf_Config_Simple::get ( string $name , mixed $value ) : mixed
Yaf_Config_Simple::key ( void ) : void
Yaf_Config_Simple::next ( void ) : void
Yaf_Config_Simple::offsetExists ( string $name ) : void
Yaf_Config_Simple::offsetGet ( string $name ) : void
Yaf_Config_Simple::offsetSet ( string $name , string $value ) : void
Yaf_Config_Simple::offsetUnset ( string $name ) : void
Yaf_Config_Simple::readonly ( void ) : void
Yaf_Config_Simple::rewind ( void ) : void
Yaf_Config_Simple::set ( void ) : Yaf_Config_Abstract
Yaf_Config_Simple::toArray ( void ) : array
Yaf_Config_Simple::valid ( void ) : void
Yaf_Config_Simple::__construct ( string $config_file [, string $section ] )
Yaf_Config_Simple::__get ([ string $name ] ) : void
Yaf_Config_Simple::__isset ( string $name ) : void
Yaf_Config_Simple::__set ( string $name , string $value ) : void
Yaf_Controller_Abstract::display ( string $tpl [, array $parameters ] ) : bool
Yaf_Controller_Abstract::forward ( string $action [, array $paramters ] ) : void [:OR:] ( string $controller , string $action [, array $paramters ] ) : void [:OR:] ( string $module , string $controller , string $action [, array $paramters ] ) : void
Yaf_Controller_Abstract::getInvokeArg ( string $name ) : void
Yaf_Controller_Abstract::getInvokeArgs ( void ) : void
Yaf_Controller_Abstract::getModuleName ( void ) : string
Yaf_Controller_Abstract::getRequest ( void ) : Yaf_Request_Abstract
Yaf_Controller_Abstract::getResponse ( void ) : Yaf_Response_Abstract
Yaf_Controller_Abstract::getView ( void ) : Yaf_View_Interface
Yaf_Controller_Abstract::getViewpath ( void ) : string
Yaf_Controller_Abstract::init ( void ) : void
Yaf_Controller_Abstract::initView ([ array $options ] ) : void
Yaf_Controller_Abstract::redirect ( string $url ) : bool
Yaf_Controller_Abstract::render ( string $tpl [, array $parameters ] ) : string
Yaf_Controller_Abstract::setViewpath ( string $view_directory ) : void
Yaf_Controller_Abstract::__clone ( void ) : void
Yaf_Controller_Abstract::__construct ( void )
Yaf_Dispatcher::autoRender ([ bool $flag ] ) : Yaf_Dispatcher
Yaf_Dispatcher::catchException ([ bool $flag ] ) : Yaf_Dispatcher
Yaf_Dispatcher::disableView ( void ) : bool
Yaf_Dispatcher::dispatch ( Yaf_Request_Abstract $request ) : Yaf_Response_Abstract
Yaf_Dispatcher::enableView ( void ) : Yaf_Dispatcher
Yaf_Dispatcher::flushInstantly ([ bool $flag ] ) : Yaf_Dispatcher
Yaf_Dispatcher::getApplication ( void ) : Yaf_Application
Yaf_Dispatcher::getInstance ( void ) : Yaf_Dispatcher
Yaf_Dispatcher::getRequest ( void ) : Yaf_Request_Abstract
Yaf_Dispatcher::getRouter ( void ) : Yaf_Router
Yaf_Dispatcher::initView ( string $templates_dir [, array $options ] ) : Yaf_View_Interface
Yaf_Dispatcher::registerPlugin ( Yaf_Plugin_Abstract $plugin ) : Yaf_Dispatcher
Yaf_Dispatcher::returnResponse ( bool $flag ) : Yaf_Dispatcher
Yaf_Dispatcher::setDefaultAction ( string $action ) : Yaf_Dispatcher
Yaf_Dispatcher::setDefaultController ( string $controller ) : Yaf_Dispatcher
Yaf_Dispatcher::setDefaultModule ( string $module ) : Yaf_Dispatcher
Yaf_Dispatcher::setErrorHandler ( call $callback , int $error_types ) : Yaf_Dispatcher
Yaf_Dispatcher::setRequest ( Yaf_Request_Abstract $request ) : Yaf_Dispatcher
Yaf_Dispatcher::setView ( Yaf_View_Interface $view ) : Yaf_Dispatcher
Yaf_Dispatcher::throwException ([ bool $flag ] ) : Yaf_Dispatcher
Yaf_Dispatcher::__clone ( void ) : void
Yaf_Dispatcher::__construct ( void )
Yaf_Dispatcher::__sleep ( void ) : void
Yaf_Dispatcher::__wakeup ( void ) : void
Yaf_Exception::getCode ( void ) : mixed
Yaf_Exception::getFile ( void ) : string
Yaf_Exception::getLine ( void ) : int
Yaf_Exception::getMessage ( void ) : string
Yaf_Exception::getPrevious ( void ) : void
Yaf_Exception::getTrace ( void ) : array
Yaf_Exception::getTraceAsString ( void ) : string
Yaf_Exception::__clone ( void ) : void
Yaf_Exception::__construct ( void )
Yaf_Exception::__toString ( void ) : string
Yaf_Exception_DispatchFailed::getPrevious ( void ) : void
Yaf_Exception_DispatchFailed::__construct ( void )
Yaf_Exception_LoadFailed::getPrevious ( void ) : void
Yaf_Exception_LoadFailed::__construct ( void )
Yaf_Exception_LoadFailed_Action::getPrevious ( void ) : void
Yaf_Exception_LoadFailed_Action::__construct ( void )
Yaf_Exception_LoadFailed_Controller::getPrevious ( void ) : void
Yaf_Exception_LoadFailed_Controller::__construct ( void )
Yaf_Exception_LoadFailed_Module::getPrevious ( void ) : void
Yaf_Exception_LoadFailed_Module::__construct ( void )
Yaf_Exception_LoadFailed_View::getPrevious ( void ) : void
Yaf_Exception_LoadFailed_View::__construct ( void )
Yaf_Exception_RouterFailed::getPrevious ( void ) : void
Yaf_Exception_RouterFailed::__construct ( void )
Yaf_Exception_StartupError::getPrevious ( void ) : void
Yaf_Exception_StartupError::__construct ( void )
Yaf_Exception_TypeError::getPrevious ( void ) : void
Yaf_Exception_TypeError::__construct ( void )
Yaf_Loader::autoload ( void ) : void
Yaf_Loader::clearLocalNamespace ( void ) : void
Yaf_Loader::getInstance ( void ) : void
Yaf_Loader::getLibraryPath ([ bool $is_global = FALSE ] ) : Yaf_Loader
Yaf_Loader::getLocalNamespace ( void ) : void
Yaf_Loader::import ( void ) : void
Yaf_Loader::isLocalName ( void ) : void
Yaf_Loader::registerLocalNamespace ( mixed $prefix ) : void
Yaf_Loader::setLibraryPath ( string $directory [, bool $is_global = FALSE ] ) : Yaf_Loader
Yaf_Loader::__clone ( void ) : void
Yaf_Loader::__construct ( void )
Yaf_Loader::__sleep ( void ) : void
Yaf_Loader::__wakeup ( void ) : void
Yaf_Plugin_Abstract::dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::dispatchLoopStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::postDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::preDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::preResponse ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::routerShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Plugin_Abstract::routerStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response ) : void
Yaf_Registry::del ( string $name ) : void
Yaf_Registry::get ( string $name ) : mixed
Yaf_Registry::has ( string $name ) : bool
Yaf_Registry::set ( string $name , string $value ) : bool
Yaf_Registry::__clone ( void ) : void
Yaf_Registry::__construct ( void )
Yaf_Request_Abstract::getActionName ( void ) : void
Yaf_Request_Abstract::getBaseUri ( void ) : void
Yaf_Request_Abstract::getControllerName ( void ) : void
Yaf_Request_Abstract::getEnv ( string $name [, string $default ] ) : void
Yaf_Request_Abstract::getException ( void ) : void
Yaf_Request_Abstract::getLanguage ( void ) : void
Yaf_Request_Abstract::getMethod ( void ) : string
Yaf_Request_Abstract::getModuleName ( void ) : void
Yaf_Request_Abstract::getParam ( string $name [, string $default ] ) : mixed
Yaf_Request_Abstract::getParams ( void ) : array
Yaf_Request_Abstract::getRequestUri ( void ) : void
Yaf_Request_Abstract::getServer ( string $name [, string $default ] ) : void
Yaf_Request_Abstract::isCli ( void ) : bool
Yaf_Request_Abstract::isDispatched ( void ) : bool
Yaf_Request_Abstract::isGet ( void ) : bool
Yaf_Request_Abstract::isHead ( void ) : bool
Yaf_Request_Abstract::isOptions ( void ) : bool
Yaf_Request_Abstract::isPost ( void ) : bool
Yaf_Request_Abstract::isPut ( void ) : bool
Yaf_Request_Abstract::isRouted ( void ) : bool
Yaf_Request_Abstract::isXmlHttpRequest ( void ) : bool
Yaf_Request_Abstract::setActionName ( string $action ) : void
Yaf_Request_Abstract::setBaseUri ( string $uir ) : bool
Yaf_Request_Abstract::setControllerName ( string $controller ) : void
Yaf_Request_Abstract::setDispatched ( void ) : void
Yaf_Request_Abstract::setModuleName ( string $module ) : void
Yaf_Request_Abstract::setParam ( string $name [, string $value ] ) : bool
Yaf_Request_Abstract::setRequestUri ( string $uir ) : void
Yaf_Request_Abstract::setRouted ([ string $flag ] ) : void
Yaf_Request_Http::get ( string $name [, string $default ] ) : mixed
Yaf_Request_Http::getActionName ( void ) : void
Yaf_Request_Http::getBaseUri ( void ) : void
Yaf_Request_Http::getControllerName ( void ) : void
Yaf_Request_Http::getCookie ( string $name [, string $default ] ) : mixed
Yaf_Request_Http::getEnv ( string $name [, string $default ] ) : void
Yaf_Request_Http::getException ( void ) : void
Yaf_Request_Http::getFiles ( void ) : void
Yaf_Request_Http::getLanguage ( void ) : void
Yaf_Request_Http::getMethod ( void ) : string
Yaf_Request_Http::getModuleName ( void ) : void
Yaf_Request_Http::getParam ( string $name [, string $default ] ) : mixed
Yaf_Request_Http::getParams ( void ) : array
Yaf_Request_Http::getPost ( string $name [, string $default ] ) : mixed
Yaf_Request_Http::getQuery ( string $name [, string $default ] ) : mixed
Yaf_Request_Http::getRaw ( void ) : mixed
Yaf_Request_Http::getRequest ( void ) : void
Yaf_Request_Http::getRequestUri ( void ) : void
Yaf_Request_Http::getServer ( string $name [, string $default ] ) : void
Yaf_Request_Http::isCli ( void ) : bool
Yaf_Request_Http::isDispatched ( void ) : bool
Yaf_Request_Http::isGet ( void ) : bool
Yaf_Request_Http::isHead ( void ) : bool
Yaf_Request_Http::isOptions ( void ) : bool
Yaf_Request_Http::isPost ( void ) : bool
Yaf_Request_Http::isPut ( void ) : bool
Yaf_Request_Http::isRouted ( void ) : bool
Yaf_Request_Http::isXmlHttpRequest ( void ) : bool
Yaf_Request_Http::setActionName ( string $action ) : void
Yaf_Request_Http::setBaseUri ( string $uir ) : bool
Yaf_Request_Http::setControllerName ( string $controller ) : void
Yaf_Request_Http::setDispatched ( void ) : void
Yaf_Request_Http::setModuleName ( string $module ) : void
Yaf_Request_Http::setParam ( string $name [, string $value ] ) : bool
Yaf_Request_Http::setRequestUri ( string $uir ) : void
Yaf_Request_Http::setRouted ([ string $flag ] ) : void
Yaf_Request_Http::__clone ( void ) : void
Yaf_Request_Http::__construct ([ string $request_uri [, string $base_uri ]] )
Yaf_Request_Simple::get ( void ) : void
Yaf_Request_Simple::getActionName ( void ) : void
Yaf_Request_Simple::getBaseUri ( void ) : void
Yaf_Request_Simple::getControllerName ( void ) : void
Yaf_Request_Simple::getCookie ( void ) : void
Yaf_Request_Simple::getEnv ( string $name [, string $default ] ) : void
Yaf_Request_Simple::getException ( void ) : void
Yaf_Request_Simple::getFiles ( void ) : void
Yaf_Request_Simple::getLanguage ( void ) : void
Yaf_Request_Simple::getMethod ( void ) : string
Yaf_Request_Simple::getModuleName ( void ) : void
Yaf_Request_Simple::getParam ( string $name [, string $default ] ) : mixed
Yaf_Request_Simple::getParams ( void ) : array
Yaf_Request_Simple::getPost ( void ) : void
Yaf_Request_Simple::getQuery ( void ) : void
Yaf_Request_Simple::getRequest ( void ) : void
Yaf_Request_Simple::getRequestUri ( void ) : void
Yaf_Request_Simple::getServer ( string $name [, string $default ] ) : void
Yaf_Request_Simple::isCli ( void ) : bool
Yaf_Request_Simple::isDispatched ( void ) : bool
Yaf_Request_Simple::isGet ( void ) : bool
Yaf_Request_Simple::isHead ( void ) : bool
Yaf_Request_Simple::isOptions ( void ) : bool
Yaf_Request_Simple::isPost ( void ) : bool
Yaf_Request_Simple::isPut ( void ) : bool
Yaf_Request_Simple::isRouted ( void ) : bool
Yaf_Request_Simple::isXmlHttpRequest ( void ) : void
Yaf_Request_Simple::setActionName ( string $action ) : void
Yaf_Request_Simple::setBaseUri ( string $uir ) : bool
Yaf_Request_Simple::setControllerName ( string $controller ) : void
Yaf_Request_Simple::setDispatched ( void ) : void
Yaf_Request_Simple::setModuleName ( string $module ) : void
Yaf_Request_Simple::setParam ( string $name [, string $value ] ) : bool
Yaf_Request_Simple::setRequestUri ( string $uir ) : void
Yaf_Request_Simple::setRouted ([ string $flag ] ) : void
Yaf_Request_Simple::__clone ( void ) : void
Yaf_Request_Simple::__construct ([ string $method [, string $module [, string $controller [, string $action [, array $params ]]]]] )
Yaf_Response_Abstract::appendBody ( string $content [, string $key ] ) : bool
Yaf_Response_Abstract::clearBody ([ string $key ] ) : bool
Yaf_Response_Abstract::clearHeaders ( void ) : void
Yaf_Response_Abstract::getBody ([ string $key ] ) : mixed
Yaf_Response_Abstract::getHeader ( void ) : void
Yaf_Response_Abstract::prependBody ( string $content [, string $key ] ) : bool
Yaf_Response_Abstract::response ( void ) : void
Yaf_Response_Abstract::setAllHeaders ( void ) : void
Yaf_Response_Abstract::setBody ( string $content [, string $key ] ) : bool
Yaf_Response_Abstract::setHeader ( string $name , string $value [, bool $replace ] ) : bool
Yaf_Response_Abstract::setRedirect ( void ) : void
Yaf_Response_Abstract::__clone ( void ) : void
Yaf_Response_Abstract::__construct ( void )
Yaf_Response_Abstract::__destruct ( void ) : void
Yaf_Response_Abstract::__toString ( void ) : string
Yaf_Router::addConfig ( Yaf_Config_Abstract $config ) : bool
Yaf_Router::addRoute ( string $name , Yaf_Route_Abstract $route ) : bool
Yaf_Router::getCurrentRoute ( void ) : string
Yaf_Router::getRoute ( string $name ) : Yaf_Route_Interface
Yaf_Router::getRoutes ( void ) : mixed
Yaf_Router::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Router::__construct ( void )
Yaf_Route_Interface::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Interface::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Map::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Map::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Map::__construct ([ string $controller_prefer = FALSE [, string $delimiter = "" ]] )
Yaf_Route_Regex::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Regex::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Regex::__construct ( string $match , array $route [, array $map [, array $verify [, string $reverse ]]] )
Yaf_Route_Rewrite::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Rewrite::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Rewrite::__construct ( string $match , array $route [, array $verify ] )
Yaf_Route_Simple::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Simple::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Simple::__construct ( string $module_name , string $controller_name , string $action_name )
Yaf_Route_Static::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Static::match ( string $uri ) : void
Yaf_Route_Static::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Supervar::assemble ( array $info [, array $query ] ) : string
Yaf_Route_Supervar::route ( Yaf_Request_Abstract $request ) : bool
Yaf_Route_Supervar::__construct ( string $supervar_name )
Yaf_Session::count ( void ) : void
Yaf_Session::current ( void ) : void
Yaf_Session::del ( string $name ) : void
Yaf_Session::getInstance ( void ) : void
Yaf_Session::has ( string $name ) : void
Yaf_Session::key ( void ) : void
Yaf_Session::next ( void ) : void
Yaf_Session::offsetExists ( string $name ) : void
Yaf_Session::offsetGet ( string $name ) : void
Yaf_Session::offsetSet ( string $name , string $value ) : void
Yaf_Session::offsetUnset ( string $name ) : void
Yaf_Session::rewind ( void ) : void
Yaf_Session::start ( void ) : void
Yaf_Session::valid ( void ) : void
Yaf_Session::__clone ( void ) : void
Yaf_Session::__construct ( void )
Yaf_Session::__get ( string $name ) : void
Yaf_Session::__isset ( string $name ) : void
Yaf_Session::__set ( string $name , string $value ) : void
Yaf_Session::__sleep ( void ) : void
Yaf_Session::__unset ( string $name ) : void
Yaf_Session::__wakeup ( void ) : void
Yaf_View_Interface::assign ( string $name [, string $value ] ) : bool
Yaf_View_Interface::display ( string $tpl [, array $tpl_vars ] ) : bool
Yaf_View_Interface::getScriptPath ( void ) : void
Yaf_View_Interface::render ( string $tpl [, array $tpl_vars ] ) : string
Yaf_View_Interface::setScriptPath ( string $template_dir ) : void
Yaf_View_Simple::assign ( string $name [, mixed $value ] ) : bool
Yaf_View_Simple::assignRef ( string $name , mixed &$value ) : bool
Yaf_View_Simple::clear ([ string $name ] ) : bool
Yaf_View_Simple::display ( string $tpl [, array $tpl_vars ] ) : bool
Yaf_View_Simple::eval ( string $tpl_content [, array $tpl_vars ] ) : string
Yaf_View_Simple::getScriptPath ( void ) : string
Yaf_View_Simple::render ( string $tpl [, array $tpl_vars ] ) : string
Yaf_View_Simple::setScriptPath ( string $template_dir ) : bool
Yaf_View_Simple::__construct ( string $template_dir [, array $options ] )
Yaf_View_Simple::__get ([ string $name ] ) : void
Yaf_View_Simple::__isset ( string $name ) : void
Yaf_View_Simple::__set ( string $name , mixed $value ) : void
Yar_Client::setOpt ( int $name , mixed $value ) : Yar_Client
Yar_Client::__call ( string $method , array $parameters ) : void
Yar_Client::__construct ( string $url [, array $options ] )
Yar_Client_Exception::getCode ( void ) : mixed
Yar_Client_Exception::getFile ( void ) : string
Yar_Client_Exception::getLine ( void ) : int
Yar_Client_Exception::getMessage ( void ) : string
Yar_Client_Exception::getPrevious ( void ) : Throwable
Yar_Client_Exception::getTrace ( void ) : array
Yar_Client_Exception::getTraceAsString ( void ) : string
Yar_Client_Exception::getType ( void ) : string
Yar_Client_Exception::__clone ( void ) : void
Yar_Client_Exception::__toString ( void ) : string
Yar_Concurrent_Client::call ( string $uri , string $method [, array $parameters [, callable $callback [, callable $error_callback [, array $options ]]]] ) : int
Yar_Concurrent_Client::loop ([ callable $callback [, callable $error_callback ]] ) : bool
Yar_Concurrent_Client::reset ( void ) : bool
Yar_Server::handle ( void ) : bool
Yar_Server::__construct ( Object $obj )
Yar_Server_Exception::getCode ( void ) : mixed
Yar_Server_Exception::getFile ( void ) : string
Yar_Server_Exception::getLine ( void ) : int
Yar_Server_Exception::getMessage ( void ) : string
Yar_Server_Exception::getPrevious ( void ) : Throwable
Yar_Server_Exception::getTrace ( void ) : array
Yar_Server_Exception::getTraceAsString ( void ) : string
Yar_Server_Exception::getType ( void ) : string
Yar_Server_Exception::__clone ( void ) : void
Yar_Server_Exception::__toString ( void ) : string
ZipArchive::addEmptyDir ( string $dirname ) : bool
ZipArchive::addFile ( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]] ) : bool
ZipArchive::addFromString ( string $localname , string $contents ) : bool
ZipArchive::addGlob ( string $pattern [, int $flags = 0 [, array $options = array() ]] ) : bool
ZipArchive::addPattern ( string $pattern [, string $path = "." [, array $options = array() ]] ) : bool
ZipArchive::close ( void ) : bool
ZipArchive::count ( void ) : int
ZipArchive::deleteIndex ( int $index ) : bool
ZipArchive::deleteName ( string $name ) : bool
ZipArchive::extractTo ( string $destination [, mixed $entries ] ) : bool
ZipArchive::getArchiveComment ([ int $flags ] ) : string
ZipArchive::getCommentIndex ( int $index [, int $flags ] ) : string
ZipArchive::getCommentName ( string $name [, int $flags ] ) : string
ZipArchive::GetExternalAttributesIndex ( int $index , int &$opsys , int &$attr [, int $flags ] ) : bool
ZipArchive::getExternalAttributesName ( string $name , int &$opsys , int &$attr [, int $flags ] ) : bool
ZipArchive::getFromIndex ( int $index [, int $length = 0 [, int $flags ]] ) : string
ZipArchive::getFromName ( string $name [, int $length = 0 [, int $flags ]] ) : string
ZipArchive::getNameIndex ( int $index [, int $flags ] ) : string
ZipArchive::getStatusString ( void ) : string
ZipArchive::getStream ( string $name ) : resource
ZipArchive::locateName ( string $name [, int $flags ] ) : int
ZipArchive::open ( string $filename [, int $flags ] ) : mixed
ZipArchive::renameIndex ( int $index , string $newname ) : bool
ZipArchive::renameName ( string $name , string $newname ) : bool
ZipArchive::setArchiveComment ( string $comment ) : bool
ZipArchive::setCommentIndex ( int $index , string $comment ) : bool
ZipArchive::setCommentName ( string $name , string $comment ) : bool
ZipArchive::setCompressionIndex ( int $index , int $comp_method [, int $comp_flags = 0 ] ) : bool
ZipArchive::setCompressionName ( string $name , int $comp_method [, int $comp_flags = 0 ] ) : bool
ZipArchive::setEncryptionIndex ( int $index , string $method [, string $password ] ) : bool
ZipArchive::setEncryptionName ( string $name , int $method [, string $password ] ) : bool
ZipArchive::setExternalAttributesIndex ( int $index , int $opsys , int $attr [, int $flags ] ) : bool
ZipArchive::setExternalAttributesName ( string $name , int $opsys , int $attr [, int $flags ] ) : bool
ZipArchive::setPassword ( string $password ) : bool
ZipArchive::statIndex ( int $index [, int $flags ] ) : array
ZipArchive::statName ( string $name [, int $flags ] ) : array
ZipArchive::unchangeAll ( void ) : bool
ZipArchive::unchangeArchive ( void ) : bool
ZipArchive::unchangeIndex ( int $index ) : bool
ZipArchive::unchangeName ( string $name ) : bool
ZMQ::__construct ( void )
ZMQContext::getOpt ( string $key ) : mixed
ZMQContext::getSocket ( int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL ]] ) : ZMQSocket
ZMQContext::isPersistent ( void ) : bool
ZMQContext::setOpt ( int $key , mixed $value ) : ZMQContext
ZMQContext::__construct ([ int $io_threads = 1 [, bool $is_persistent = TRUE ]] )
ZMQDevice::getIdleTimeout ( void ) : ZMQDevice
ZMQDevice::getTimerTimeout ( void ) : ZMQDevice
ZMQDevice::run ( void ) : void
ZMQDevice::setIdleCallback ( callable $cb_func , int $timeout [, mixed $user_data ] ) : ZMQDevice
ZMQDevice::setIdleTimeout ( int $timeout ) : ZMQDevice
ZMQDevice::setTimerCallback ( callable $cb_func , int $timeout [, mixed $user_data ] ) : ZMQDevice
ZMQDevice::setTimerTimeout ( int $timeout ) : ZMQDevice
ZMQDevice::__construct ( ZMQSocket $frontend , ZMQSocket $backend [, ZMQSocket $listener ] )
ZMQPoll::add ( mixed $entry , int $type ) : string
ZMQPoll::clear ( void ) : ZMQPoll
ZMQPoll::count ( void ) : int
ZMQPoll::getLastErrors ( void ) : array
ZMQPoll::poll ( array &$readable , array &$writable [, int $timeout = -1 ] ) : int
ZMQPoll::remove ( mixed $item ) : bool
ZMQSocket::bind ( string $dsn [, bool $force = FALSE ] ) : ZMQSocket
ZMQSocket::connect ( string $dsn [, bool $force = FALSE ] ) : ZMQSocket
ZMQSocket::disconnect ( string $dsn ) : ZMQSocket
ZMQSocket::getEndpoints ( void ) : array
ZMQSocket::getPersistentId ( void ) : string
ZMQSocket::getSocketType ( void ) : int
ZMQSocket::getSockOpt ( string $key ) : mixed
ZMQSocket::isPersistent ( void ) : bool
ZMQSocket::recv ([ int $mode = 0 ] ) : string
ZMQSocket::recvMulti ([ int $mode = 0 ] ) : array
ZMQSocket::send ( string $message [, int $mode = 0 ] ) : ZMQSocket
ZMQSocket::setSockOpt ( int $key , mixed $value ) : ZMQSocket
ZMQSocket::unbind ( string $dsn ) : ZMQSocket
ZMQSocket::__construct ( ZMQContext $context , int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL ]] )
Zookeeper::addAuth ( string $scheme , string $cert [, callable $completion_cb = NULL ] ) : bool
Zookeeper::close ( void ) : void
Zookeeper::connect ( string $host [, callable $watcher_cb = NULL [, int $recv_timeout = 10000 ]] ) : void
Zookeeper::create ( string $path , string $value , array $acls [, int $flags = NULL ] ) : string
Zookeeper::delete ( string $path [, int $version = -1 ] ) : bool
Zookeeper::exists ( string $path [, callable $watcher_cb = NULL ] ) : bool
Zookeeper::get ( string $path [, callable $watcher_cb = NULL [, array &$stat = NULL [, int $max_size = 0 ]]] ) : string
Zookeeper::getAcl ( string $path ) : array
Zookeeper::getChildren ( string $path [, callable $watcher_cb = NULL ] ) : array
Zookeeper::getClientId ( void ) : int
Zookeeper::getConfig ( void ) : ZookeeperConfig
Zookeeper::getRecvTimeout ( void ) : int
Zookeeper::getState ( void ) : int
Zookeeper::isRecoverable ( void ) : bool
Zookeeper::set ( string $path , string $value [, int $version = -1 [, array &$stat = NULL ]] ) : bool
Zookeeper::setAcl ( string $path , int $version , array $acl ) : bool
Zookeeper::setDebugLevel ( int $logLevel ) : bool
Zookeeper::setDeterministicConnOrder ( bool $yesOrNo ) : bool
Zookeeper::setLogStream ( resource $stream ) : bool
Zookeeper::setWatcher ( callable $watcher_cb ) : bool
Zookeeper::__construct ([ string $host = '' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000 ]]] )
ZookeeperAuthenticationException::getCode ( void ) : mixed
ZookeeperAuthenticationException::getFile ( void ) : string
ZookeeperAuthenticationException::getLine ( void ) : int
ZookeeperAuthenticationException::getMessage ( void ) : string
ZookeeperAuthenticationException::getPrevious ( void ) : Throwable
ZookeeperAuthenticationException::getTrace ( void ) : array
ZookeeperAuthenticationException::getTraceAsString ( void ) : string
ZookeeperAuthenticationException::__clone ( void ) : void
ZookeeperAuthenticationException::__toString ( void ) : string
ZookeeperConfig::add ( string $members [, int $version = -1 [, array &$stat = NULL ]] ) : void
ZookeeperConfig::get ([ callable $watcher_cb = NULL [, array &$stat = NULL ]] ) : string
ZookeeperConfig::remove ( string $id_list [, int $version = -1 [, array &$stat = NULL ]] ) : void
ZookeeperConfig::set ( string $members [, int $version = -1 [, array &$stat = NULL ]] ) : void
ZookeeperConnectionException::getCode ( void ) : mixed
ZookeeperConnectionException::getFile ( void ) : string
ZookeeperConnectionException::getLine ( void ) : int
ZookeeperConnectionException::getMessage ( void ) : string
ZookeeperConnectionException::getPrevious ( void ) : Throwable
ZookeeperConnectionException::getTrace ( void ) : array
ZookeeperConnectionException::getTraceAsString ( void ) : string
ZookeeperConnectionException::__clone ( void ) : void
ZookeeperConnectionException::__toString ( void ) : string
ZookeeperException::getCode ( void ) : mixed
ZookeeperException::getFile ( void ) : string
ZookeeperException::getLine ( void ) : int
ZookeeperException::getMessage ( void ) : string
ZookeeperException::getPrevious ( void ) : Throwable
ZookeeperException::getTrace ( void ) : array
ZookeeperException::getTraceAsString ( void ) : string
ZookeeperException::__clone ( void ) : void
ZookeeperException::__toString ( void ) : string
ZookeeperMarshallingException::getCode ( void ) : mixed
ZookeeperMarshallingException::getFile ( void ) : string
ZookeeperMarshallingException::getLine ( void ) : int
ZookeeperMarshallingException::getMessage ( void ) : string
ZookeeperMarshallingException::getPrevious ( void ) : Throwable
ZookeeperMarshallingException::getTrace ( void ) : array
ZookeeperMarshallingException::getTraceAsString ( void ) : string
ZookeeperMarshallingException::__clone ( void ) : void
ZookeeperMarshallingException::__toString ( void ) : string
ZookeeperNoNodeException::getCode ( void ) : mixed
ZookeeperNoNodeException::getFile ( void ) : string
ZookeeperNoNodeException::getLine ( void ) : int
ZookeeperNoNodeException::getMessage ( void ) : string
ZookeeperNoNodeException::getPrevious ( void ) : Throwable
ZookeeperNoNodeException::getTrace ( void ) : array
ZookeeperNoNodeException::getTraceAsString ( void ) : string
ZookeeperNoNodeException::__clone ( void ) : void
ZookeeperNoNodeException::__toString ( void ) : string
ZookeeperOperationTimeoutException::getCode ( void ) : mixed
ZookeeperOperationTimeoutException::getFile ( void ) : string
ZookeeperOperationTimeoutException::getLine ( void ) : int
ZookeeperOperationTimeoutException::getMessage ( void ) : string
ZookeeperOperationTimeoutException::getPrevious ( void ) : Throwable
ZookeeperOperationTimeoutException::getTrace ( void ) : array
ZookeeperOperationTimeoutException::getTraceAsString ( void ) : string
ZookeeperOperationTimeoutException::__clone ( void ) : void
ZookeeperOperationTimeoutException::__toString ( void ) : string
ZookeeperSessionException::getCode ( void ) : mixed
ZookeeperSessionException::getFile ( void ) : string
ZookeeperSessionException::getLine ( void ) : int
ZookeeperSessionException::getMessage ( void ) : string
ZookeeperSessionException::getPrevious ( void ) : Throwable
ZookeeperSessionException::getTrace ( void ) : array
ZookeeperSessionException::getTraceAsString ( void ) : string
ZookeeperSessionException::__clone ( void ) : void
ZookeeperSessionException::__toString ( void ) : string
